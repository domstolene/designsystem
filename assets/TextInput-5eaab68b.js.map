{"version":3,"file":"TextInput-5eaab68b.js","sources":["../../../../packages/components/src/components/TextInput/TextInput.tokens.tsx","../../../../packages/components/src/components/TextInput/CharCounter.tsx","../../../../packages/components/src/components/TextInput/TextInput.styles.tsx","../../../../packages/components/src/components/TextInput/TextInput.tsx"],"sourcesContent":["import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { colors, spacing, iconSizes } = ddsBaseTokens;\n\nconst input = {\n  withIcon: {\n    medium: {\n      paddingLeft: `${\n        spacing.SizesDdsSpacingLocalX075NumberPx +\n        iconSizes.DdsIconsizeMediumNumberPx +\n        spacing.SizesDdsSpacingLocalX05NumberPx\n      }px`,\n    },\n    small: {\n      paddingLeft: `${\n        spacing.SizesDdsSpacingLocalX075NumberPx +\n        iconSizes.DdsIconsizeSmallNumberPx +\n        spacing.SizesDdsSpacingLocalX05NumberPx\n      }px`,\n    },\n    tiny: {\n      paddingLeft: `${\n        spacing.SizesDdsSpacingLocalX05NumberPx +\n        iconSizes.DdsIconsizeSmallNumberPx +\n        spacing.SizesDdsSpacingLocalX025NumberPx\n      }px`,\n    },\n  },\n};\n\nconst affix = {\n  border: {\n    color: colors.DdsColorNeutralsGray5,\n  },\n};\n\nconst icon = {\n  color: colors.DdsColorNeutralsGray9,\n  sizes: {\n    medium: {\n      top: spacing.SizesDdsSpacingLocalX075,\n      left: spacing.SizesDdsSpacingLocalX075,\n    },\n    small: {\n      top: spacing.SizesDdsSpacingLocalX075,\n      left: spacing.SizesDdsSpacingLocalX075,\n    },\n    tiny: {\n      top: spacing.SizesDdsSpacingLocalX05,\n      left: spacing.SizesDdsSpacingLocalX05,\n    },\n  },\n};\n\nexport const textInputTokens = {\n  input,\n  icon,\n  affix,\n};\n","import { useId } from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentProps,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { Typography } from '@norges-domstoler/dds-typography';\n\nconst Wrapper = styled(Typography)`\n  margin-left: auto;\n`;\n\ntype Props = BaseComponentProps<\n  HTMLElement,\n  {\n    current: number;\n    max: number;\n  }\n>;\n\nfunction CharCounter(props: Props) {\n  const { current, max, id, className, htmlProps, ...rest } = props;\n\n  const generatedId = useId();\n  const uniqueId = id ?? `${generatedId}-characterCounter`;\n\n  return (\n    <Wrapper\n      {...getBaseHTMLProps(uniqueId, className, htmlProps, rest)}\n      forwardedAs=\"div\"\n      typographyType=\"supportingStyleHelperText01\"\n      aria-label={`${current} av ${max} tegn skrevet`}\n    >\n      {current}/{max}\n    </Wrapper>\n  );\n}\n\nexport default CharCounter;\n","import styled, { css } from 'styled-components';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport {\n  InputProps,\n  InputSize,\n  StatefulInput,\n} from '@norges-domstoler/dds-form';\n\nimport { textInputTokens as tokens } from './TextInput.tokens';\n\nconst { iconSizes } = ddsBaseTokens;\nconst { input, icon } = tokens;\n\nexport const MessageContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\ninterface StyledIconProps {\n  size: InputSize;\n}\n\nexport const StyledIcon = styled(Icon)<StyledIconProps>`\n  position: absolute;\n  color: ${icon.color};\n  ${({ size, iconSize }) => css`\n    left: ${icon.sizes[size].left};\n    ${iconSize === 'small'\n      ? css`\n          top: ${`calc(50% - ${iconSizes.DdsIconsizeSmallNumberPx / 2}px)`};\n        `\n      : css`\n          top: ${`calc(50% - ${iconSizes.DdsIconsizeMediumNumberPx / 2}px)`};\n        `}\n  `}\n  z-index: 1;\n`;\n\ntype StyledInputProps = {\n  hasIcon?: boolean;\n} & Pick<InputProps, 'componentSize'>;\n\nexport const StyledInput = styled(StatefulInput)<StyledInputProps>`\n  ${({ componentSize, hasIcon }) =>\n    hasIcon &&\n    componentSize &&\n    css`\n      padding-left: ${input.withIcon[componentSize].paddingLeft};\n    `}\n`;\n","import React, {\n  useState,\n  forwardRef,\n  useId,\n  useRef,\n  useLayoutEffect,\n} from 'react';\nimport { Label } from '@norges-domstoler/dds-typography';\nimport {\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n} from '@norges-domstoler/dds-core';\nimport {\n  InputSize,\n  getDefaultText,\n  InputContainer,\n  InputAffixContainer,\n  StatefulInput,\n  OuterInputContainer,\n} from '@norges-domstoler/dds-form';\nimport { Property } from 'csstype';\nimport styled, { css } from 'styled-components';\n\nimport { textInputTokens } from './TextInput.tokens';\nimport { renderInputMessage } from '../../utils/renderInputMessage';\nimport { getFormInputIconSize } from '../../utils/icon';\nimport CharCounter from './CharCounter';\nimport { TextAffixProps, TextInputProps } from './TextInput.types';\nimport { MessageContainer, StyledIcon, StyledInput } from './TextInput.styles';\n\nconst defaultWidth: Property.Width<string> = '320px';\nconst defaultTinyWidth: Property.Width<string> = '210px';\n\nconst getWidth = (\n  size: InputSize,\n  width?: Property.Width<string>,\n): Property.Width<string> => {\n  if (width) return width;\n  if (size === 'tiny') {\n    return defaultTinyWidth;\n  }\n  return defaultWidth;\n};\n\nconst Affix = styled.span<TextAffixProps>`\n  position: absolute;\n  height: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n  z-index: 1;\n`;\n\nconst Prefix = styled(Affix)`\n  left: 0;\n  margin-left: 8px;\n  padding-right: 8px;\n  border-right: 1px solid ${textInputTokens.affix.border.color};\n\n  ${({ readOnly }) =>\n    readOnly &&\n    css`\n      margin-left: 0;\n      padding-right: 0.5ch;\n      border-right: none;\n    `};\n`;\n\nconst Suffix = styled(Affix)`\n  right: 0;\n  margin-right: 8px;\n  padding-left: 8px;\n  border-left: 1px solid ${textInputTokens.affix.border.color};\n\n  ${({ readOnly }) =>\n    readOnly &&\n    css`\n      margin-right: 0;\n      padding-left: 0.5ch;\n      border-left: none;\n    `};\n`;\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  (\n    {\n      label,\n      disabled,\n      readOnly,\n      errorMessage,\n      tip,\n      required,\n      maxLength,\n      onChange,\n      id,\n      width,\n      componentSize = 'medium',\n      type = 'text',\n      withCharacterCounter = true,\n      className,\n      style,\n      value,\n      defaultValue,\n      'aria-required': ariaRequired,\n      'aria-describedby': ariaDescribedby,\n      icon,\n      prefix,\n      suffix,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [text, setText] = useState<string>(\n      getDefaultText(value, defaultValue),\n    );\n    const prefixRef = useRef<HTMLSpanElement>(null);\n    const suffixRef = useRef<HTMLSpanElement>(null);\n    const [prefixLength, setPrefixLength] = useState(0);\n    const [suffixLength, setSuffixLength] = useState(0);\n\n    useLayoutEffect(() => {\n      if (prefixRef.current) {\n        setPrefixLength(prefixRef.current.offsetWidth);\n      }\n      if (suffixRef.current) {\n        setSuffixLength(suffixRef.current.offsetWidth);\n      }\n    }, [prefix, suffix, readOnly]);\n\n    const onChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\n      event: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n      setText(event.target.value);\n\n      if (onChange) {\n        onChange(event);\n      }\n    };\n\n    const generatedId = useId();\n    const uniqueId = id ?? `${generatedId}-textInput`;\n\n    const hasErrorMessage = !!errorMessage;\n    const hasTip = !!tip;\n    const hasLabel = !!label;\n    const hasMessage = hasErrorMessage || hasTip || !!maxLength;\n    const hasIcon = !!icon;\n    const hasAffix = !!(prefix ?? suffix);\n\n    const characterCounterId = derivativeIdGenerator(\n      uniqueId,\n      'characterCounter',\n    );\n    const tipId = derivativeIdGenerator(uniqueId, 'tip');\n    const errorMessageId = derivativeIdGenerator(uniqueId, 'errorMessage');\n\n    const generalInputProps = {\n      id: uniqueId,\n      errorMessage,\n      hasErrorMessage,\n      required,\n      disabled,\n      readOnly,\n      tabIndex: readOnly ? -1 : 0,\n      maxLength,\n      value,\n      defaultValue,\n      'aria-required': ariaRequired,\n      'aria-describedby': spaceSeparatedIdListGenerator([\n        hasTip ? tipId : undefined,\n        hasErrorMessage ? errorMessageId : undefined,\n        maxLength && withCharacterCounter ? characterCounterId : undefined,\n        ariaDescribedby,\n      ]),\n      'aria-invalid': hasErrorMessage ? true : undefined,\n      ...rest,\n    };\n\n    const outerInputContainerProps = {\n      className,\n      style,\n      width: getWidth(componentSize, width),\n    };\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    const showRequiredStyling = !!(required || ariaRequired);\n\n    let extendedInput = null;\n\n    if (hasIcon) {\n      extendedInput = (\n        <InputContainer>\n          {\n            <StyledIcon\n              icon={icon}\n              iconSize={getFormInputIconSize(componentSize)}\n              size={componentSize}\n            />\n          }\n          <StyledInput\n            ref={ref}\n            onChange={onChangeHandler}\n            type={type}\n            componentSize={componentSize}\n            hasIcon={hasIcon}\n            {...generalInputProps}\n          />\n        </InputContainer>\n      );\n    } else if (hasAffix) {\n      extendedInput = (\n        <InputAffixContainer>\n          {prefix && (\n            <Prefix readOnly={readOnly} ref={prefixRef} aria-hidden>\n              {prefix}\n            </Prefix>\n          )}\n          <StatefulInput\n            ref={ref}\n            onChange={onChangeHandler}\n            type={type}\n            componentSize={componentSize}\n            prefixLength={prefixLength}\n            suffixLength={suffixLength}\n            {...generalInputProps}\n          />\n          {suffix && (\n            <Suffix readOnly={readOnly} ref={suffixRef} aria-hidden>\n              {suffix}\n            </Suffix>\n          )}\n        </InputAffixContainer>\n      );\n    }\n\n    return (\n      <OuterInputContainer {...outerInputContainerProps}>\n        {hasLabel && (\n          <Label htmlFor={uniqueId} showRequiredStyling={showRequiredStyling}>\n            {label}\n          </Label>\n        )}\n        {extendedInput ? (\n          extendedInput\n        ) : (\n          <StatefulInput\n            ref={ref}\n            onChange={onChangeHandler}\n            type={type}\n            componentSize={componentSize}\n            {...generalInputProps}\n          />\n        )}\n        {hasMessage && (\n          <MessageContainer>\n            {renderInputMessage(tip, tipId, errorMessage, errorMessageId)}\n            {maxLength &&\n              Number.isInteger(maxLength) &&\n              maxLength > 0 &&\n              withCharacterCounter && (\n                <CharCounter\n                  id={characterCounterId}\n                  current={text.length}\n                  max={maxLength}\n                />\n              )}\n          </MessageContainer>\n        )}\n      </OuterInputContainer>\n    );\n  },\n);\n\nTextInput.displayName = 'TextInput';\n"],"names":["colors","spacing","iconSizes","ddsBaseTokens","input","affix","icon","textInputTokens","Wrapper","styled","Typography","CharCounter","props","current","max","id","className","htmlProps","rest","generatedId","useId","uniqueId","jsxs","getBaseHTMLProps","tokens","MessageContainer","StyledIcon","Icon","size","iconSize","css","StyledInput","StatefulInput","componentSize","hasIcon","defaultWidth","defaultTinyWidth","getWidth","width","Affix","Prefix","readOnly","Suffix","TextInput","forwardRef","label","disabled","errorMessage","tip","required","maxLength","onChange","type","withCharacterCounter","style","value","defaultValue","ariaRequired","ariaDescribedby","prefix","suffix","ref","text","setText","useState","getDefaultText","prefixRef","useRef","suffixRef","prefixLength","setPrefixLength","suffixLength","setSuffixLength","useLayoutEffect","onChangeHandler","event","hasErrorMessage","hasTip","hasLabel","hasMessage","hasAffix","characterCounterId","derivativeIdGenerator","tipId","errorMessageId","generalInputProps","spaceSeparatedIdListGenerator","outerInputContainerProps","showRequiredStyling","extendedInput","InputContainer","jsx","getFormInputIconSize","InputAffixContainer","OuterInputContainer","Label","renderInputMessage"],"mappings":"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"}
{"version":3,"file":"DrawerGroup-434ae022.js","sources":["../../../../packages/components/src/components/Drawer/Drawer.tokens.tsx","../../../../packages/components/src/components/Drawer/Drawer.tsx","../../../../packages/components/src/components/Drawer/DrawerGroup.tsx"],"sourcesContent":["import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { spacing } = ddsBaseTokens;\n\nconst contentContainerPaddingNumberPx =\n  spacing.SizesDdsSpacingLocalX025NumberPx;\nconst contentContainerPadding = `${contentContainerPaddingNumberPx}px`;\n\nconst container = {\n  padding: `${\n    spacing.SizesDdsSpacingLocalX1NumberPx - contentContainerPaddingNumberPx\n  }px ${\n    spacing.SizesDdsSpacingLocalX1NumberPx - contentContainerPaddingNumberPx\n  }px ${\n    spacing.SizesDdsSpacingLocalX1NumberPx - contentContainerPaddingNumberPx\n  }px ${\n    spacing.SizesDdsSpacingLocalX15NumberPx - contentContainerPaddingNumberPx\n  }px`,\n};\n\nconst contentContainer = {\n  gap: spacing.SizesDdsSpacingLocalX1,\n  padding: contentContainerPadding,\n};\n\nexport const drawerTokens = {\n  container,\n  contentContainer,\n};\n","import { forwardRef, ReactNode, RefObject, useId } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport { Button } from '../Button';\nimport { Typography } from '@norges-domstoler/dds-typography';\nimport {\n  useCombinedRef,\n  useMountTransition,\n  useOnClickOutside,\n  useOnKeyDown,\n  useFocusTrap,\n  Paper,\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { Property } from 'csstype';\nimport { CloseIcon } from '@norges-domstoler/dds-icons';\n\nimport { drawerTokens as tokens } from './Drawer.tokens';\nimport { ScrollableContainer } from '../ScrollableContainer';\nimport { focusVisible } from '@norges-domstoler/dds-form';\n\nconst { container, contentContainer } = tokens;\n\nconst getMaxWidth = (size: DrawerSize): Property.MaxWidth => {\n  if (size === 'large') return '800px';\n  else if (size === 'medium') return '600px';\n  else return '400px';\n};\n\ntype ContainerProps = {\n  placement: DrawerPlacement;\n  isOpen: boolean;\n  widthProps?: WidthProps;\n  size: DrawerSize;\n};\n\nconst Container = styled(Paper)<ContainerProps>`\n  position: fixed;\n  top: 0;\n  height: 100%;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: flex-end;\n  min-width: 300px;\n  z-index: 100;\n  padding: ${container.padding};\n\n  ${({ size }) => css`\n    max-width: ${getMaxWidth(size)};\n  `}\n\n  ${({ widthProps }) =>\n    widthProps &&\n    css`\n      ${widthProps}\n    `}\n\n  ${({ placement, isOpen }) =>\n    placement === 'left'\n      ? css`\n          left: 0;\n          transform: ${isOpen ? 'translate(0px)' : 'translateX(-100%)'};\n        `\n      : placement === 'right'\n      ? css`\n          right: 0;\n          transform: ${isOpen ? 'translate(0px)' : 'translateX(100%)'};\n        `\n      : ''}\n\n  @media (prefers-reduced-motion: no-preference) {\n    transition: transform 0.5s;\n  }\n\n  &:focus-visible,\n  &.focus-visible {\n    ${focusVisible}\n  }\n`;\n\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${contentContainer.gap};\n  padding: ${contentContainer.padding};\n`;\n\nconst HeaderContainer = styled.div``;\n\nconst StyledButton = styled(Button)`\n  align-self: flex-end;\n`;\n\nexport type DrawerSize = 'small' | 'medium' | 'large';\nexport type DrawerPlacement = 'left' | 'right';\nexport type WidthProps = {\n  minWidth?: Property.MinWidth<string>;\n  maxWidth?: Property.MaxWidth<string>;\n  width?: Property.Width<string>;\n};\n\nexport type DrawerProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Størrelsen på `<Drawer />`. */\n    size?: DrawerSize;\n    /** Plasseringen til `<Drawer />`. */\n    placement?: DrawerPlacement;\n    /**Header for `<Drawer />`. Har default styling hvis verdien er en string. */\n    header?: string | ReactNode;\n    /**Spesifiserer om `<Drawer />` skal legges vises. **OBS!** nødvendig kun hvis `<DrawerGroup />` ikke er i bruk. */\n    isOpen?: boolean;\n    /**Funksjon kjørt ved lukking. **OBS!** nødvendig kun hvis `<DrawerGroup />` ikke er i bruk. */\n    onClose?: () => void;\n    /**Spesifiserer hvilken DOM node `<Drawer />` skal ha som forelder via React portal. Brukes med f.eks `document.getElementById(\"id\")` (skaper ikke ny DOM node). */\n    parentElement?: HTMLElement;\n    /**Custom props for breddehåndtering ved behov. */\n    widthProps?: WidthProps;\n    /**Ref til elementet som åpner `<Drawer />`.  **OBS!** nødvendig kun hvis `<DrawerGroup />` ikke er i bruk. */\n    triggerRef?: RefObject<HTMLElement>;\n  }\n>;\n\nexport const Drawer = forwardRef<HTMLDivElement, DrawerProps>((props, ref) => {\n  const {\n    children,\n    onClose,\n    header,\n    isOpen = false,\n    placement = 'right',\n    parentElement = document.body,\n    size = 'small',\n    triggerRef,\n    id,\n    className,\n    htmlProps,\n    ...rest\n  } = props;\n\n  const generatedId = useId();\n  const uniqueId = id ?? `${generatedId}-drawer`;\n  const hasHeader = !!header;\n  const headerId = hasHeader ? `${uniqueId}-header` : undefined;\n\n  const drawerRef = useFocusTrap<HTMLDivElement>(isOpen);\n  const combinedRef = useCombinedRef(ref, drawerRef);\n\n  useOnKeyDown(['Esc', 'Escape'], () => {\n    if (isOpen) {\n      triggerRef && triggerRef.current?.focus();\n      onClose && onClose();\n    }\n  });\n\n  const elements: (HTMLElement | null)[] = [drawerRef.current as HTMLElement];\n  if (triggerRef) elements.push(triggerRef.current);\n\n  useOnClickOutside(elements, () => isOpen && onClose && onClose());\n\n  const hasTransitionedIn = useMountTransition(isOpen, 500);\n\n  const containerProps = {\n    ...getBaseHTMLProps(uniqueId, className, htmlProps, rest),\n    placement,\n    ref: combinedRef,\n    isOpen: hasTransitionedIn && isOpen,\n    tabIndex: -1,\n    role: 'dialog',\n    'aria-labelledby': headerId,\n    size,\n  };\n\n  const headerContainerProps = {\n    id: headerId,\n  };\n\n  return isOpen || hasTransitionedIn\n    ? createPortal(\n        <Container {...containerProps} elevation={4}>\n          <ScrollableContainer>\n            <ContentContainer>\n              {hasHeader && (\n                <HeaderContainer {...headerContainerProps}>\n                  {typeof header === 'string' ? (\n                    <Typography typographyType=\"headingSans03\">\n                      {header}\n                    </Typography>\n                  ) : (\n                    header\n                  )}\n                </HeaderContainer>\n              )}\n              {children}\n            </ContentContainer>\n          </ScrollableContainer>\n          <StyledButton\n            data-testid=\"drawer-close-btn\"\n            size=\"small\"\n            purpose=\"secondary\"\n            appearance=\"borderless\"\n            onClick={onClose}\n            aria-label=\"Lukk\"\n            icon={CloseIcon}\n          />\n        </Container>,\n        parentElement\n      )\n    : null;\n});\n\nDrawer.displayName = 'Drawer';\n","import {\n  ReactNode,\n  Children as ReactChildren,\n  isValidElement,\n  cloneElement,\n  ReactElement,\n  useState,\n  useRef,\n  useId,\n} from 'react';\n\nexport type DrawerGroupProps = {\n  /**Barna til komponenten. */\n  children: ReactNode;\n  /**`id` til `<Drawer />`. */\n  drawerId?: string;\n  /**Ekstra logikk som kjøres når `<Drawer />` åpnes. */\n  onOpen?: () => void;\n  /**Ekstra logikk som kjøres når `<Drawer />` lukkes. */\n  onClose?: () => void;\n};\n\nexport const DrawerGroup = ({\n  children,\n  drawerId,\n  onOpen,\n  onClose,\n}: DrawerGroupProps) => {\n  const generatedId = useId();\n  const uniqueDrawerId = drawerId ?? `${generatedId}-drawer`;\n\n  const buttonRef = useRef<HTMLElement>(null);\n\n  const [closed, setClosed] = useState(true);\n  const open = () => setClosed(false);\n  const close = () => setClosed(true);\n\n  const handleOpen = () => {\n    open();\n    onOpen && onOpen();\n  };\n\n  const handleClose = () => {\n    close();\n    onClose && onClose();\n  };\n\n  const Children = ReactChildren.map(children, (child, childIndex) => {\n    return (\n      isValidElement(child) &&\n      (childIndex === 0\n        ? cloneElement(child as ReactElement, {\n            'aria-haspopup': 'dialog',\n            'aria-controls': uniqueDrawerId,\n            'aria-expanded': !closed,\n            ref: buttonRef,\n            onClick: handleOpen,\n          })\n        : cloneElement(child as ReactElement, {\n            id: uniqueDrawerId,\n            triggerRef: buttonRef,\n            isOpen: !closed,\n            onClose: handleClose,\n          }))\n    );\n  });\n  return <> {Children} </>;\n};\n\nDrawerGroup.displayName = 'DrawerGroup';\n"],"names":["spacing","ddsBaseTokens","contentContainerPaddingNumberPx","contentContainerPadding","container","contentContainer","drawerTokens","tokens","getMaxWidth","size","Container","styled","Paper","css","widthProps","placement","isOpen","focusVisible","ContentContainer","HeaderContainer","StyledButton","Button","Drawer","forwardRef","props","ref","children","onClose","header","parentElement","triggerRef","id","className","htmlProps","rest","generatedId","useId","uniqueId","hasHeader","headerId","drawerRef","useFocusTrap","combinedRef","useCombinedRef","useOnKeyDown","_a","elements","useOnClickOutside","hasTransitionedIn","useMountTransition","containerProps","getBaseHTMLProps","headerContainerProps","createPortal","jsxs","jsx","ScrollableContainer","Typography","CloseIcon","DrawerGroup","drawerId","onOpen","uniqueDrawerId","buttonRef","useRef","closed","setClosed","useState","open","close","handleOpen","handleClose","Children","ReactChildren","child","childIndex","isValidElement","cloneElement","Fragment"],"mappings":"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"}
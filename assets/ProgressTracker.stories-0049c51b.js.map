{"version":3,"file":"ProgressTracker.stories-0049c51b.js","sources":["../../../../packages/components/src/components/ProgressTracker/ProgressTracker.context.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTracker.tokens.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTrackerItem.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTracker.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\ntype ProgressTrackerContextType = {\n  activeStep: number;\n  handleStepChange?: (index: number) => void;\n};\n\nexport const ProgressTrackerContext = createContext<ProgressTrackerContextType>(\n  {\n    activeStep: 0,\n  }\n);\n\nexport const useProgressTrackerContext = () =>\n  useContext(ProgressTrackerContext);\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { IconSize } from '@norges-domstoler/dds-icons';\nimport { StaticTypographyType } from '@norges-domstoler/dds-typography';\n\nconst { colors, spacing } = ddsBaseTokens;\n\nexport const typographyTypes: {\n  number: StaticTypographyType;\n  label: StaticTypographyType;\n} = {\n  number: 'bodySans01',\n  label: 'bodySans03',\n};\n\nconst itemsWrapper = {\n  gap: spacing.SizesDdsSpacingLocalX0125,\n};\n\nconst itemContentWrapper = {\n  gap: spacing.SizesDdsSpacingLocalX05,\n};\n\nconst connector = {\n  color: colors.DdsColorNeutralsGray5,\n  height: '18px',\n  width: '1px',\n};\n\nconst itemNumber = {\n  size: '28px',\n  borderWidth: '2px',\n  iconSize: 'small' as IconSize,\n  active: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorNeutralsWhite,\n    backgroundColor: colors.DdsColorInteractiveBase,\n  },\n  completed: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorNeutralsWhite,\n    backgroundColor: colors.DdsColorInteractiveBase,\n    hover: {\n      borderColor: colors.DdsColorInteractiveDark,\n      color: colors.DdsColorNeutralsWhite,\n      backgroundColor: colors.DdsColorInteractiveDark,\n    },\n  },\n  inactive: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorInteractiveBase,\n    backgroundColor: colors.DdsColorNeutralsWhite,\n    hover: {\n      borderColor: colors.DdsColorInteractiveBase,\n      color: colors.DdsColorInteractiveBase,\n      backgroundColor: colors.DdsColorInteractiveLightest,\n    },\n  },\n  disabled: {\n    borderColor: colors.DdsColorNeutralsGray5,\n    color: colors.DdsColorNeutralsGray5,\n    backgroundColor: colors.DdsColorNeutralsWhite,\n  },\n};\n\nconst itemText = {\n  textDecoration: 'underline',\n\n  active: {\n    color: colors.DdsColorNeutralsGray9,\n    textDecorationColor: colors.DdsColorNeutralsGray9,\n  },\n  inactive: {\n    color: colors.DdsColorNeutralsGray7,\n    textDecorationColor: 'transparent',\n    hover: {\n      textDecorationColor: colors.DdsColorNeutralsGray7,\n    },\n  },\n  disabled: {\n    color: colors.DdsColorNeutralsGray6,\n    textDecoration: 'none',\n  },\n};\n\nexport const progressTrackerTokens = {\n  itemsWrapper,\n  itemContentWrapper,\n  connector,\n  itemNumber,\n  itemText,\n};\n","import { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { CheckIcon } from '@norges-domstoler/dds-icons';\nimport { SvgIcon } from '@norges-domstoler/dds-icons';\nimport { BaseComponentPropsWithChildren } from '@norges-domstoler/dds-core';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\nimport { VisuallyHidden } from '../VisuallyHidden';\nimport { useProgressTrackerContext } from './ProgressTracker.context';\nimport {\n  progressTrackerTokens,\n  typographyTypes,\n} from './ProgressTracker.tokens';\nimport {\n  focusVisibleTransitionValue,\n  focusVisible,\n} from '@norges-domstoler/dds-form';\n\ntype ItemState =\n  | 'activeCompleted'\n  | 'activeIncomplete'\n  | 'inactiveCompleted'\n  | 'inactiveIncomplete'\n  | 'disabled';\n\nconst toItemState = (\n  active: boolean,\n  completed: boolean,\n  disabled: boolean\n): ItemState => {\n  if (disabled) {\n    return 'disabled';\n  }\n\n  if (active) {\n    return completed ? 'activeCompleted' : 'activeIncomplete';\n  } else {\n    return completed ? 'inactiveCompleted' : 'inactiveIncomplete';\n  }\n};\n\nconst { itemNumber, itemText, itemContentWrapper } = progressTrackerTokens;\n\ntype ItemStyleProps = {\n  state: ItemState;\n};\n\ntype BaseItemProps = {\n  /** Om steget er valgt eller ikke. Settes av konsument. */\n  active?: boolean;\n\n  /** Om steget er ferdig eller ikke. Settes av konsument. */\n  completed?: boolean;\n\n  /** Om steget skal være disabled. Settes av konsument.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /** Ikon som skal vises istedenfor stegnummeret. Settes av konument. */\n  icon?: SvgIcon;\n\n  /** Indeksen til steget. NB! Denne settes automatisk av `<ProgressTracker />` og skal ikke settes manuelt. */\n  index?: number;\n};\n\ntype ProgressTrackerItemProps =\n  | ({\n      /** Click-handler som gjør det mulig for bruker å klikke på steget for å navigere. Valgfri. */\n      onClick: (index: number) => void;\n    } & BaseComponentPropsWithChildren<HTMLButtonElement, BaseItemProps>)\n  | ({\n      onClick?: undefined;\n    } & BaseComponentPropsWithChildren<HTMLDivElement, BaseItemProps>);\n\nconst ItemWrapper = styled.li`\n  flex: 1;\n  position: relative;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ItemNumber = styled.div<ItemStyleProps>`\n  transition: background-color 0.2s, border-color 0.2s, color 0.2s;\n  border-radius: 50%;\n  border: ${itemNumber.borderWidth} solid;\n  width: ${itemNumber.size};\n  height: ${itemNumber.size};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2;\n  ${getFontStyling(typographyTypes.number)}\n  font-weight: 600;\n\n  ${({ state }) => {\n    switch (state) {\n      case 'activeIncomplete':\n        return css`\n          border-color: ${itemNumber.active.borderColor};\n          color: ${itemNumber.active.color};\n          background-color: ${itemNumber.active.backgroundColor};\n        `;\n      case 'activeCompleted':\n        return css`\n          border-color: ${itemNumber.completed.borderColor};\n          color: ${itemNumber.completed.color};\n          background-color: ${itemNumber.completed.backgroundColor};\n        `;\n      case 'inactiveCompleted':\n        return css`\n          border-color: ${itemNumber.completed.borderColor};\n          color: ${itemNumber.completed.color};\n          background-color: ${itemNumber.completed.backgroundColor};\n        `;\n      case 'inactiveIncomplete':\n        return css`\n          border-color: ${itemNumber.inactive.borderColor};\n          color: ${itemNumber.inactive.color};\n          background-color: ${itemNumber.inactive.backgroundColor};\n        `;\n      case 'disabled':\n        return css`\n          border-color: ${itemNumber.disabled.borderColor};\n          color: ${itemNumber.disabled.color};\n          background-color: ${itemNumber.disabled.backgroundColor};\n        `;\n    }\n  }}\n`;\n\nconst ItemText = styled.div<ItemStyleProps>`\n  ${getFontStyling(typographyTypes.label)}\n  text-align: start;\n  text-decoration: ${itemText.textDecoration};\n  transition: text-decoration-color 0.2s;\n\n  ${({ state }) => {\n    switch (state) {\n      case 'activeCompleted':\n      case 'activeIncomplete':\n        return css`\n          color: ${itemText.active.color};\n          text-decoration-color: ${itemText.active.textDecorationColor};\n        `;\n      case 'inactiveCompleted':\n      case 'inactiveIncomplete':\n        return css`\n          color: ${itemText.inactive.color};\n          text-decoration-color: ${itemText.inactive.textDecorationColor};\n        `;\n      case 'disabled':\n        return css`\n          color: ${itemText.disabled.color};\n          text-decoration: ${itemText.disabled.textDecoration};\n        `;\n    }\n  }};\n`;\n\nconst ItemContentWrapper = styled.button<ItemStyleProps>`\n  background: none;\n  border: none;\n  margin: 0;\n  padding: 0;\n  display: grid;\n  grid-template-columns: ${itemNumber.size} 1fr;\n  justify-content: flex-start;\n  align-items: center;\n  font-family: inherit;\n  gap: ${itemContentWrapper.gap};\n  transition: ${focusVisibleTransitionValue};\n\n  :focus-visible {\n    ${focusVisible}\n  }\n\n  ${({ state }) =>\n    state !== 'disabled' &&\n    css`\n      cursor: pointer;\n    `}\n`;\n\nconst getVisuallyHiddenText = (\n  active: boolean,\n  completed: boolean,\n  index: number\n) =>\n  `${index + 1}, ${active ? '' : 'Trinn, '}${\n    completed ? 'Ferdig, ' : 'Ikke ferdig, '\n  }`;\n\nexport const ProgressTrackerItem = (props: ProgressTrackerItemProps) => {\n  const {\n    index = 0,\n    completed = false,\n    disabled = false,\n    icon,\n    children,\n  } = props;\n\n  const { activeStep, handleStepChange } = useProgressTrackerContext();\n  const active = activeStep === index;\n\n  const styleProps = {\n    state: toItemState(active, completed, disabled),\n  };\n\n  const stepNumberContent = useMemo(() => {\n    if (completed) {\n      return <Icon icon={CheckIcon} iconSize={itemNumber.iconSize} />;\n    }\n\n    if (icon !== undefined) {\n      return <Icon icon={icon} iconSize={itemNumber.iconSize} />;\n    }\n\n    return index + 1;\n  }, [completed, icon, index]);\n\n  return (\n    <ItemWrapper aria-current={active ? 'step' : undefined}>\n      <ItemContentWrapper\n        {...styleProps}\n        as={handleStepChange ? 'button' : 'div'}\n        onClick={\n          !disabled && handleStepChange\n            ? () => handleStepChange(index)\n            : undefined\n        }\n        disabled={disabled}\n      >\n        <ItemNumber {...styleProps} aria-hidden>\n          {stepNumberContent}\n        </ItemNumber>\n        <ItemText {...styleProps}>\n          <VisuallyHidden as=\"span\">\n            {getVisuallyHiddenText(active, completed, index)}\n          </VisuallyHidden>\n          {children}\n        </ItemText>\n      </ItemContentWrapper>\n    </ItemWrapper>\n  );\n};\n\nProgressTrackerItem.displayName = 'ProgressTracker.Item';\n","import {\n  Children,\n  cloneElement,\n  forwardRef,\n  ForwardRefExoticComponent,\n  Fragment,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { ProgressTrackerContext } from './ProgressTracker.context';\nimport { progressTrackerTokens } from './ProgressTracker.tokens';\nimport { ProgressTrackerItem } from './ProgressTrackerItem';\n\nconst ItemsWrapper = styled.ol`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: ${progressTrackerTokens.itemsWrapper.gap};\n  margin: 0;\n  padding: 0;\n`;\n\nconst ProgressTrackerConnector = styled.div`\n  margin-left: calc(\n    (${progressTrackerTokens.itemNumber.size} / 2) -\n      (${progressTrackerTokens.connector.width} / 2)\n  );\n  height: ${progressTrackerTokens.connector.height};\n  border-right: ${progressTrackerTokens.connector.width} solid\n    ${progressTrackerTokens.connector.color};\n`;\n\ntype ProgressTrackerProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /** Indeksen til det aktive steget. */\n    activeStep?: number;\n    /** Ekstra logikk ved klikking på et steg. */\n    onStepChange?: (step: number) => void;\n  }\n>;\n\ntype ProgressTrackerComponent =\n  ForwardRefExoticComponent<ProgressTrackerProps> & {\n    Item: typeof ProgressTrackerItem;\n  };\n\nexport const ProgressTracker: ProgressTrackerComponent = (() => {\n  const Res = forwardRef<HTMLDivElement, ProgressTrackerProps>((props, ref) => {\n    const {\n      id,\n      activeStep = 0,\n      onStepChange,\n      children,\n      className,\n      htmlProps,\n      ...rest\n    } = props;\n\n    const [thisActiveStep, setActiveStep] = useState(activeStep);\n\n    const handleChange = (step: number) => {\n      setActiveStep(step);\n      onStepChange && onStepChange(step);\n    };\n\n    useEffect(() => {\n      if (activeStep !== undefined && activeStep != thisActiveStep) {\n        setActiveStep(activeStep);\n      }\n    }, [activeStep, thisActiveStep]);\n\n    const containerProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      ref,\n    };\n\n    const steps = useMemo(() => {\n      const validChildren = removeInvalidChildren(children);\n      const itemsWithIndex = passIndexPropToProgressTrackerItem(validChildren);\n      const itemsWithConnectorsBetween =\n        intersperseItemsWithConnector(itemsWithIndex);\n      return itemsWithConnectorsBetween;\n    }, [children]);\n\n    return (\n      <ProgressTrackerContext.Provider\n        value={{\n          activeStep: thisActiveStep,\n          handleStepChange: handleChange,\n        }}\n      >\n        <div role=\"group\" aria-label=\"progress\" {...containerProps}>\n          <ItemsWrapper>{steps}</ItemsWrapper>\n        </div>\n      </ProgressTrackerContext.Provider>\n    );\n  });\n\n  (Res as ProgressTrackerComponent).Item = ProgressTrackerItem;\n  (Res as ProgressTrackerComponent).displayName = 'ProgressTracker';\n  return Res as ProgressTrackerComponent;\n})();\n\nconst removeInvalidChildren = (children: ReactNode) =>\n  Children.toArray(children).filter(isValidElement);\n\nconst passIndexPropToProgressTrackerItem = (children: ReactElement[]) =>\n  Children.map(children, (item, index) =>\n    cloneElement(item, {\n      ...item.props,\n      index,\n    })\n  );\n\nconst intersperseItemsWithConnector = (children: ReactElement[]) =>\n  Children.map(children, (child, index) => {\n    if (index === 0) {\n      return child;\n    }\n    return (\n      <Fragment key={index}>\n        <ProgressTrackerConnector aria-hidden />\n        {child}\n      </Fragment>\n    );\n  });\n"],"names":["ProgressTrackerContext","createContext","useProgressTrackerContext","useContext","colors","spacing","ddsBaseTokens","typographyTypes","itemsWrapper","itemContentWrapper","connector","itemNumber","itemText","progressTrackerTokens","toItemState","active","completed","disabled","ItemWrapper","styled","ItemNumber","getFontStyling","state","css","ItemText","ItemContentWrapper","focusVisibleTransitionValue","focusVisible","getVisuallyHiddenText","index","ProgressTrackerItem","props","icon","children","activeStep","handleStepChange","styleProps","stepNumberContent","useMemo","jsx","Icon","CheckIcon","jsxs","VisuallyHidden","ItemsWrapper","ProgressTrackerConnector","ProgressTracker","Res","forwardRef","ref","id","onStepChange","className","htmlProps","rest","thisActiveStep","setActiveStep","useState","handleChange","step","useEffect","containerProps","getBaseHTMLProps","steps","validChildren","removeInvalidChildren","itemsWithIndex","passIndexPropToProgressTrackerItem","intersperseItemsWithConnector","Children","isValidElement","item","cloneElement","child","Fragment"],"mappings":"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"}
{"version":3,"file":"ToggleBar.stories-727e8bb9.js","sources":["../../../../packages/components/src/components/ToggleBar/ToggleBar.context.tsx","../../../../packages/components/src/components/ToggleBar/ToggleBar.tokens.tsx","../../../../packages/components/src/components/ToggleBar/ToggleBar.tsx","../../../../packages/components/src/components/ToggleBar/ToggleRadio.styles.tsx","../../../../packages/components/src/components/ToggleBar/ToggleRadio.tsx"],"sourcesContent":["import { ChangeEvent, createContext, useContext } from 'react';\nimport { ToggleBarSize, ToggleBarValue } from './ToggleBar.types';\n\nexport type ToggleBarContextType = {\n  size: ToggleBarSize;\n  name?: string;\n  value?: ToggleBarValue;\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const ToggleBarContext = createContext<ToggleBarContextType>({\n  size: 'medium',\n});\n\nexport const useToggleBarContext = () => useContext(ToggleBarContext);\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { calculateHeightWithLineHeight } from '../../utils';\nimport { StaticTypographyType } from '../Typography';\nimport { ToggleBarSize } from './ToggleBar.types';\n\nconst { colors, spacing, border, borderRadius, fontPackages } = ddsBaseTokens;\n\nexport const typographyTypes: { [k in ToggleBarSize]: StaticTypographyType } = {\n  large: 'bodySans04',\n  medium: 'bodySans02',\n  small: 'bodySans01',\n  tiny: 'supportingStyleTiny01',\n};\n\nconst iconSizeTiny = `${calculateHeightWithLineHeight(\n  fontPackages.supportingStyle_tiny_01.numbers.lineHeightNumber,\n  fontPackages.supportingStyle_tiny_01.numbers.fontSizeNumber\n)}px`;\n\nconst iconSizeSmall = `${calculateHeightWithLineHeight(\n  fontPackages.body_sans_01.numbers.lineHeightNumber,\n  fontPackages.body_sans_01.numbers.fontSizeNumber\n)}px`;\n\nconst iconSizeMedium = `${calculateHeightWithLineHeight(\n  fontPackages.body_sans_02.numbers.lineHeightNumber,\n  fontPackages.body_sans_02.numbers.fontSizeNumber\n)}px`;\nconst iconSizeLarge = `${calculateHeightWithLineHeight(\n  fontPackages.body_sans_04.numbers.lineHeightNumber,\n  fontPackages.body_sans_04.numbers.fontSizeNumber\n)}px`;\n\nconst outerContainer = {\n  gap: spacing.SizesDdsSpacingLocalX0125,\n};\n\nconst label = {\n  base: {\n    borderColor: colors.DdsColorNeutralsGray5,\n    borderRight: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray5}`,\n    borderTop: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray5}`,\n    borderBottom: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray5}`,\n  },\n  hover: {\n    color: colors.DdsColorInteractiveDark,\n    borderColor: colors.DdsColorInteractiveDark,\n  },\n  firstChild: {\n    borderLeft: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray5}`,\n    borderTopLeftRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n    borderBottomLeftRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n  },\n  lastChild: {\n    borderTopRightRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n    borderBottomRightRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n  },\n};\n\nconst content = {\n  base: { backgroundColor: colors.DdsColorNeutralsGray1 },\n  active: {\n    color: colors.DdsColorInteractiveDarkest,\n    borderColor: colors.DdsColorInteractiveDarker,\n    backgroundColor: colors.DdsColorInteractiveLightest,\n    boxShadow: `inset 0 0 0 1px ${colors.DdsColorInteractiveDarker}`,\n  },\n  size: {\n    tiny: {\n      justIcon: {\n        padding: spacing.SizesDdsSpacingLocalX025,\n\n        fontSize: iconSizeTiny,\n      },\n      withText: {\n        padding: `${spacing.SizesDdsSpacingLocalX025} ${spacing.SizesDdsSpacingLocalX075}`,\n        gap: spacing.SizesDdsSpacingLocalX05,\n      },\n    },\n    small: {\n      justIcon: {\n        padding: spacing.SizesDdsSpacingLocalX05,\n        fontSize: iconSizeSmall,\n      },\n      withText: {\n        padding: `${spacing.SizesDdsSpacingLocalX05} ${spacing.SizesDdsSpacingLocalX1}`,\n        gap: spacing.SizesDdsSpacingLocalX05,\n      },\n    },\n    medium: {\n      justIcon: {\n        padding: spacing.SizesDdsSpacingLocalX075,\n        fontSize: iconSizeMedium,\n      },\n      withText: {\n        padding: `${spacing.SizesDdsSpacingLocalX075} ${spacing.SizesDdsSpacingLocalX15}`,\n        gap: spacing.SizesDdsSpacingLocalX05,\n      },\n    },\n    large: {\n      justIcon: {\n        padding: spacing.SizesDdsSpacingLocalX1,\n        fontSize: iconSizeLarge,\n      },\n      withText: {\n        padding: `${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX2}`,\n        gap: spacing.SizesDdsSpacingLocalX1,\n      },\n    },\n  },\n};\n\nexport const toggleBarTokens = {\n  outerContainer,\n  content,\n  label,\n};\n","import { ChangeEvent, useState, useId } from 'react';\nimport styled, { css } from 'styled-components';\nimport { selection } from '../../helpers/styling';\nimport { getBaseHTMLProps } from '../../types';\nimport { combineHandlers } from '../../utils';\nimport { Typography } from '../Typography';\nimport { ToggleBarContext } from './ToggleBar.context';\nimport { toggleBarTokens as tokens } from './ToggleBar.tokens';\nimport { Property } from 'csstype';\nimport { ToggleBarProps, ToggleBarValue } from './ToggleBar.types';\n\ntype OuterContainerProps = {\n  width?: Property.Width;\n};\n\nconst OuterContainer = styled.div<OuterContainerProps>`\n  display: flex;\n  flex-direction: column;\n  gap: ${tokens.outerContainer.gap};\n  &::selection,\n  *::selection {\n    ${selection}\n  }\n  ${({ width }) =>\n    width &&\n    css`\n      width: ${width};\n    `}\n`;\n\nconst Bar = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: 1fr;\n`;\n\nexport const ToggleBar = <T extends string | number = string>(\n  props: ToggleBarProps<T>\n) => {\n  const {\n    children,\n    size = 'medium',\n    label,\n    onChange,\n    value,\n    name,\n    width,\n    htmlProps,\n    className,\n    id,\n    ...rest\n  } = props;\n\n  const generatedId = useId();\n  const uniqueId = id ?? `${generatedId}-ToggleBar`;\n\n  const [groupValue, setGroupValue] = useState<ToggleBarValue>(value);\n\n  const handleChange = combineHandlers(\n    (e: ChangeEvent<HTMLInputElement>) => setGroupValue(e.target.value),\n    e => onChange && onChange(e, e.target.value as T)\n  );\n\n  const labelId = label && `${uniqueId}-label`;\n\n  return (\n    <ToggleBarContext.Provider\n      value={{\n        size: size,\n        onChange: handleChange,\n        name: name,\n        value: groupValue,\n      }}\n    >\n      <OuterContainer\n        {...getBaseHTMLProps(id, className, htmlProps, rest)}\n        role=\"radiogroup\"\n        aria-labelledby={labelId ?? htmlProps?.['aria-labelledby']}\n        width={width}\n      >\n        {label && (\n          <Typography typographyType=\"supportingStyleLabel01\" id={labelId}>\n            {label}\n          </Typography>\n        )}\n        <Bar>{children}</Bar>\n      </OuterContainer>\n    </ToggleBarContext.Provider>\n  );\n};\n\nToggleBar.displayName = 'ToggleBar';\n","import { ToggleBarSize } from './ToggleBar.types';\nimport { toggleBarTokens as tokens, typographyTypes } from './ToggleBar.tokens';\nimport styled, { css } from 'styled-components';\nimport {\n  focusVisible,\n  focusVisibleTransitionValue,\n} from '../../helpers/styling';\nimport { HiddenInput } from '../../helpers';\nimport { getFontStyling } from '../Typography/Typography.utils';\n\nconst { content, label } = tokens;\n\ntype ContentProps = {\n  size: ToggleBarSize;\n  justIcon: boolean;\n};\n\nexport const Content = styled.span<ContentProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  word-break: break-word;\n  height: 100%;\n  box-sizing: border-box;\n  cursor: pointer;\n  @media (prefers-reduced-motion: no-preference) {\n    transition: border-color 0.2s, background-color 0.2s, box-shadow 0.2s,\n      color 0.2s, ${focusVisibleTransitionValue};\n  }\n  background-color: ${content.base.backgroundColor};\n\n  ${({ size, justIcon }) => css`\n    ${justIcon\n      ? css`\n          font-size: ${content.size[size].justIcon.fontSize};\n          padding: ${content.size[size].justIcon.padding};\n        `\n      : css`\n          gap: ${content.size[size].withText.gap};\n          padding: ${content.size[size].withText.padding};\n          ${getFontStyling(typographyTypes[size])}\n        `}\n  `}\n`;\n\ntype LabelProps = {\n  size: ToggleBarSize;\n};\n\nexport const Label = styled.label<LabelProps>`\n  ${Content} {\n    border-right: ${label.base.borderRight};\n    border-top: ${label.base.borderTop};\n    border-bottom: ${label.base.borderBottom};\n  }\n  &:first-child ${Content} {\n    border-left: ${label.firstChild.borderLeft};\n    border-top-left-radius: ${label.firstChild.borderTopLeftRadius};\n    border-bottom-left-radius: ${label.firstChild.borderBottomLeftRadius};\n  }\n  &:last-child ${Content} {\n    border-top-right-radius: ${label.lastChild.borderTopRightRadius};\n    border-bottom-right-radius: ${label.lastChild.borderBottomRightRadius};\n  }\n\n  ${HiddenInput}:checked + ${Content} {\n    color: ${content.active.color};\n    border-color: ${content.active.borderColor};\n    background-color: ${content.active.backgroundColor};\n    box-shadow: ${content.active.boxShadow};\n    position: relative;\n    z-index: 0;\n  }\n\n  ${HiddenInput}:focus-visible + ${Content} {\n    ${focusVisible}\n    position: relative;\n    z-index: 0;\n  }\n\n  &:hover {\n    color: ${label.hover.color};\n    border-color: ${label.hover.borderColor};\n  }\n`;\n","import { forwardRef, InputHTMLAttributes, ChangeEvent, useId } from 'react';\nimport { HiddenInput } from '../../helpers';\nimport { SvgIcon } from '../../icons/utils';\nimport { BaseComponentProps, getBaseHTMLProps } from '../../types';\nimport { Icon } from '../Icon';\nimport { ToggleBarContextType, useToggleBarContext } from './ToggleBar.context';\nimport { Label, Content } from './ToggleRadio.styles';\n\ntype PickedInputHTMLAttributes = Pick<\n  InputHTMLAttributes<HTMLInputElement>,\n  'name' | 'checked' | 'value' | 'onChange' | 'aria-label' | 'aria-labelledby'\n>;\n\nexport type ToggleRadioProps = BaseComponentProps<\n  HTMLInputElement,\n  {\n    /**Ledetekst som vises i komponenten. */\n    label?: string;\n    /**Ikonet som vises i komponenten. */\n    icon?: SvgIcon;\n  } & PickedInputHTMLAttributes,\n  Omit<InputHTMLAttributes<HTMLInputElement>, keyof PickedInputHTMLAttributes>\n>;\n\n/**Beregner om en ToggleRadio skal være checked eller ikke.\n *\n * Returnerer checked hvis den er definert.\n *\n * Returnerer true hvis både verdien fra context og verdien i ToggleRadio er truthy og like.\n * Returnerer true hvis verdien i ToggleRadio er truthy, men context ikke finnes.\n *\n * Returnerer false hvis verdiene er ulike eller hvis verdien i ToggleRadio er falsy.\n */\nconst calculateChecked = (\n  value: unknown,\n  group: ToggleBarContextType,\n  checked?: boolean\n): boolean => {\n  if (typeof checked !== 'undefined') return checked;\n\n  if (typeof value !== 'undefined' && value !== null && group) {\n    if (typeof value === 'number') {\n      return value === Number(group?.value);\n    }\n    return value === group?.value;\n  }\n\n  return !!value;\n};\n\nexport const ToggleRadio = forwardRef<HTMLInputElement, ToggleRadioProps>(\n  (props, ref) => {\n    const {\n      value,\n      name,\n      onChange,\n      checked,\n      icon,\n      label,\n      htmlProps,\n      className,\n      id,\n      ...rest\n    } = props;\n\n    const generatedId = useId();\n    const uniqueId = id ?? `${generatedId}-ToggleRadio`;\n    const group = useToggleBarContext();\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(event);\n      group && group.onChange && group.onChange(event);\n    };\n\n    return (\n      <Label size={group.size} htmlFor={uniqueId}>\n        <HiddenInput\n          {...getBaseHTMLProps(uniqueId, className, htmlProps, rest)}\n          type=\"radio\"\n          ref={ref}\n          name={name ?? group.name}\n          onChange={handleChange}\n          value={value}\n          checked={calculateChecked(value, group, checked)}\n        />\n        <Content size={group.size} justIcon={!!icon && !!!label}>\n          {icon && <Icon icon={icon} iconSize=\"inherit\" />}\n          {label && <span>{label}</span>}\n        </Content>\n      </Label>\n    );\n  }\n);\n\nToggleRadio.displayName = 'ToggleRadio';\n"],"names":["ToggleBarContext","createContext","useToggleBarContext","useContext","colors","spacing","border","borderRadius","fontPackages","ddsBaseTokens","typographyTypes","iconSizeTiny","calculateHeightWithLineHeight","iconSizeSmall","iconSizeMedium","iconSizeLarge","outerContainer","label","content","toggleBarTokens","OuterContainer","styled","tokens","selection","width","css","Bar","ToggleBar","props","children","size","onChange","value","name","htmlProps","className","id","rest","generatedId","useId","uniqueId","groupValue","setGroupValue","useState","handleChange","combineHandlers","e","labelId","jsx","jsxs","getBaseHTMLProps","Typography","Content","focusVisibleTransitionValue","justIcon","getFontStyling","Label","HiddenInput","focusVisible","calculateChecked","group","checked","ToggleRadio","forwardRef","ref","icon","event","Icon"],"mappings":"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"}
{"version":3,"file":"InlineEditInput-02f1f940.js","sources":["../../../../packages/components/src/components/InlineEdit/InlineInput.tsx","../../../../packages/components/src/components/InlineEdit/InlineEditInput.tsx"],"sourcesContent":["import { forwardRef, InputHTMLAttributes, useId, useRef } from 'react';\nimport { EditIcon } from '@norges-domstoler/dds-icons';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport {\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n} from '@norges-domstoler/dds-core';\nimport {\n  IconWrapper,\n  defaultWidth,\n  StyledInlineInput,\n} from './InlineEdit.styles';\nimport { BaseInlineInputProps } from './InlineEdit.types';\nimport { inlineEditVisuallyHidden } from './InlineEdit.utils';\nimport { useCombinedRef } from '@norges-domstoler/dds-core';\nimport { renderInputMessage } from '../../utils/renderInputMessage';\nimport {\n  OuterInputContainer,\n  InputContainer,\n} from '@norges-domstoler/dds-form';\n\nexport type InlineInputProps = BaseInlineInputProps &\n  InputHTMLAttributes<HTMLInputElement>;\n\nexport const InlineInput = forwardRef<HTMLInputElement, InlineInputProps>(\n  (props, ref) => {\n    const {\n      id,\n      error,\n      errorMessage,\n      isEditing,\n      width = defaultWidth,\n      'aria-describedby': ariaDescribedby,\n      emptiable,\n      hideIcon,\n      ...rest\n    } = props;\n\n    const genereatedId = useId();\n    const uniqueId = id ?? `${genereatedId}-InlineInput`;\n    const hasErrorMessage = !!errorMessage;\n    const hasError = !!error;\n    const hasErrorState = hasError || hasErrorMessage;\n    const errorMessageId = derivativeIdGenerator(uniqueId, 'errorMessage');\n    const descId = derivativeIdGenerator(uniqueId, 'desc');\n\n    const inputRef = useRef<HTMLInputElement>(null);\n    const combinedRef = useCombinedRef(ref, inputRef);\n\n    return (\n      <OuterInputContainer width={width}>\n        <InputContainer>\n          {!isEditing && !hideIcon && (\n            <IconWrapper\n              onClick={() => {\n                inputRef.current?.focus();\n              }}\n            >\n              <Icon icon={EditIcon} iconSize=\"small\" />\n            </IconWrapper>\n          )}\n          <StyledInlineInput\n            {...rest}\n            id={uniqueId}\n            ref={combinedRef}\n            hasErrorMessage={hasErrorState}\n            isEditing={isEditing}\n            hideIcon={hideIcon}\n            aria-describedby={spaceSeparatedIdListGenerator([\n              hasErrorMessage ? errorMessageId : undefined,\n              descId,\n              ariaDescribedby,\n            ])}\n            aria-invalid={hasErrorState}\n          />\n        </InputContainer>\n        {inlineEditVisuallyHidden(descId, emptiable)}\n        {renderInputMessage(undefined, undefined, errorMessage, errorMessageId)}\n      </OuterInputContainer>\n    );\n  }\n);\n\nInlineInput.displayName = 'InlineInput';\n","import { forwardRef, useRef } from 'react';\nimport { InlineEdit } from './InlineEdit';\nimport { useCombinedRef } from '@norges-domstoler/dds-core';\nimport { InlineEditInputProps } from './InlineEdit.types';\nimport { InlineInput } from './InlineInput';\n\nexport const InlineEditInput = forwardRef<\n  HTMLInputElement,\n  InlineEditInputProps\n>((props, ref) => {\n  const { onSetValue, emptiable, value, onFocus, onChange, onBlur, ...rest } =\n    props;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const combinedRef = useCombinedRef(ref, inputRef);\n  return (\n    <InlineEdit\n      onSetValue={onSetValue}\n      emptiable={emptiable}\n      inputRef={inputRef}\n      value={value}\n      onFocus={onFocus}\n      onChange={onChange}\n      onBlur={onBlur}\n    >\n      <InlineInput {...rest} ref={combinedRef} />\n    </InlineEdit>\n  );\n});\n"],"names":["InlineInput","forwardRef","props","ref","id","error","errorMessage","isEditing","width","defaultWidth","ariaDescribedby","emptiable","hideIcon","rest","genereatedId","useId","uniqueId","hasErrorMessage","hasErrorState","errorMessageId","derivativeIdGenerator","descId","inputRef","useRef","combinedRef","useCombinedRef","jsxs","OuterInputContainer","InputContainer","jsx","IconWrapper","_a","Icon","EditIcon","StyledInlineInput","spaceSeparatedIdListGenerator","inlineEditVisuallyHidden","renderInputMessage","InlineEditInput","onSetValue","value","onFocus","onChange","onBlur","InlineEdit"],"mappings":"8aAwBO,MAAAA,EAAAC,EAAA,WAAoB,CAAAC,EAAAC,IAAA,CAEvB,KAAA,CAAM,GAAAC,EACJ,MAAAC,EACA,aAAAC,EACA,UAAAC,EACA,MAAAC,EAAAC,EACQ,mBAAAC,EACY,UAAAC,EACpB,SAAAC,EACA,GAAAC,CACG,EAAAX,EAGLY,EAAAC,EAAAA,QACAC,EAAAZ,GAAA,GAAAU,CAAA,eACAG,EAAA,CAAA,CAAAX,EAEAY,EADA,CAAA,CAAAb,GACAY,EACAE,EAAAC,EAAAJ,EAAA,cAAA,EACAK,EAAAD,EAAAJ,EAAA,MAAA,EAEAM,EAAAC,SAAA,IAAA,EACAC,EAAAC,EAAAtB,EAAAmB,CAAA,EAEA,OAAAI,EAAAC,EAAA,CAAA,MAAAnB,EAAA,SAAA,CAEIkB,EAAAE,EAAA,CAAA,SAAA,CACG,CAAArB,GAAA,CAAAK,GAAAiB,EACCC,EAAC,CAAA,QAAA,IAAA,QAEGC,EAAAT,EAAA,UAAA,MAAAS,EAAA,OAAwB,EAC1B,SAAAF,EAAAG,EAAA,CAAA,KAAAC,EAAA,SAAA,QAAA,CAEuC,CAAA,EACzCJ,EAEFK,EAAC,CAAA,GAAArB,EACK,GAAAG,EACA,IAAAQ,EACC,gBAAAN,EACY,UAAAX,EACjB,SAAAK,EACA,mBAAAuB,EAAA,CACgDlB,EAAAE,EAAA,OACXE,EACnCX,CACA,CAAA,EACD,eAAAQ,CACa,CAAA,CAChB,EAAA,EACFkB,EAAAf,EAAAV,CAAA,EAC2C0B,EAAA,OAAA,OAAA/B,EAAAa,CAAA,CAC2B,CAAA,CAAA,CACxE,CAGN,EAEAnB,EAAA,YAAA,qpCC7EO,MAAAsC,EAAArC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAIL,KAAA,CAAA,WAAAoC,EAAA,UAAA5B,EAAA,MAAA6B,EAAA,QAAAC,EAAA,SAAAC,EAAA,OAAAC,EAAA,GAAA9B,CAAA,EAAAX,EAEAoB,EAAAC,SAAA,IAAA,EACAC,EAAAC,EAAAtB,EAAAmB,CAAA,EACA,OAAAO,EACEe,EAAC,CAAA,WAAAL,EACC,UAAA5B,EACA,SAAAW,EACA,MAAAkB,EACA,QAAAC,EACA,SAAAC,EACA,OAAAC,EACA,SAAAd,EAAA7B,EAAA,CAAA,GAAAa,EAAA,IAAAW,EAAA,CAEyC,CAAA,CAG/C,CAAA"}
{"version":3,"file":"LocalMessage-57f8ad7b.js","sources":["../../../../packages/components/src/components/LocalMessage/LocalMessage.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { Button } from '../Button';\nimport { forwardRef, useState } from 'react';\nimport { localMessageTokens as tokens } from './LocalMessage.tokens';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport { Property } from 'csstype';\nimport {\n  Typography,\n  defaultTypographyType,\n  getFontStyling,\n} from '@norges-domstoler/dds-typography';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n  selection,\n} from '@norges-domstoler/dds-core';\nimport { CloseIcon } from '@norges-domstoler/dds-icons';\n\nconst defaultWidth: Property.Width<string> = '400px';\nconst { container, icon, purposeVariants } = tokens;\n\ntype ContainerProps = Pick<\n  LocalMessageProps,\n  'purpose' | 'width' | 'layout' | 'closable'\n>;\n\nconst Container = styled.div<ContainerProps>`\n  box-sizing: border-box;\n  display: grid;\n  grid-template-areas: ${({ layout, closable }) =>\n    getGridTemplateAreas(layout, closable)};\n  grid-template-columns: ${({ layout, closable }) =>\n    getGridTemplateColumns(layout, closable)};\n  box-shadow: ${container.base.boxShadow};\n  border: ${container.base.border};\n  border-radius: ${container.base.borderRadius};\n  padding: ${container.base.padding};\n  gap: ${container.base.gap};\n  align-items: center;\n  ${getFontStyling(defaultTypographyType, true)}\n\n  *::selection {\n    ${selection}\n  }\n  ${({ purpose }) =>\n    purpose &&\n    css`\n      border-color: ${container.purpose[purpose].borderColor};\n      background-color: ${container.purpose[purpose].backgroundColor};\n    `}\n  width: ${({ width }) => width};\n`;\n\nfunction getGridTemplateAreas(\n  layout: LocalMessageProps['layout'],\n  closeable: LocalMessageProps['closable']\n) {\n  if (closeable) {\n    if (layout === 'horisontal') {\n      return '\"icon text closeButton\"';\n    }\n    return '\"icon closeButton\" \"text text\"';\n  } else {\n    if (layout === 'horisontal') {\n      return '\"icon text\"';\n    }\n    return '\"icon icon\" \"text text\"';\n  }\n}\n\nfunction getGridTemplateColumns(\n  layout: LocalMessageProps['layout'],\n  closable: LocalMessageProps['closable']\n) {\n  if (closable) {\n    return layout === 'horisontal'\n      ? 'min-content 1fr min-content'\n      : '1fr min-content';\n  }\n  return layout === 'horisontal' ? 'min-content 1fr' : '1fr';\n}\n\nconst MessageIconWrapper = styled(Icon)`\n  grid-area: icon;\n`;\n\nconst TextContainer = styled.div`\n  grid-area: text;\n`;\n\nconst CloseButton = styled(Button)<Pick<LocalMessageProps, 'layout'>>`\n  grid-area: closeButton;\n  margin: -${container.base.padding} 0;\n`;\n\nexport type LocalMessagePurpose =\n  | 'info'\n  | 'warning'\n  | 'danger'\n  | 'confidential'\n  | 'success'\n  | 'tips';\n\nexport type LocalMessageLayout = 'horisontal' | 'vertical';\n\nexport type LocalMessageProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Meldingen som vises til brukeren. Brukes kun når meldingen er string. */\n    message?: string;\n    /**Formålet med meldingen. Påvirker styling. */\n    purpose?: LocalMessagePurpose;\n    /** Indikerer om meldingen skal være lukkbar.*/\n    closable?: boolean;\n    /**Ekstra logikk å kjøre når meldingen lukkes. */\n    onClose?: () => void;\n    /**Layoutet i komponenten. Ved kompleks innhold anbefales `layout='vertical'`. */\n    layout?: LocalMessageLayout;\n    /**Custom bredde ved behov. */\n    width?: Property.Width<string>;\n  }\n>;\n\nexport const LocalMessage = forwardRef<HTMLDivElement, LocalMessageProps>(\n  (props, ref) => {\n    const {\n      message,\n      purpose = 'info',\n      closable,\n      onClose,\n      width = defaultWidth,\n      layout = 'horisontal',\n      children,\n      id,\n      className,\n      htmlProps,\n      ...rest\n    } = props;\n\n    const [isClosed, setClosed] = useState(false);\n\n    const containerProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      purpose,\n      width,\n      layout,\n      closable,\n      ref,\n    };\n\n    if (isClosed) {\n      return <></>;\n    }\n\n    return (\n      <Container {...containerProps}>\n        <MessageIconWrapper\n          icon={purposeVariants[purpose].icon}\n          color={icon[purpose].color}\n        />\n        <TextContainer>\n          {children ?? <Typography as=\"span\">{message}</Typography>}\n        </TextContainer>\n        {closable && (\n          <CloseButton\n            icon={CloseIcon}\n            purpose={purposeVariants[purpose].closeButtonPurpose}\n            appearance=\"borderless\"\n            onClick={() => {\n              setClosed(true);\n              onClose && onClose();\n            }}\n            size=\"small\"\n            aria-label=\"Lukk melding\"\n          />\n        )}\n      </Container>\n    );\n  }\n);\n\nLocalMessage.displayName = 'LocalMessage';\n"],"names":["defaultWidth","container","icon","purposeVariants","tokens","Container","styled","layout","closable","getGridTemplateAreas","getGridTemplateColumns","getFontStyling","defaultTypographyType","selection","purpose","css","width","closeable","MessageIconWrapper","Icon","TextContainer","CloseButton","Button","LocalMessage","forwardRef","props","ref","message","onClose","children","id","className","htmlProps","rest","isClosed","setClosed","useState","containerProps","getBaseHTMLProps","jsx","Fragment","jsxs","Typography","CloseIcon"],"mappings":"qqBAkBA,MAAAA,EAAA,QACA,CAAA,UAAAC,EAAA,KAAAC,EAAA,gBAAAC,CAAA,EAAAC,EAOAC,EAAAC,EAAA;AAAA;AAAA;AAAA,yBAAyB,CAAA,CAAA,OAAAC,EAAA,SAAAC,CAAA,IAAAC,EAAAF,EAAAC,CAAA,CAAA;AAAA,2BAIiB,CAAA,CAAA,OAAAD,EAAA,SAAAC,CAAA,IAAAE,EAAAH,EAAAC,CAAA,CAAA;AAAA,gBAEEP,EAAA,KAAA,SAAA;AAAA,YACJA,EAAA,KAAA,MAAA;AAAA,mBACPA,EAAA,KAAA,YAAA;AAAA,aACaA,EAAA,KAAA,OAAA;AAAA,SACXA,EAAA,KAAA,GAAA;AAAA;AAAA,IACRU,EAAAC,EAAA,EAAA,CAAA;AAAA;AAAA;AAAA,MAEoBC,CAAA;AAAA;AAAA,IAGhC,CAAA,CAAA,QAAAC,KAAAA,GAAAC;AAAAA,sBAIXd,EAAA,QAAAa,CAAA,EAAA,WAAA;AAAA,0BACwDb,EAAA,QAAAa,CAAA,EAAA,eAAA;AAAA,KACQ;AAAA,WAC/D,CAAA,CAAA,MAAAE,CAAA,IAAAA,CAAA;AAAA,EAIL,SAAAP,EAAAF,EAAAU,EAAA,CAIE,OAAAA,EACEV,IAAA,aACE,0BAEF,iCAEAA,IAAA,aACE,cAEF,yBAEJ,CAEA,SAAAG,EAAAH,EAAAC,EAAA,CAIE,OAAAA,EACED,IAAA,aAAA,8BAAA,kBAIFA,IAAA,aAAA,kBAAA,KACF,CAEA,MAAAW,EAAAZ,EAAAa,CAAA;AAAA;AAAA,EAIAC,EAAAd,EAAA;AAAA;AAAA,EAIAe,EAAAf,EAAAgB,CAAA;AAAA;AAAA,aAAiCrB,EAAA,KAAA,OAAA;AAAA,EAiC1BsB,EAAAC,EAAA,WAAqB,CAAAC,EAAAC,IAAA,CAExB,KAAA,CAAM,QAAAC,EACJ,QAAAb,EAAA,OACU,SAAAN,EACV,QAAAoB,EACA,MAAAZ,EAAAhB,EACQ,OAAAO,EAAA,aACC,SAAAsB,EACT,GAAAC,EACA,UAAAC,EACA,UAAAC,EACA,GAAAC,CACG,EAAAR,EAGL,CAAAS,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,EAAA,CAAuB,GAAAC,EAAAR,EAAAC,EAAAC,EAAAC,CAAA,EAC6B,QAAAnB,EAClD,MAAAE,EACA,OAAAT,EACA,SAAAC,EACA,IAAAkB,CACA,EAGF,OAAAQ,EACEK,EAAAC,EAAA,CAAA,CAAA,EAGFC,EAAApC,EAAA,CAAA,GAAAgC,EAAA,SAAA,CAEIE,EAAArB,EAAC,CAAA,KAAAf,EAAAW,CAAA,EAAA,KACgC,MAAAZ,EAAAY,CAAA,EAAA,KACV,CAAA,EACvByB,EAAAnB,EAAA,CAAA,SAAAS,GAAAU,EAAAG,EAAA,CAAA,GAAA,OAAA,SAAAf,CAAA,CAAA,CAAA,CAAA,EAGAnB,GAAA+B,EAEElB,EAAC,CAAA,KAAAsB,EACO,QAAAxC,EAAAW,CAAA,EAAA,mBAC4B,WAAA,aACvB,QAAA,IAAA,CAETqB,EAAA,EAAA,EACAP,GAAAA,EAAA,CAAmB,EACrB,KAAA,QACK,aAAA,cACM,CAAA,CACb,CAAA,CAAA,CAEJ,CAGN,EAEAL,EAAA,YAAA"}
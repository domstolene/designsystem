{"version":3,"file":"LocalMessage-52fb4517.js","sources":["../../../../packages/components/dist/components/LocalMessage/LocalMessage.js"],"sourcesContent":["import { slicedToArray as _slicedToArray } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { __rest } from 'tslib';\nimport { jsx, Fragment, jsxs } from 'react/jsx-runtime';\nimport styled, { css } from 'styled-components';\nimport { Button } from '../Button/Button.js';\nimport { forwardRef, useState } from 'react';\nimport { localMessageTokens } from './LocalMessage.tokens.js';\nimport { Icon, CloseIcon } from '@norges-domstoler/dds-icons';\nimport { getFontStyling, defaultTypographyType, Typography } from '@norges-domstoler/dds-typography';\nimport { selection, getBaseHTMLProps } from '@norges-domstoler/dds-core';\n\nvar defaultWidth = '400px';\nvar container = localMessageTokens.container,\n  icon = localMessageTokens.icon,\n  purposeVariants = localMessageTokens.purposeVariants;\nvar Container = styled.div.withConfig({\n  displayName: \"LocalMessage__Container\",\n  componentId: \"sc-kmfp8w-0\"\n})([\"box-sizing:border-box;display:grid;grid-template-areas:\", \";grid-template-columns:\", \";box-shadow:\", \";border:\", \";border-radius:\", \";padding:\", \";gap:\", \";align-items:center;\", \" *::selection{\", \"}\", \" width:\", \";\"], function (_ref) {\n  var layout = _ref.layout,\n    closable = _ref.closable;\n  return getGridTemplateAreas(layout, closable);\n}, function (_ref2) {\n  var layout = _ref2.layout,\n    closable = _ref2.closable;\n  return getGridTemplateColumns(layout, closable);\n}, container.base.boxShadow, container.base.border, container.base.borderRadius, container.base.padding, container.base.gap, getFontStyling(defaultTypographyType, true), selection, function (_ref3) {\n  var purpose = _ref3.purpose;\n  return purpose && css([\"border-color:\", \";background-color:\", \";\"], container.purpose[purpose].borderColor, container.purpose[purpose].backgroundColor);\n}, function (_ref4) {\n  var width = _ref4.width;\n  return width;\n});\nfunction getGridTemplateAreas(layout, closeable) {\n  if (closeable) {\n    if (layout === 'horisontal') {\n      return '\"icon text closeButton\"';\n    }\n    return '\"icon closeButton\" \"text text\"';\n  } else {\n    if (layout === 'horisontal') {\n      return '\"icon text\"';\n    }\n    return '\"icon icon\" \"text text\"';\n  }\n}\nfunction getGridTemplateColumns(layout, closable) {\n  if (closable) {\n    return layout === 'horisontal' ? 'min-content 1fr min-content' : '1fr min-content';\n  }\n  return layout === 'horisontal' ? 'min-content 1fr' : '1fr';\n}\nvar MessageIconWrapper = styled(Icon).withConfig({\n  displayName: \"LocalMessage__MessageIconWrapper\",\n  componentId: \"sc-kmfp8w-1\"\n})([\"grid-area:icon;\"]);\nvar TextContainer = styled.div.withConfig({\n  displayName: \"LocalMessage__TextContainer\",\n  componentId: \"sc-kmfp8w-2\"\n})([\"grid-area:text;\"]);\nvar CloseButton = styled(Button).withConfig({\n  displayName: \"LocalMessage__CloseButton\",\n  componentId: \"sc-kmfp8w-3\"\n})([\"grid-area:closeButton;margin:-\", \" 0;\"], container.base.padding);\nvar LocalMessage = /*#__PURE__*/forwardRef(function (props, ref) {\n  var message = props.message,\n    _props$purpose = props.purpose,\n    purpose = _props$purpose === void 0 ? 'info' : _props$purpose,\n    closable = props.closable,\n    onClose = props.onClose,\n    _props$width = props.width,\n    width = _props$width === void 0 ? defaultWidth : _props$width,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? 'horisontal' : _props$layout,\n    children = props.children,\n    id = props.id,\n    className = props.className,\n    htmlProps = props.htmlProps,\n    rest = __rest(props, [\"message\", \"purpose\", \"closable\", \"onClose\", \"width\", \"layout\", \"children\", \"id\", \"className\", \"htmlProps\"]);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isClosed = _useState2[0],\n    setClosed = _useState2[1];\n  var containerProps = Object.assign(Object.assign({}, getBaseHTMLProps(id, className, htmlProps, rest)), {\n    purpose: purpose,\n    width: width,\n    layout: layout,\n    closable: closable,\n    ref: ref\n  });\n  if (isClosed) {\n    return jsx(Fragment, {});\n  }\n  return jsxs(Container, Object.assign({}, containerProps, {\n    children: [jsx(MessageIconWrapper, {\n      icon: purposeVariants[purpose].icon,\n      color: icon[purpose].color\n    }), jsx(TextContainer, {\n      children: children !== null && children !== void 0 ? children : jsx(Typography, {\n        as: \"span\",\n        children: message\n      })\n    }), closable && jsx(CloseButton, {\n      icon: CloseIcon,\n      purpose: purposeVariants[purpose].closeButtonPurpose,\n      appearance: \"borderless\",\n      onClick: function onClick() {\n        setClosed(true);\n        onClose && onClose();\n      },\n      size: \"small\",\n      \"aria-label\": \"Lukk melding\"\n    })]\n  }));\n});\nLocalMessage.displayName = 'LocalMessage';\n\nexport { LocalMessage };\n"],"names":["defaultWidth","container","localMessageTokens","icon","purposeVariants","Container","styled","_ref","layout","closable","getGridTemplateAreas","_ref2","getGridTemplateColumns","getFontStyling","defaultTypographyType","selection","_ref3","purpose","css","_ref4","width","closeable","MessageIconWrapper","Icon","TextContainer","CloseButton","Button","LocalMessage","forwardRef","props","ref","message","_props$purpose","onClose","_props$width","_props$layout","children","id","className","htmlProps","rest","__rest","_useState","useState","_useState2","_slicedToArray","isClosed","setClosed","containerProps","getBaseHTMLProps","jsx","Fragment","jsxs","Typography","CloseIcon"],"mappings":"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"}
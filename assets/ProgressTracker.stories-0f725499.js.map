{"version":3,"file":"ProgressTracker.stories-0f725499.js","sources":["../../../../packages/components/src/components/ProgressTracker/ProgressTracker.context.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTracker.tokens.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTrackerItem.tsx","../../../../packages/components/src/components/ProgressTracker/ProgressTracker.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\ntype ProgressTrackerContextType = {\n  activeStep: number;\n  handleStepChange?: (index: number) => void;\n};\n\nexport const ProgressTrackerContext = createContext<ProgressTrackerContextType>(\n  {\n    activeStep: 0,\n  }\n);\n\nexport const useProgressTrackerContext = () =>\n  useContext(ProgressTrackerContext);\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { IconSize } from '@norges-domstoler/dds-icons';\nimport { StaticTypographyType } from '@norges-domstoler/dds-typography';\n\nconst { colors, spacing } = ddsBaseTokens;\n\nexport const typographyTypes: {\n  number: StaticTypographyType;\n  label: StaticTypographyType;\n} = {\n  number: 'bodySans01',\n  label: 'bodySans03',\n};\n\nconst itemsWrapper = {\n  gap: spacing.SizesDdsSpacingLocalX0125,\n};\n\nconst itemContentWrapper = {\n  gap: spacing.SizesDdsSpacingLocalX05,\n};\n\nconst connector = {\n  color: colors.DdsColorNeutralsGray5,\n  height: '18px',\n  width: '1px',\n};\n\nconst itemNumber = {\n  size: '28px',\n  borderWidth: '2px',\n  iconSize: 'small' as IconSize,\n  active: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorNeutralsWhite,\n    backgroundColor: colors.DdsColorInteractiveBase,\n  },\n  completed: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorNeutralsWhite,\n    backgroundColor: colors.DdsColorInteractiveBase,\n    hover: {\n      borderColor: colors.DdsColorInteractiveDark,\n      color: colors.DdsColorNeutralsWhite,\n      backgroundColor: colors.DdsColorInteractiveDark,\n    },\n  },\n  inactive: {\n    borderColor: colors.DdsColorInteractiveBase,\n    color: colors.DdsColorInteractiveBase,\n    backgroundColor: colors.DdsColorNeutralsWhite,\n    hover: {\n      borderColor: colors.DdsColorInteractiveBase,\n      color: colors.DdsColorInteractiveBase,\n      backgroundColor: colors.DdsColorInteractiveLightest,\n    },\n  },\n  disabled: {\n    borderColor: colors.DdsColorNeutralsGray5,\n    color: colors.DdsColorNeutralsGray5,\n    backgroundColor: colors.DdsColorNeutralsWhite,\n  },\n};\n\nconst itemText = {\n  textDecoration: 'underline',\n\n  active: {\n    color: colors.DdsColorNeutralsGray9,\n    textDecorationColor: colors.DdsColorNeutralsGray9,\n  },\n  inactive: {\n    color: colors.DdsColorNeutralsGray7,\n    textDecorationColor: 'transparent',\n    hover: {\n      textDecorationColor: colors.DdsColorNeutralsGray7,\n    },\n  },\n  disabled: {\n    color: colors.DdsColorNeutralsGray6,\n    textDecoration: 'none',\n  },\n};\n\nexport const progressTrackerTokens = {\n  itemsWrapper,\n  itemContentWrapper,\n  connector,\n  itemNumber,\n  itemText,\n};\n","import { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { CheckIcon } from '@norges-domstoler/dds-icons';\nimport { SvgIcon } from '@norges-domstoler/dds-icons';\nimport { BaseComponentPropsWithChildren } from '@norges-domstoler/dds-core';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\nimport { VisuallyHidden } from '../VisuallyHidden';\nimport { useProgressTrackerContext } from './ProgressTracker.context';\nimport {\n  progressTrackerTokens,\n  typographyTypes,\n} from './ProgressTracker.tokens';\nimport {\n  focusVisibleTransitionValue,\n  focusVisible,\n} from '@norges-domstoler/dds-form';\n\ntype ItemState =\n  | 'activeCompleted'\n  | 'activeIncomplete'\n  | 'inactiveCompleted'\n  | 'inactiveIncomplete'\n  | 'disabled';\n\nconst toItemState = (\n  active: boolean,\n  completed: boolean,\n  disabled: boolean\n): ItemState => {\n  if (disabled) {\n    return 'disabled';\n  }\n\n  if (active) {\n    return completed ? 'activeCompleted' : 'activeIncomplete';\n  } else {\n    return completed ? 'inactiveCompleted' : 'inactiveIncomplete';\n  }\n};\n\nconst { itemNumber, itemText, itemContentWrapper } = progressTrackerTokens;\n\ntype ItemStyleProps = {\n  state: ItemState;\n};\n\ntype BaseItemProps = {\n  /** Om steget er valgt eller ikke. Settes av konsument. */\n  active?: boolean;\n\n  /** Om steget er ferdig eller ikke. Settes av konsument. */\n  completed?: boolean;\n\n  /** Om steget skal være disabled. Settes av konsument.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /** Ikon som skal vises istedenfor stegnummeret. Settes av konument. */\n  icon?: SvgIcon;\n\n  /** Indeksen til steget. NB! Denne settes automatisk av `<ProgressTracker />` og skal ikke settes manuelt. */\n  index?: number;\n};\n\ntype ProgressTrackerItemProps =\n  | ({\n      /** Click-handler som gjør det mulig for bruker å klikke på steget for å navigere. Valgfri. */\n      onClick: (index: number) => void;\n    } & BaseComponentPropsWithChildren<HTMLButtonElement, BaseItemProps>)\n  | ({\n      onClick?: undefined;\n    } & BaseComponentPropsWithChildren<HTMLDivElement, BaseItemProps>);\n\nconst ItemWrapper = styled.li`\n  flex: 1;\n  position: relative;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ItemNumber = styled.div<ItemStyleProps>`\n  transition: background-color 0.2s, border-color 0.2s, color 0.2s;\n  border-radius: 50%;\n  border: ${itemNumber.borderWidth} solid;\n  width: ${itemNumber.size};\n  height: ${itemNumber.size};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2;\n  ${getFontStyling(typographyTypes.number)}\n  font-weight: 600;\n\n  ${({ state }) => {\n    switch (state) {\n      case 'activeIncomplete':\n        return css`\n          border-color: ${itemNumber.active.borderColor};\n          color: ${itemNumber.active.color};\n          background-color: ${itemNumber.active.backgroundColor};\n        `;\n      case 'activeCompleted':\n        return css`\n          border-color: ${itemNumber.completed.borderColor};\n          color: ${itemNumber.completed.color};\n          background-color: ${itemNumber.completed.backgroundColor};\n        `;\n      case 'inactiveCompleted':\n        return css`\n          border-color: ${itemNumber.completed.borderColor};\n          color: ${itemNumber.completed.color};\n          background-color: ${itemNumber.completed.backgroundColor};\n        `;\n      case 'inactiveIncomplete':\n        return css`\n          border-color: ${itemNumber.inactive.borderColor};\n          color: ${itemNumber.inactive.color};\n          background-color: ${itemNumber.inactive.backgroundColor};\n        `;\n      case 'disabled':\n        return css`\n          border-color: ${itemNumber.disabled.borderColor};\n          color: ${itemNumber.disabled.color};\n          background-color: ${itemNumber.disabled.backgroundColor};\n        `;\n    }\n  }}\n`;\n\nconst ItemText = styled.div<ItemStyleProps>`\n  ${getFontStyling(typographyTypes.label)}\n  text-align: start;\n  text-decoration: ${itemText.textDecoration};\n  transition: text-decoration-color 0.2s;\n\n  ${({ state }) => {\n    switch (state) {\n      case 'activeCompleted':\n      case 'activeIncomplete':\n        return css`\n          color: ${itemText.active.color};\n          text-decoration-color: ${itemText.active.textDecorationColor};\n        `;\n      case 'inactiveCompleted':\n      case 'inactiveIncomplete':\n        return css`\n          color: ${itemText.inactive.color};\n          text-decoration-color: ${itemText.inactive.textDecorationColor};\n        `;\n      case 'disabled':\n        return css`\n          color: ${itemText.disabled.color};\n          text-decoration: ${itemText.disabled.textDecoration};\n        `;\n    }\n  }};\n`;\n\nconst ItemContentWrapper = styled.button<ItemStyleProps>`\n  background: none;\n  border: none;\n  margin: 0;\n  padding: 0;\n  display: grid;\n  grid-template-columns: ${itemNumber.size} 1fr;\n  justify-content: flex-start;\n  align-items: center;\n  font-family: inherit;\n  gap: ${itemContentWrapper.gap};\n  transition: ${focusVisibleTransitionValue};\n\n  :focus-visible {\n    ${focusVisible}\n  }\n\n  ${({ state }) =>\n    state !== 'disabled' &&\n    css`\n      cursor: pointer;\n    `}\n`;\n\nconst getVisuallyHiddenText = (\n  active: boolean,\n  completed: boolean,\n  index: number\n) =>\n  `${index + 1}, ${active ? '' : 'Trinn, '}${\n    completed ? 'Ferdig, ' : 'Ikke ferdig, '\n  }`;\n\nexport const ProgressTrackerItem = (props: ProgressTrackerItemProps) => {\n  const {\n    index = 0,\n    completed = false,\n    disabled = false,\n    icon,\n    children,\n  } = props;\n\n  const { activeStep, handleStepChange } = useProgressTrackerContext();\n  const active = activeStep === index;\n\n  const styleProps = {\n    state: toItemState(active, completed, disabled),\n  };\n\n  const stepNumberContent = useMemo(() => {\n    if (completed) {\n      return <Icon icon={CheckIcon} iconSize={itemNumber.iconSize} />;\n    }\n\n    if (icon !== undefined) {\n      return <Icon icon={icon} iconSize={itemNumber.iconSize} />;\n    }\n\n    return index + 1;\n  }, [completed, icon, index]);\n\n  return (\n    <ItemWrapper aria-current={active ? 'step' : undefined}>\n      <ItemContentWrapper\n        {...styleProps}\n        as={handleStepChange ? 'button' : 'div'}\n        onClick={\n          !disabled && handleStepChange\n            ? () => handleStepChange(index)\n            : undefined\n        }\n        disabled={disabled}\n      >\n        <ItemNumber {...styleProps} aria-hidden>\n          {stepNumberContent}\n        </ItemNumber>\n        <ItemText {...styleProps}>\n          <VisuallyHidden as=\"span\">\n            {getVisuallyHiddenText(active, completed, index)}\n          </VisuallyHidden>\n          {children}\n        </ItemText>\n      </ItemContentWrapper>\n    </ItemWrapper>\n  );\n};\n\nProgressTrackerItem.displayName = 'ProgressTracker.Item';\n","import {\n  Children,\n  cloneElement,\n  forwardRef,\n  ForwardRefExoticComponent,\n  Fragment,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { ProgressTrackerContext } from './ProgressTracker.context';\nimport { progressTrackerTokens } from './ProgressTracker.tokens';\nimport { ProgressTrackerItem } from './ProgressTrackerItem';\n\nconst ItemsWrapper = styled.ol`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: ${progressTrackerTokens.itemsWrapper.gap};\n  margin: 0;\n  padding: 0;\n`;\n\nconst ProgressTrackerConnector = styled.div`\n  margin-left: calc(\n    (${progressTrackerTokens.itemNumber.size} / 2) -\n      (${progressTrackerTokens.connector.width} / 2)\n  );\n  height: ${progressTrackerTokens.connector.height};\n  border-right: ${progressTrackerTokens.connector.width} solid\n    ${progressTrackerTokens.connector.color};\n`;\n\ntype ProgressTrackerProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /** Indeksen til det aktive steget. */\n    activeStep?: number;\n    /** Ekstra logikk ved klikking på et steg. */\n    onStepChange?: (step: number) => void;\n  }\n>;\n\ntype ProgressTrackerComponent =\n  ForwardRefExoticComponent<ProgressTrackerProps> & {\n    Item: typeof ProgressTrackerItem;\n  };\n\nexport const ProgressTracker: ProgressTrackerComponent = (() => {\n  const Res = forwardRef<HTMLDivElement, ProgressTrackerProps>((props, ref) => {\n    const {\n      id,\n      activeStep = 0,\n      onStepChange,\n      children,\n      className,\n      htmlProps,\n      ...rest\n    } = props;\n\n    const [thisActiveStep, setActiveStep] = useState(activeStep);\n\n    const handleChange = (step: number) => {\n      setActiveStep(step);\n      onStepChange && onStepChange(step);\n    };\n\n    useEffect(() => {\n      if (activeStep !== undefined && activeStep != thisActiveStep) {\n        setActiveStep(activeStep);\n      }\n    }, [activeStep, thisActiveStep]);\n\n    const containerProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      ref,\n    };\n\n    const steps = useMemo(() => {\n      const validChildren = removeInvalidChildren(children);\n      const itemsWithIndex = passIndexPropToProgressTrackerItem(validChildren);\n      const itemsWithConnectorsBetween =\n        intersperseItemsWithConnector(itemsWithIndex);\n      return itemsWithConnectorsBetween;\n    }, [children]);\n\n    return (\n      <ProgressTrackerContext.Provider\n        value={{\n          activeStep: thisActiveStep,\n          handleStepChange: handleChange,\n        }}\n      >\n        <div role=\"group\" aria-label=\"progress\" {...containerProps}>\n          <ItemsWrapper>{steps}</ItemsWrapper>\n        </div>\n      </ProgressTrackerContext.Provider>\n    );\n  });\n\n  (Res as ProgressTrackerComponent).Item = ProgressTrackerItem;\n  (Res as ProgressTrackerComponent).displayName = 'ProgressTracker';\n  return Res as ProgressTrackerComponent;\n})();\n\nconst removeInvalidChildren = (children: ReactNode) =>\n  Children.toArray(children).filter(isValidElement);\n\nconst passIndexPropToProgressTrackerItem = (children: ReactElement[]) =>\n  Children.map(children, (item, index) =>\n    cloneElement(item, {\n      ...item.props,\n      index,\n    })\n  );\n\nconst intersperseItemsWithConnector = (children: ReactElement[]) =>\n  Children.map(children, (child, index) => {\n    if (index === 0) {\n      return child;\n    }\n    return (\n      <Fragment key={index}>\n        <ProgressTrackerConnector aria-hidden />\n        {child}\n      </Fragment>\n    );\n  });\n"],"names":["ProgressTrackerContext","createContext","useProgressTrackerContext","useContext","colors","spacing","ddsBaseTokens","typographyTypes","itemsWrapper","itemContentWrapper","connector","itemNumber","itemText","progressTrackerTokens","toItemState","active","completed","disabled","ItemWrapper","styled","ItemNumber","getFontStyling","state","css","ItemText","ItemContentWrapper","focusVisibleTransitionValue","focusVisible","getVisuallyHiddenText","index","ProgressTrackerItem","props","icon","children","activeStep","handleStepChange","styleProps","stepNumberContent","useMemo","Icon","CheckIcon","jsx","jsxs","VisuallyHidden","ItemsWrapper","ProgressTrackerConnector","ProgressTracker","Res","forwardRef","ref","id","onStepChange","className","htmlProps","rest","thisActiveStep","setActiveStep","useState","handleChange","step","useEffect","containerProps","getBaseHTMLProps","steps","validChildren","removeInvalidChildren","itemsWithIndex","passIndexPropToProgressTrackerItem","intersperseItemsWithConnector","Children","isValidElement","item","cloneElement","child","Fragment"],"mappings":"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"}
{"version":3,"file":"Typography-ddbe86f6.js","sources":["../../../../packages/components/src/components/Typography/Typography/Typography.tsx"],"sourcesContent":["import {\n  forwardRef,\n  ElementType,\n  HTMLAttributes,\n  AnchorHTMLAttributes,\n} from 'react';\nimport styled, { css, CSSObject } from 'styled-components';\nimport { typographyTokens as tokens } from '../Typography.tokens';\nimport {\n  OtherTypographyType,\n  AnchorTypographyType,\n  LabelTypographyType,\n  TypographyComponentProps,\n  TypographyType,\n  TypographyInteractionStyling,\n} from './Typography.types';\nimport { selection } from '../../../helpers/styling';\nimport { BaseComponentProps, getBaseHTMLProps } from '../../../types';\nimport {\n  getElementType,\n  getAdditionalFontStyle,\n  getMarginStyling,\n  getAnchorStyling,\n} from '../Typography.utils';\nimport { getTextColor, TextColor } from '../../../utils';\n\ntype StyledTypographyProps = {\n  as: ElementType;\n  typographyType: TypographyType;\n  withMargins?: boolean;\n  color: TextColor;\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  interactionProps?: TypographyInteractionStyling;\n  externalLink?: boolean;\n};\n\nconst StyledTypography = styled.p<StyledTypographyProps>`\n  user-select: text;\n  &::selection,\n  *::selection {\n    ${selection}\n  }\n\n  ${({ typographyType, externalLink, interactionProps }) =>\n    typographyType === 'a'\n      ? css`\n          ${getAnchorStyling(externalLink, interactionProps)}\n        `\n      : css`\n          color: ${tokens.typographyType[typographyType].base.color};\n          ${tokens.typographyType[typographyType].base.font};\n        `}\n\n  ${({ interactionProps }) =>\n    interactionProps &&\n    interactionProps.hover &&\n    css`\n      &:hover {\n        ${interactionProps.hover as CSSObject}\n      }\n    `}\n      ${({ interactionProps }) =>\n    interactionProps &&\n    interactionProps.active &&\n    css`\n      &:active {\n        ${interactionProps.active as CSSObject}\n      }\n    `}\n\n  color: ${({ color }) => getTextColor(color)};\n\n  ${({ typographyType, as, withMargins }) =>\n    getMarginStyling(typographyType, as, withMargins)}\n\n  ${({ bold, italic, underline }) =>\n    getAdditionalFontStyle(bold, italic, underline)};\n`;\n\ntype AnchorTypographyProps = BaseComponentProps<\n  HTMLAnchorElement,\n  TypographyComponentProps & {\n    /**nativ `href`-prop ved `typographyType='a'`.  */\n    href?: string | undefined;\n\n    /** Spesifiserer om lenka er ekstern ved `typographyType='a'` eller `as='a'`.*/\n    externalLink?: boolean;\n\n    /**nativ `target`-prop ved `typographyType='a'`.  */\n    target?: string;\n  },\n  AnchorHTMLAttributes<HTMLAnchorElement>\n>;\n\ntype LabelTypographyProps = BaseComponentProps<\n  HTMLLabelElement,\n  TypographyComponentProps,\n  HTMLAttributes<HTMLLabelElement>\n>;\n\ntype OtherTypographyProps = BaseComponentProps<\n  HTMLElement,\n  TypographyComponentProps,\n  HTMLAttributes<HTMLElement>\n>;\n\nexport type TypographyProps =\n  | ({\n      /**Styling basert på det typografiske utvalget definert i Figma. Returnerer default HTML tag for hver type. **OBS!** Ved bruk av `'a'` er det flere tilgjengelige props, se under.  */\n      typographyType?: AnchorTypographyType;\n    } & AnchorTypographyProps)\n  | ({\n      /**Styling basert på det typografiske utvalget definert i Figma. Returnerer default HTML tag for hver type. **OBS!** Ved bruk av `'a'` er det flere tilgjengelige props, se under.  */\n      typographyType?: LabelTypographyType;\n    } & LabelTypographyProps)\n  | ({\n      /**Styling basert på det typografiske utvalget definert i Figma. Returnerer default HTML tag for hver type. **OBS!** Ved bruk av `'a'` er det flere tilgjengelige props, se under.  */\n      typographyType?: OtherTypographyType;\n    } & OtherTypographyProps);\n\nconst isAnchorProps = (\n  props: TypographyProps\n): props is AnchorTypographyProps => props.typographyType === 'a';\n\nexport const Typography = forwardRef<HTMLElement, TypographyProps>(\n  (props, ref) => {\n    const {\n      typographyType = 'bodySans02',\n      as: propAs,\n      children,\n      style,\n      id,\n      className,\n      htmlProps = {},\n      ...rest\n    } = props;\n\n    const { style: htmlPropsStyle, ...restHtmlProps } = htmlProps;\n\n    const as = propAs ? propAs : getElementType(typographyType as string);\n\n    let relProp;\n    let targetProp;\n    let externalLinkProp;\n    if (isAnchorProps(props)) {\n      const { externalLink, target } = props;\n      relProp = as === 'a' ? 'noopener noreferer' : undefined;\n      targetProp = as !== 'a' ? undefined : externalLink ? '_blank' : target;\n      externalLinkProp = as === 'a' && externalLink ? externalLink : undefined;\n    }\n\n    const typographyProps = {\n      ...getBaseHTMLProps<HTMLElement>(id, className, restHtmlProps, rest),\n      typographyType,\n      as,\n      style: { ...htmlPropsStyle, ...style },\n      rel: relProp,\n      target: targetProp,\n      externalLink: externalLinkProp,\n    };\n\n    return (\n      <StyledTypography ref={ref} {...typographyProps}>\n        {children}\n      </StyledTypography>\n    );\n  }\n);\n\nTypography.displayName = 'Typography';\n"],"names":["StyledTypography","styled","selection","typographyType","externalLink","interactionProps","css","getAnchorStyling","tokens","color","getTextColor","as","withMargins","getMarginStyling","bold","italic","underline","getAdditionalFontStyle","isAnchorProps","props","Typography","forwardRef","ref","propAs","children","style","id","className","htmlProps","rest","htmlPropsStyle","restHtmlProps","getElementType","relProp","targetProp","externalLinkProp","target","typographyProps","getBaseHTMLProps","jsx"],"mappings":"8TAsCA,MAAMA,EAAmBC,EAAO;AAAA;AAAA;AAAA;AAAA,MAI1BC;AAAA;AAAA;AAAA,IAGF,CAAC,CAAE,eAAAC,EAAgB,aAAAC,EAAc,iBAAAC,CAAiB,IAClDF,IAAmB,IACfG;AAAAA,YACIC,EAAiBH,EAAcC,CAAgB;AAAA,UAEnDC;AAAAA,mBACWE,EAAO,eAAeL,CAAc,EAAE,KAAK;AAAA,YAClDK,EAAO,eAAeL,CAAc,EAAE,KAAK;AAAA;AAAA;AAAA,IAGnD,CAAC,CAAE,iBAAAE,CACH,IAAAA,GACAA,EAAiB,OACjBC;AAAAA;AAAAA,UAEMD,EAAiB;AAAA;AAAA;AAAA,QAGnB,CAAC,CAAE,iBAAAA,CACP,IAAAA,GACAA,EAAiB,QACjBC;AAAAA;AAAAA,UAEMD,EAAiB;AAAA;AAAA;AAAA;AAAA,WAIhB,CAAC,CAAE,MAAAI,CAAM,IAAMC,EAAaD,CAAK;AAAA;AAAA,IAExC,CAAC,CAAE,eAAAN,EAAgB,GAAAQ,EAAI,YAAAC,KACvBC,EAAiBV,EAAgBQ,EAAIC,CAAW;AAAA;AAAA,IAEhD,CAAC,CAAE,KAAAE,EAAM,OAAAC,EAAQ,UAAAC,KACjBC,EAAuBH,EAAMC,EAAQC,CAAS;AAAA,EA4C5CE,EACJC,GACmCA,EAAM,iBAAmB,IAEjDC,EAAaC,EAAA,WACxB,CAACF,EAAOG,IAAQ,CACR,KAAA,CACJ,eAAAnB,EAAiB,aACjB,GAAIoB,EACJ,SAAAC,EACA,MAAAC,EACA,GAAAC,EACA,UAAAC,EACA,UAAAC,EAAY,CAAC,EACb,GAAGC,CACD,EAAAV,EAEE,CAAE,MAAOW,EAAgB,GAAGC,GAAkBH,EAE9CjB,EAAKY,GAAkBS,EAAe7B,CAAwB,EAEhE,IAAA8B,EACAC,EACAC,EACA,GAAAjB,EAAcC,CAAK,EAAG,CAClB,KAAA,CAAE,aAAAf,EAAc,OAAAgC,CAAW,EAAAjB,EACvBc,EAAAtB,IAAO,IAAM,qBAAuB,OAC9CuB,EAAavB,IAAO,IAAM,OAAYP,EAAe,SAAWgC,EAC7CD,EAAAxB,IAAO,KAAOP,EAAeA,EAAe,OAGjE,MAAMiC,EAAkB,CACtB,GAAGC,EAA8BZ,EAAIC,EAAWI,EAAeF,CAAI,EACnE,eAAA1B,EACA,GAAAQ,EACA,MAAO,CAAE,GAAGmB,EAAgB,GAAGL,CAAM,EACrC,IAAKQ,EACL,OAAQC,EACR,aAAcC,CAAA,EAGhB,OACGI,EAAAvC,EAAA,CAAiB,IAAAsB,EAAW,GAAGe,EAC7B,SAAAb,CACH,CAAA,CAEJ,CACF,EAEAJ,EAAW,YAAc"}
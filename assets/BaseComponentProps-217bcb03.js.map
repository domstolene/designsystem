{"version":3,"file":"BaseComponentProps-217bcb03.js","sources":["../../../../packages/core/src/helpers/Chevron/AnimatedChevronUpDown.styles.tsx","../../../../packages/core/src/helpers/Chevron/AnimatedChevronUpDown.tsx","../../../../packages/core/src/helpers/styling/selection.tsx","../../../../packages/core/src/helpers/styling/visibilityTransition.tsx","../../../../packages/core/src/helpers/Paper/Paper.tokens.tsx","../../../../packages/core/src/helpers/Paper/Paper.tsx","../../../../packages/core/src/helpers/RequiredMarker/RequiredMarker.tsx","../../../../packages/core/src/hooks/useCombinedRefs.tsx","../../../../packages/core/src/utils/idGenerator.tsx","../../../../packages/core/src/utils/getScrollbarSize.tsx","../../../../packages/core/src/utils/text.tsx","../../../../packages/core/src/utils/color.tsx","../../../../packages/core/src/utils/getFocusableElements.ts","../../../../packages/core/src/utils/searchFilter.tsx","../../../../packages/core/src/hooks/useFocusTrap.tsx","../../../../packages/core/src/hooks/useMountTransition.tsx","../../../../packages/core/src/hooks/useOnClickOutside.tsx","../../../../packages/core/src/hooks/useOnKeyDown.tsx","../../../../packages/core/src/hooks/useRoveFocus.tsx","../../../../packages/core/src/hooks/useScreenSize.tsx","../../../../packages/core/src/helpers/ScreenSize/ScreenSize.utils.tsx","../../../../packages/core/src/types/BaseComponentProps.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport interface StyledSvgChevronProps {\n  isUp?: boolean;\n}\n\nexport const SvgChevron = styled.svg<StyledSvgChevronProps>`\n  display: inline-block;\n  flex-shrink: 0;\n  position: relative;\n  text-align: center;\n  vertical-align: middle;\n`;\n\nexport const SvgChevronlGroup = styled.g<StyledSvgChevronProps>`\n  transition: transform 0.2s linear;\n  transform: ${({ isUp }) => (isUp ? 'translateY(3px)' : 'translateY(0)')};\n`;\n\nexport const SvgChevronlLeft = styled.path<StyledSvgChevronProps>`\n  transition: transform 0.2s linear;\n  transform-origin: 1px 1px;\n  transform: ${({ isUp }) =>\n    isUp ? 'rotate(-90deg) translateY(0)' : 'rotate(0) translateY(0)'};\n`;\n\nexport const SvgChevronlRight = styled.path<StyledSvgChevronProps>`\n  transition: transform 0.2s linear;\n  transform-origin: 7px 1px;\n  transform: ${({ isUp }) =>\n    isUp ? 'rotate(90deg) translateY(0)' : 'rotate(0) translateY(0)'};\n`;\n","import {\n  SvgChevronlRight,\n  SvgChevronlLeft,\n  SvgChevronlGroup,\n  SvgChevron,\n} from './AnimatedChevronUpDown.styles';\nimport { Property } from 'csstype';\n\nconst svgChevronLeftPath =\n  'M 1 0 L 5 4 C 5 4 5 4 5 4 L 4 5 C 4 5 4 5 4 5 C 4 5 4 5 4 5 L 0 1 C 0 1 0 1 0 1 L 1 0 C 1 0 1 0 1 0 C 1 0 1 0 1 0 L 1 0 Z';\nconst svgChevronRightPath =\n  'M 3 4 L 7 0 L 8 1 C 8 1 8 1 8 1 L 4 5 L 3 4 C 3 4 3 4 3 4 L 3 4 Z';\n\ninterface SvgChevronProps {\n  isUp?: boolean;\n  height?: Property.Height<string>;\n  width?: Property.Width<string>;\n}\n\nexport const AnimatedChevronUpDown = ({\n  isUp,\n  height = '5px',\n  width = '8px',\n}: SvgChevronProps) => {\n  return (\n    <SvgChevron\n      viewBox=\"0 0 8 5\"\n      width={width}\n      height={height}\n      fill=\"currentColor\"\n      isUp={isUp}\n    >\n      <SvgChevronlGroup isUp={isUp}>\n        <SvgChevronlLeft d={svgChevronLeftPath} isUp={isUp} />\n        <SvgChevronlRight d={svgChevronRightPath} isUp={isUp} />\n      </SvgChevronlGroup>\n    </SvgChevron>\n  );\n};\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { colors } = ddsBaseTokens;\n\nexport const selection = {\n  color: colors.DdsColorNeutralsGray9,\n  backgroundColor: colors.DdsColorTertiaryLightest,\n};\n","import { css } from 'styled-components';\n\nexport const visibilityTransition = (open: boolean) => {\n  return css`\n    @media (prefers-reduced-motion: no-preference) {\n      transition:\n        visibility 0.4s,\n        opacity 0.2s;\n    }\n    visibility: ${open ? 'visible' : 'hidden'};\n    opacity: ${open ? 1 : 0};\n  `;\n};\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { colors, borderRadius, font } = ddsBaseTokens;\n\nconst paper = {\n  backgroundColor: colors.DdsColorNeutralsWhite,\n  borderRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n  fontFamily: font.DdsFontBodySans01FontFamily,\n};\n\nexport const paperTokens = {\n  paper,\n};\n","import styled, { css } from 'styled-components';\nimport { selection } from '../styling';\nimport { paperTokens as tokens } from './Paper.tokens';\nimport { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nconst { outerShadow, border } = ddsBaseTokens;\n\ntype Elevation = 1 | 2 | 3 | 4;\n\nconst getElevation = (elevation: Elevation) => {\n  switch (elevation) {\n    case 1:\n      return outerShadow.DdsShadow1Onlight;\n    case 2:\n      return outerShadow.DdsShadow2Onlight;\n    case 3:\n      return outerShadow.DdsShadow3Onlight;\n    case 4:\n      return outerShadow.DdsShadow4Onlight;\n  }\n};\n\ntype Border = 'light' | 'dark';\n\nconst getBorder = (borderStyle: Border) => {\n  switch (borderStyle) {\n    case 'light':\n      return `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${border.BordersDdsBorderStyleLightStroke}`;\n    case 'dark':\n      return `${border.BordersDdsBorderStyleDarkStrokeWeight} solid ${border.BordersDdsBorderStyleDarkStroke}`;\n  }\n};\n\nexport interface PaperProps {\n  elevation?: Elevation;\n  border?: Border;\n}\n\nexport const Paper = styled.div<PaperProps>`\n  box-sizing: border-box;\n  margin: 0;\n  background-color: ${tokens.paper.backgroundColor};\n  font-family: ${tokens.paper.fontFamily};\n  border-radius: ${tokens.paper.borderRadius};\n  &::selection,\n  *::selection {\n    ${selection}\n  }\n  ${({ elevation }) =>\n    elevation &&\n    css`\n      box-shadow: ${getElevation(elevation)};\n    `}\n  border: ${({ border }) => (border ? getBorder(border) : 'none')}\n`;\n","import styled from 'styled-components';\nimport { ddsBaseTokens as tokens } from '@norges-domstoler/dds-design-tokens';\n\nconst MarkerWrapper = styled.span`\n  color: ${tokens.colors.DdsColorDangerBase};\n`;\n\nexport const RequiredMarker = () => <MarkerWrapper>*</MarkerWrapper>;\n","import type { MutableRefObject, RefCallback } from 'react';\nimport { useCallback } from 'react';\n\n/**\n * Kombinerer refs for et element.\n * Eksempel p√• bruk:\n * ```\n * const MyComponent = forwardRef<HTMLDivElement, Props>((props, ref) => {\n *\n *  const itemRef = useRef<HTMLDivElement>(null);\n *  const combinedRef = useCombinedRef(ref, itemRef);\n *\n *  return <div ref={combinedRef}>innhold</div>\n * });\n * ```\n * @param refs array med refs.\n * @template T elementet som refereres til.\n * @returns  callback med kombinerte refs.\n *\n * {@link useCombinedRef}\n */\n\nexport function useCombinedRef<T>(...refs: React.Ref<T>[]): RefCallback<T> {\n  return useCallback((element: T) => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') ref(element);\n      else if (ref && typeof ref === 'object')\n        (ref as MutableRefObject<T>).current = element;\n    });\n  }, refs);\n}\n","export const derivativeIdGenerator = (prefix: string, suffix: string): string =>\n  `${prefix}-${suffix}`;\n\nexport const spaceSeparatedIdListGenerator = (\n  values: (string | undefined)[],\n): string | undefined => {\n  const filtered = values.filter(Boolean);\n\n  return filtered.length > 0 ? filtered.join(' ') : undefined;\n};\n","export function getScrollbarSize(document: Document) {\n  const documentWidth = document.documentElement.clientWidth;\n  return Math.abs(window.innerWidth - documentWidth);\n}\n","export const calculateHeightWithLineHeight = (\n  lineHeight: number,\n  fontSize: number,\n) => {\n  return lineHeight * 0.01 * fontSize;\n};\n\nexport const firstLetterToUpperCase = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n","import {\n  ddsBaseTokens,\n  ddsReferenceTokens,\n} from '@norges-domstoler/dds-design-tokens';\nimport { Property } from 'csstype';\n\nconst { colors } = ddsBaseTokens;\nconst { textDefault } = ddsReferenceTokens;\n\nexport type ColorAlphaFormat = 'hex8' | 'decimal';\n\nexport const convertAlpha = (\n  value: number | string,\n  typeFrom: ColorAlphaFormat,\n  typeTo: ColorAlphaFormat,\n) => {\n  if (typeFrom === 'decimal' && typeTo === 'hex8') {\n    const numberValue = Number(value);\n\n    if (typeof numberValue !== 'number' || numberValue > 1 || numberValue < 0)\n      return '';\n    const hex8 = Math.round(\n      255 * (Math.round(numberValue * 100) / 100),\n    ).toString(16);\n\n    return hex8.length === 1 ? '0' + hex8 : hex8;\n  }\n  if (typeFrom === 'hex8' && typeTo === 'decimal') {\n    const regexCheck = new RegExp(/^[0-9a-fA-F]+$/).test(value.toString());\n    if (value.toString().length > 2 || regexCheck === false) return '';\n    const decimal =\n      Math.round((parseInt(value.toString(), 16) / 256) * 100) / 100;\n    return decimal;\n  }\n};\n\nexport const hexToRGBA = (hex: string): string => {\n  const r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16),\n    alpha = hex.length === 9 ? hex.slice(7, 9) : 'ff';\n\n  return `rgba(${r}, ${g}, ${b}, ${convertAlpha(alpha, 'hex8', 'decimal')})`;\n};\n\nconst getRGBValues = (value: string) =>\n  value.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i);\n\nexport const addAlphaToRGB = (rgb: string, alpha: number | string) => {\n  const values = getRGBValues(rgb);\n\n  return values\n    ? `rgba(${values[1]}, ${values[2]}, ${values[3]}, ${alpha})`\n    : '';\n};\n\nexport const RGBToHex = (value: string): string => {\n  const rgb = getRGBValues(value);\n  const alpha = (rgb?.[4] ?? '').trim();\n  const hex = rgb\n    ? '#' +\n      (parseInt(rgb[1]) | (1 << 8)).toString(16).slice(1) +\n      (parseInt(rgb[2]) | (1 << 8)).toString(16).slice(1) +\n      (parseInt(rgb[3]) | (1 << 8)).toString(16).slice(1) +\n      convertAlpha(alpha, 'decimal', 'hex8')\n    : '';\n\n  return hex;\n};\n\nexport const changeRGBAAlpha = (value: string, alpha: number): string => {\n  if (!value.startsWith('rgba(') || !value.endsWith(')')) {\n    return '';\n  }\n\n  return value.replace(/[\\d.]+\\)$/g, alpha.toString() + ')');\n};\n\nexport const textColors = {\n  interactive: colors.DdsColorInteractiveBase,\n  primary: colors.DdsColorPrimaryBase,\n  danger: colors.DdsColorDangerBase,\n  success: colors.DdsColorSuccessBase,\n  warning: colors.DdsColorWarningBase,\n  onLight: textDefault.textColor,\n  onDark: colors.DdsColorNeutralsWhite,\n  gray1: colors.DdsColorNeutralsGray1,\n  gray2: colors.DdsColorNeutralsGray2,\n  gray3: colors.DdsColorNeutralsGray3,\n  gray4: colors.DdsColorNeutralsGray4,\n  gray5: colors.DdsColorNeutralsGray5,\n  gray6: colors.DdsColorNeutralsGray6,\n  gray7: colors.DdsColorNeutralsGray7,\n  gray8: colors.DdsColorNeutralsGray8,\n  gray9: colors.DdsColorNeutralsGray9,\n};\n\nexport type DDSTextColor =\n  | 'interactive'\n  | 'primary'\n  | 'danger'\n  | 'warning'\n  | 'success'\n  | 'onLight'\n  | 'onDark'\n  | 'gray1'\n  | 'gray2'\n  | 'gray3'\n  | 'gray4'\n  | 'gray5'\n  | 'gray6'\n  | 'gray7'\n  | 'gray8'\n  | 'gray9';\n\nexport const textColorsArray = [\n  'interactive',\n  'primary',\n  'danger',\n  'success',\n  'warning',\n  'onLight',\n  'onDark',\n  'gray1',\n  'gray2',\n  'gray3',\n  'gray4',\n  'gray5',\n  'gray6',\n  'gray7',\n  'gray8',\n  'gray9',\n];\n\nexport type TextColor = DDSTextColor | Property.Color;\n\nexport function isTextColor(color: string): color is DDSTextColor {\n  return textColorsArray.indexOf(color) !== -1;\n}\n\nexport const getTextColor = (color: TextColor): TextColor => {\n  if (isTextColor(color)) return textColors[color];\n  return color;\n};\n","import { RefObject } from 'react';\n\nexport function getFocusableElements<T extends HTMLElement>(\n  elementRef: RefObject<T>,\n): NodeListOf<HTMLElement> | [] {\n  return elementRef && elementRef.current\n    ? elementRef.current.querySelectorAll(\n        'a[href], button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex=\"-1\"])',\n      )\n    : [];\n}\n","export function escapeRegexCharacters(text: string) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\nexport function searchFilter(text: string, query: string): boolean {\n  // S√∏keordet er enten f√∏rst i teksten, eller s√• har det mellomrom, bindestrek eller start-parentes f√∏r seg.\n  const searchFilterRegex = new RegExp(\n    `(?:^|[\\\\s-(])${escapeRegexCharacters(query.toLowerCase())}`,\n  );\n  return searchFilterRegex.test(text.toLowerCase());\n}\n","import { RefObject, useEffect, useRef } from 'react';\nimport { getFocusableElements } from '../utils';\n\n/**\n * Fanger fokus i en loop inni et element. Typisk bruk:\n * ```\n * const MyComponent = (props) => {\n *\n *  const componentRef = useFocusTrap<HTMLDivElement>(props.isOpen);\n *\n *  return props.isOpen ? <div ref={componentRef}><button>click</button></div> : null;\n *\n * }\n * ```\n * @param active om focus skal fanges, f.eks. n√•r en modal √•pnes.\n * @returns ref til elementet som fanger fokus.\n */\n\nexport function useFocusTrap<T extends HTMLElement>(\n  active: boolean,\n): RefObject<T> {\n  const elementRef = useRef<T>(null);\n\n  useEffect(() => {\n    function handleFocus(e: KeyboardEvent) {\n      if (e.key !== 'Tab' || !active || !elementRef.current) return;\n\n      const focusableElements = getFocusableElements(elementRef);\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n\n      if (!e.shiftKey && document.activeElement === lastElement) {\n        firstElement.focus();\n        e.preventDefault();\n      }\n\n      if (e.shiftKey && document.activeElement === firstElement) {\n        lastElement.focus();\n        e.preventDefault();\n      }\n    }\n\n    const element = elementRef.current;\n\n    if (element && active) {\n      element.focus();\n      element.addEventListener('keydown', handleFocus);\n    }\n\n    return () => {\n      element?.removeEventListener('keydown', handleFocus);\n    };\n  }, [active]);\n\n  return elementRef;\n}\n","import { useEffect, useState } from 'react';\n\n/**\n * Tillater effekter og animasjoner √• bli gjennomf√∏rt like etter et element blir lagt til eller like f√∏r det blir fjernet fra DOM.\n * Typisk bruk:\n * ```\n * // CSS\n * .component {\n *  transition: opacity 0.2s;\n *  opacity: 0;\n * }\n *\n * .transitionedIn.mounted {\n *  opacity: 1;\n * }\n *\n * const MyComponent = (props) => {\n *\n * const hasTransitionedIn = useMountTransition(props.isMounted, 500);\n *\n *  return props.isMounted || hasTransitionedIn ? (\n *  <div\n *  className={`component ${hasTransitionedIn && 'transitionedIn'} ${props.isMounted && 'mounted'}`}\n *  >\n *    innhold\n *  </div>)\n * : null;\n *\n * }\n * ```\n * @param isMounted om elementet er mounted.\n * @param unmountDelay hvor lenge transition skal vare f√∏r unmount.\n * @returns om transition er ferdig.\n */\n\nexport const useMountTransition = (\n  isMounted: boolean,\n  unmountDelay: number,\n) => {\n  const [hasTransitionedIn, setHasTransitionedIn] = useState(false);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    if (isMounted && !hasTransitionedIn) setHasTransitionedIn(true);\n    else if (!isMounted && hasTransitionedIn) {\n      timeoutId = setTimeout(() => setHasTransitionedIn(false), unmountDelay);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [unmountDelay, isMounted, hasTransitionedIn]);\n  return hasTransitionedIn;\n};\n","import { useEffect } from 'react';\n\n/**\n * Kj√∏rer logikk n√•r brukeren klikker utenfor et element, f.eks at elementet fjernes fra DOM.\n * Typisk bruk:\n * ```\n * const [isOpen, setOpen] = useState(true);\n * const ref = useRef<HTMLElement>(null);\n * useOnClickOutside(ref, () => setOpen(false));\n *\n * return <div ref={ref}>innhold</div>\n * ```\n * @param element HTML elementet man klikker utenfor.\n * @param handler funksjonen som kj√∏res ved klikk utenfor.\n */\n\nexport function useOnClickOutside(\n  element: HTMLElement | null | (HTMLElement | null)[],\n  handler: (event: MouseEvent | TouchEvent) => void,\n) {\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent) => {\n      const elements = Array.isArray(element) ? element : [element];\n      let targetElement = event.target as HTMLElement;\n\n      while (targetElement) {\n        if (elements.indexOf(targetElement) != -1) {\n          return;\n        }\n        targetElement = targetElement.parentNode as HTMLElement;\n      }\n      handler(event);\n    };\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [element, handler]);\n}\n","import { useEffect } from 'react';\n\n/**\n * Kj√∏rer logikk n√•r en spesifisert tast blir trykt ned.\n * Typisk bruk:\n * ```\n * const [isOpen, setOpen] = useState(true);\n * const ref = useRef<HTMLElement>(null);\n * useOnKeyDown(['Escape', 'Esc'], () => setOpen(false));\n *\n * return isOpen ? <div>innhold</div> : null;\n * ```\n * @param key tasten som trykkes.\n * @param handler funksjonen som skal kj√∏res.\n */\n\nexport const useOnKeyDown = (\n  key: string | string[],\n  handler: (event: KeyboardEvent) => void,\n) => {\n  useEffect(() => {\n    const listener = (event: KeyboardEvent) => {\n      const keys = Array.isArray(key) ? key : [key];\n      if (keys.indexOf(event.key) !== -1) {\n        handler(event);\n      }\n    };\n\n    document.addEventListener('keydown', listener, true);\n\n    return () => {\n      document.removeEventListener('keydown', listener, true);\n    };\n  }, [handler]);\n};\n","import {\n  useCallback,\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n  KeyboardEvent,\n} from 'react';\nimport { Direction } from '../types';\n\nexport const isKeyboardEvent = (\n  e: Event | KeyboardEvent<Element>,\n): e is KeyboardEvent<Element> =>\n  (e as KeyboardEvent<Element>).key !== undefined;\n\n/**\n * Bytter fokus mellom elementer i en gruppe med piltaster og ikke Tab, og looper fokus i gruppen. Typisk bruk:\n * ```\n * import elements from './elements';\n * import RoveItem from './RoveItem';\n *\n * const MyComponent = () => {\n *  const [focus, setFocus] = useRoveFocus(elements.length);\n *\n *  return (\n *  <ul>\n *    {elements.map((element, index) => (\n *    <li key={element}>\n *      <RoveItem index={index} focus={focus === index} setFocus={setFocus}>{element.name}</RoveItem>\n *    </li>\n *    ))}\n *  </ul>)\n * }\n * ```\n * @param size antall elementer i gruppen.\n * @param reset om fokus i gruppen skal nullstilles; n√•r man tabber seg inn i gruppen skal focus v√¶re nullstilt.\n * @param direction retning elementene blas i.\n * @returns hook par: indeksen til fokuserte elemenentet og funksjonen som h√•ndterer fokus.\n */\n\nexport function useRoveFocus(\n  size?: number,\n  reset?: boolean,\n  direction: Direction = 'column',\n): [number, Dispatch<SetStateAction<number>>] {\n  const [currentFocusIndex, setCurrentFocusIndex] = useState(-1);\n\n  const nextKey = direction === 'row' ? 'ArrowRight' : 'ArrowDown';\n  const previousKey = direction === 'row' ? 'ArrowLeft' : 'ArrowUp';\n\n  const handleKeyDown = useCallback(\n    (e: Event) => {\n      if (!size || !isKeyboardEvent(e)) return;\n      if (reset) setCurrentFocusIndex(-1);\n      if (e.key === nextKey) {\n        // Down arrow\n        e.preventDefault();\n        setCurrentFocusIndex(\n          currentFocusIndex === size - 1 ? 0 : currentFocusIndex + 1,\n        );\n      } else if (e.key === previousKey) {\n        // Up arrow\n        e.preventDefault();\n        if (currentFocusIndex !== -1) {\n          setCurrentFocusIndex(\n            currentFocusIndex === 0 ? size - 1 : currentFocusIndex - 1,\n          );\n        } else setCurrentFocusIndex(size - 1);\n      }\n    },\n    [size, currentFocusIndex, setCurrentFocusIndex, reset],\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  return [currentFocusIndex, setCurrentFocusIndex];\n}\n","import { useEffect, useState } from 'react';\nimport { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { breakpoints } = ddsBaseTokens;\n\nexport enum ScreenSize {\n  XSmall = 0,\n  Small,\n  Medium,\n  Large,\n  XLarge,\n}\n\nconst screenSizesAndMediaQueries: [ScreenSize, string][] = [\n  [\n    ScreenSize.XLarge,\n    `only screen and (min-width: ${breakpoints.DdsBreakpointXl})`,\n  ],\n  [\n    ScreenSize.Large,\n    `only screen and (min-width: ${breakpoints.DdsBreakpointLg})`,\n  ],\n  [\n    ScreenSize.Medium,\n    `only screen and (min-width: ${breakpoints.DdsBreakpointMd})`,\n  ],\n  [\n    ScreenSize.Small,\n    `only screen and (min-width: ${breakpoints.DdsBreakpointSm})`,\n  ],\n  [\n    ScreenSize.XSmall,\n    `only screen and (min-width: ${breakpoints.DdsBreakpointXs})`,\n  ],\n];\n\n/**\n * Sjekker skjermst√∏rrelsen basert p√• brekkpunkter definerte i designsystemet. Eksempel p√• bruk:\n * ```\n * const MyComponent = () => {\n *  const screenSize = useScreenSize();\n *  const isSmallScreen = screenSize === ScreenSize.Small;\n *\n *  return <div className={isSmallScreen && 'smallDiv'} >innhold</div>\n * }\n * ```\n * @returns den aktuelle skjermst√∏rrelsen basert p√• {@link ScreenSize}.\n */\n\nexport const useScreenSize = function () {\n  const [screenSize, setScreenSize] = useState(ScreenSize.Large);\n\n  useEffect(() => {\n    function listener() {\n      for (const [screenSize, mediaQuery] of screenSizesAndMediaQueries) {\n        if (window.matchMedia(mediaQuery).matches) {\n          setScreenSize(screenSize);\n          return;\n        }\n      }\n    }\n    listener();\n\n    window.addEventListener('resize', listener);\n    return () => window.removeEventListener('resize', listener);\n  }, []);\n\n  return screenSize;\n};\n","import { ScreenSize } from '../../hooks';\nimport { StandardProperties } from 'csstype';\n\nexport type ScreenSizeLiteral = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport const getLiteralScreenSize = (\n  screenSize: ScreenSize,\n): ScreenSizeLiteral => {\n  switch (screenSize) {\n    case ScreenSize.XLarge:\n      return 'xl';\n    case ScreenSize.Large:\n      return 'lg';\n    case ScreenSize.Medium:\n      return 'md';\n    case ScreenSize.Small:\n      return 'sm';\n    case ScreenSize.XSmall:\n      return 'xs';\n  }\n};\n\nexport type BreakpointBasedProps<T extends keyof StandardProperties> = {\n  [k in ScreenSizeLiteral]?: StandardProperties[T];\n};\n","import { HTMLAttributes, PropsWithChildren } from 'react';\n\n/**\n * Basetype for props som eksponeres til konsumenter av designsystemet.\n * Lager en intersection-type med props som sendes inn og `id` og `htmlProps`\n * slik at man kan ha `HTMLAttributes`-props p√• komponenter som eksponeres\n * av designsystemet. Se ogs√• {@link BaseComponentPropsWithChildren} og\n * {@link getBaseHTMLProps}.\n *\n * @template TElement Element-type som genereres av komponenten.\n * @template TOtherProps Andre props komponenten skal eksponere til konsumenter.\n * @template THTMLAttributesProps Standard `HTMLAttributes<T>` men kan overstyres for f.eks knapper hvis man trenger en annen basetype for `htmlProps`.\n */\nexport type BaseComponentProps<\n  TElement extends Element,\n  TOtherProps extends object = object,\n  THTMLAttributesProps extends\n    HTMLAttributes<TElement> = HTMLAttributes<TElement>,\n> = Pick<THTMLAttributesProps, 'id' | 'className'> &\n  TOtherProps & {\n    /**Ekstra HTML-attributter som vil settes p√• elementet som genereres. Untatt `id` og `className` som settes p√• toppniv√•. */\n    htmlProps?: THTMLAttributesProps;\n  };\n\n/**\n * Utvidelese av {@link BaseComponentProps} med prop for `children`.\n *\n * {@link BaseComponentProps}\n */\nexport type BaseComponentPropsWithChildren<\n  T extends Element,\n  TProps extends object = object,\n  THTMLProps extends HTMLAttributes<T> = HTMLAttributes<T>,\n> = BaseComponentProps<T, PropsWithChildren<TProps>, THTMLProps>;\n\nexport const joinClassNames = (...classNames: (string | undefined)[]) =>\n  classNames.filter(Boolean).join(' ');\n\ninterface GetBaseHTMLProps {\n  <T extends Element>(\n    id: HTMLAttributes<T>['id'],\n    className: HTMLAttributes<T>['className'],\n    htmlProps: HTMLAttributes<T> | undefined,\n    unknownProps: object,\n  ): HTMLAttributes<T> & object;\n  <T extends Element>(\n    id: HTMLAttributes<T>['id'],\n    htmlProps: HTMLAttributes<T> | undefined,\n    unknownProps: object,\n  ): HTMLAttributes<T> & object;\n}\n\n/**\n * Sl√•r sammen id, className, htmlProps og unknownProps til ett objekt\n * som kan spreades som baseprops for en komponent. `unknownProps` er\n * med for √• sikre at aria- og data- attributter blir spreadet, alle\n * komponenter m√• derfor ta hensyn til `...rest` n√•r de leser props.\n *\n * Typisk bruk:\n * ```\n * const Props = BaseComponentProps<HTMLElement, {\n *   propA: string,\n *   propB: string,\n * }>\n *\n * const MyComponent = (props: Props) => {\n *   const { propA, propB, id, className, htmlProps, ...rest } = props;\n *\n *   const wrapperProps = getBaseHTMLProps(id, className, htmlProps, rest)\n *\n *   return <div {...wrapperProps}>innhold</div>\n * }\n * ```\n * @param id id fra props til komponenten.\n * @param className className for komponenten.\n * @param htmlProps htmlProps fra komponenten.\n * @param unknownProps andre ukjente props som skal spreades, kommer typisk fra `...rest` n√•r man leser props til komponenten.\n * @returns Objekt med alle argumentene som kan spreades.\n *\n * Kan ogs√• kalles uten `className`-parameteret. Oppf√∏rselen er lik.\n */\nexport const getBaseHTMLProps: GetBaseHTMLProps = <T extends Element>(\n  id: HTMLAttributes<T>['id'],\n  htmlPropsOrClassName:\n    | HTMLAttributes<T>['className']\n    | (HTMLAttributes<T> | undefined),\n  htmlPropsOrUnknownProps: (HTMLAttributes<T> | undefined) | object,\n  unknownPropsOrUndefined?: object,\n): HTMLAttributes<T> & object => {\n  if (\n    typeof htmlPropsOrClassName === 'string' ||\n    unknownPropsOrUndefined != undefined\n  ) {\n    const {\n      id: idFromHtmlProps,\n      className: classNameFromHtmlProps,\n      ...restHTMLProps\n    } = (htmlPropsOrUnknownProps as HTMLAttributes<T> | undefined) ?? {};\n\n    const propId = id ?? idFromHtmlProps;\n\n    const propClassName = joinClassNames(\n      htmlPropsOrClassName as string | undefined,\n      classNameFromHtmlProps,\n    );\n\n    return {\n      ...unknownPropsOrUndefined,\n      ...restHTMLProps,\n      ...(propClassName && { className: propClassName }),\n      ...(propId && { id: propId }),\n    };\n  } else {\n    const {\n      id: htmlPropsId,\n      className: htmlPropsClassName,\n      ...restHTMLProps\n    } = htmlPropsOrClassName ?? {};\n\n    const propId = id ?? htmlPropsId;\n\n    return {\n      ...htmlPropsOrUnknownProps,\n      ...restHTMLProps,\n      ...(htmlPropsClassName && { className: htmlPropsClassName }),\n      ...(propId && { id: propId }),\n    };\n  }\n};\n"],"names":["SvgChevron","styled","SvgChevronlGroup","isUp","SvgChevronlLeft","SvgChevronlRight","svgChevronLeftPath","svgChevronRightPath","AnimatedChevronUpDown","height","width","jsx","jsxs","colors","ddsBaseTokens","selection","visibilityTransition","open","css","borderRadius","font","paper","paperTokens","outerShadow","border","getElevation","elevation","getBorder","borderStyle","Paper","tokens","border2","MarkerWrapper","RequiredMarker","useCombinedRef","refs","useCallback","element","ref","derivativeIdGenerator","prefix","suffix","spaceSeparatedIdListGenerator","values","filtered","getScrollbarSize","document","documentWidth","calculateHeightWithLineHeight","lineHeight","fontSize","firstLetterToUpperCase","text","textDefault","ddsReferenceTokens","convertAlpha","value","typeFrom","typeTo","numberValue","hex8","regexCheck","hexToRGBA","hex","r","g","b","alpha","getRGBValues","RGBToHex","rgb","changeRGBAAlpha","textColors","textColorsArray","isTextColor","color","getTextColor","getFocusableElements","elementRef","escapeRegexCharacters","searchFilter","query","useFocusTrap","active","useRef","useEffect","handleFocus","e","focusableElements","firstElement","lastElement","useMountTransition","isMounted","unmountDelay","hasTransitionedIn","setHasTransitionedIn","useState","timeoutId","useOnClickOutside","handler","listener","event","elements","targetElement","useOnKeyDown","key","isKeyboardEvent","useRoveFocus","size","reset","direction","currentFocusIndex","setCurrentFocusIndex","nextKey","previousKey","handleKeyDown","breakpoints","ScreenSize","ScreenSize2","screenSizesAndMediaQueries","useScreenSize","screenSize","setScreenSize","screenSize2","mediaQuery","getLiteralScreenSize","joinClassNames","classNames","getBaseHTMLProps","id","htmlPropsOrClassName","htmlPropsOrUnknownProps","unknownPropsOrUndefined","idFromHtmlProps","classNameFromHtmlProps","restHTMLProps","propId","propClassName","htmlPropsId","htmlPropsClassName"],"mappings":"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"}
{"version":3,"file":"OverflowMenuGroup-e99a7a28.js","sources":["../../../../packages/components/src/components/OverflowMenu/OverflowMenuGroup.tsx"],"sourcesContent":["import {\n  useRef,\n  useState,\n  Children as ReactChildren,\n  ReactNode,\n  isValidElement,\n  cloneElement,\n  ReactElement,\n  useId,\n} from 'react';\n\nexport type OverflowMenuGroupProps = {\n  /**Ekstra logikk som kjøres når `<OverflowMenu />` åpnes og lukkes. */\n  onToggle?: () => void;\n  /**Ekstra logikk som kjøres når `<OverflowMenu />` åpnes. */\n  onOpen?: () => void;\n  /**Ekstra logikk som kjøres når `<OverflowMenu />` lukkes. */\n  onClose?: () => void;\n  /**Barn, anchor-elementet som første og `<OverflowMenu />` som andre. */\n  children: ReactNode;\n  /**Custom id for `<OverflowMenu />`. */\n  overflowMenuId?: string;\n};\n\nexport const OverflowMenuGroup = ({\n  children,\n  onClose,\n  onToggle,\n  onOpen,\n  overflowMenuId,\n}: OverflowMenuGroupProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  const close = () => setIsOpen(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const generatedId = useId();\n  const uniqueOverflowMenuId = overflowMenuId ?? `${generatedId}-overflowMenu`;\n\n  const handleClose = () => {\n    onClose && onClose();\n    close();\n  };\n\n  const handleToggle = () => {\n    onOpen && !isOpen && onOpen();\n    onClose && isOpen && onClose();\n    onToggle && onToggle();\n    toggle();\n  };\n\n  const Children = ReactChildren.map(children, (child, childIndex) => {\n    return (\n      isValidElement(child) &&\n      (childIndex === 0\n        ? cloneElement(child as ReactElement, {\n            'aria-haspopup': 'menu',\n            'aria-controls': uniqueOverflowMenuId,\n            'aria-expanded': isOpen,\n            onClick: handleToggle,\n            ref: buttonRef,\n          })\n        : cloneElement(child as ReactElement, {\n            isOpen: isOpen,\n            id: uniqueOverflowMenuId,\n            onClose: handleClose,\n            onToggle: handleToggle,\n            anchorRef: buttonRef,\n          }))\n    );\n  });\n\n  return <>{Children}</>;\n};\n\nOverflowMenuGroup.displayName = 'OverflowMenuGroup';\n"],"names":["OverflowMenuGroup","children","onClose","onToggle","onOpen","overflowMenuId","isOpen","setIsOpen","useState","toggle","close","buttonRef","useRef","generatedId","useId","uniqueOverflowMenuId","handleClose","handleToggle","Children","ReactChildren","child","childIndex","isValidElement","cloneElement"],"mappings":"+FAwBO,MAAMA,EAAoB,CAAC,CAChC,SAAAC,EACA,QAAAC,EACA,SAAAC,EACA,OAAAC,EACA,eAAAC,CACF,IAA8B,CAC5B,KAAM,CAACC,EAAQC,CAAS,EAAIC,WAAS,EAAK,EACpCC,EAAS,IAAMF,EAAU,CAACD,CAAM,EAChCI,EAAQ,IAAMH,EAAU,EAAK,EAC7BI,EAAYC,SAA0B,IAAI,EAE1CC,EAAcC,EAAAA,QACdC,EAAuBV,GAAkB,GAAGQ,iBAE5CG,EAAc,IAAM,CACxBd,GAAWA,EAAQ,EACbQ,GAAA,EAGFO,EAAe,IAAM,CACfb,GAAA,CAACE,GAAUF,IACrBF,GAAWI,GAAUJ,IACrBC,GAAYA,EAAS,EACdM,GAAA,EAGHS,EAAWC,EAAAA,SAAc,IAAIlB,EAAU,CAACmB,EAAOC,IAEjDC,EAAAA,eAAeF,CAAK,IACnBC,IAAe,EACZE,eAAaH,EAAuB,CAClC,gBAAiB,OACjB,gBAAiBL,EACjB,gBAAiBT,EACjB,QAASW,EACT,IAAKN,CAAA,CACN,EACDY,EAAA,aAAaH,EAAuB,CAClC,OAAAd,EACA,GAAIS,EACJ,QAASC,EACT,SAAUC,EACV,UAAWN,CACZ,CAAA,EAER,EAED,YAAU,SAASO,CAAA,CAAA,CACrB,EAEAlB,EAAkB,YAAc"}
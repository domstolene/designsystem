{"version":3,"file":"Popover.stories-2e524318.js","sources":["../../../../packages/core/src/hooks/useReturnFocusOnBlur.ts","../../../../packages/components/src/components/Popover/Popover.tokens.tsx","../../../../packages/components/src/components/Popover/Popover.tsx","../../../../packages/components/src/components/Popover/PopoverGroup.tsx"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react';\nimport { getFocusableElements } from '../utils';\n\n/**\n * Returnerer fokus til et element når første eller siste barn i en container mister fokus ved tastaturnavigasjon. Typisk bruk:\n * ```\n * const MyComponent = (props) => {\n *\n *  const [isOpen, setOpen] = useState(true);\n *  const close = () => setOpen(false);\n *  const triggerRef = useRef<HTMLButtonElement>(null);\n *  const containerRef = useReturnFocusOnBlur<HTMLDivElement>(\n *    isOpen,\n *    triggerRef.current,\n *    () => close()\n *  );\n *\n *  return (\n *    <div>\n *      <button ref={triggerRef} >Åpne popover</button>\n *      <div ref={containerRef}>\n *        <button>gjør noe</button>\n *      </div>\n *    </div>\n *  )\n * }\n * ```\n * @param active om container skal få fokus, f.eks. når en modal åpnes.\n * @param triggerElement elementet som skal få fokus når fokus forlater container.\n * @param onBlur ekstra logikk når fokus forlater container.\n * @returns ref til container som får fokus.\n */\n\nexport function useReturnFocusOnBlur<T extends HTMLElement>(\n  active: boolean,\n  onBlur: () => void,\n  triggerElement?: HTMLElement | null\n): RefObject<T> {\n  const elementRef = useRef<T>(null);\n\n  useEffect(() => {\n    function handleFocus(e: KeyboardEvent) {\n      if (e.key !== 'Tab' || !active || !elementRef.current || !triggerElement)\n        return;\n\n      const focusableElements = getFocusableElements(elementRef);\n      const lastElement = focusableElements[focusableElements.length - 1];\n      const firstElement = focusableElements[0];\n\n      if (\n        (!e.shiftKey && document.activeElement === lastElement) ||\n        (e.shiftKey && document.activeElement === firstElement) ||\n        (e.shiftKey && document.activeElement === element)\n      ) {\n        triggerElement.focus();\n        e.preventDefault();\n        onBlur();\n      }\n    }\n\n    const element = elementRef.current;\n    if (element && active) {\n      element.focus();\n      element.addEventListener('keydown', handleFocus);\n    }\n\n    return () => {\n      element?.removeEventListener('keydown', handleFocus);\n    };\n  }, [active]);\n\n  return elementRef;\n}\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { spacing } = ddsBaseTokens;\n\nconst wrapper = {\n  padding: `${spacing.SizesDdsSpacingLocalX075} ${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX15} ${spacing.SizesDdsSpacingLocalX1}`,\n};\nconst closeButton = {\n  top: spacing.SizesDdsSpacingLocalX025,\n  right: spacing.SizesDdsSpacingLocalX025,\n};\n\nconst title = {\n  marginRight: spacing.SizesDdsSpacingLocalX2,\n};\n\nconst content = {\n  noTitle: {\n    marginTop: spacing.SizesDdsSpacingLocalX2,\n  },\n};\n\nexport const popoverTokens = {\n  content,\n  wrapper,\n  closeButton,\n  title,\n};\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { Property } from 'csstype';\nimport { forwardRef, ReactNode, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { visibilityTransition } from '@norges-domstoler/dds-core';\nimport {\n  Placement,\n  useCombinedRef,\n  useFloatPosition,\n  useReturnFocusOnBlur,\n  useMountTransition,\n  useOnClickOutside,\n} from '@norges-domstoler/dds-core';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { Button } from '../Button';\nimport { Typography } from '@norges-domstoler/dds-typography';\nimport { popoverTokens as tokens } from './Popover.tokens';\nimport { CloseIcon } from '@norges-domstoler/dds-icons';\nimport { Paper } from '@norges-domstoler/dds-core';\nimport { focusVisible } from '@norges-domstoler/dds-form';\n\nconst { spacing: Spacing } = ddsBaseTokens;\nconst { wrapper, content, closeButton, title } = tokens;\n\ntype WrapperProps = {\n  sizeProps?: PopoverSizeProps;\n  hasTransitionedIn?: boolean;\n  isOpen: boolean;\n};\n\nconst Wrapper = styled(Paper)<WrapperProps>`\n  opacity: 0;\n  ${({ hasTransitionedIn, isOpen }) =>\n    hasTransitionedIn && visibilityTransition(hasTransitionedIn && isOpen)}\n  position: absolute;\n  width: fit-content;\n  z-index: 100;\n  padding: ${wrapper.padding};\n\n  &:focus-visible {\n    ${focusVisible}\n  }\n  ${({ sizeProps }) =>\n    sizeProps &&\n    css`\n      ${sizeProps}\n    `}\n`;\n\nconst TitleContainer = styled.div`\n  margin-right: ${title.marginRight};\n`;\n\ntype ContentContainerProps = {\n  hasTitle: boolean;\n  withCloseButton: boolean;\n};\n\nconst ContentContainer = styled.div<ContentContainerProps>`\n  ${({ withCloseButton, hasTitle }) =>\n    withCloseButton &&\n    !hasTitle &&\n    css`\n      margin-top: ${content.noTitle.marginTop};\n    `}\n`;\n\nconst StyledButton = styled(Button)`\n  position: absolute;\n  top: ${closeButton.top};\n  right: ${closeButton.right};\n`;\n\nexport type PopoverSizeProps = {\n  width?: Property.Width<string>;\n  height?: Property.Height<string>;\n  minWidth?: Property.MinWidth<string>;\n  minHeight?: Property.MinHeight<string>;\n  maxWidth?: Property.MaxWidth<string>;\n  maxHeight?: Property.MaxHeight<string>;\n};\n\nexport type PopoverProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Tittel. */\n    title?: string | ReactNode;\n    /** **OBS!** Propen settes automatisk av `<PopoverGroup />`. Spesifiserer om `<Popover />` skal vises. */\n    isOpen?: boolean;\n    /**Om lukkeknapp skal vises. */\n    withCloseButton?: boolean;\n    /** **OBS!** Propen settes automatisk av `<PopoverGroup />`. Anchor-elementet. */\n    anchorElement?: HTMLElement;\n    /**Spesifiserer hvor komponenten skal plasseres i forhold til anchor-elementet. */\n    placement?: Placement;\n    /**Avstand fra anchor-elementet i px. */\n    offset?: number;\n    /** Ekstra logikk kjørt når lukkeknappen trykkes. */\n    onCloseButtonClick?: () => void;\n    /** Ekstra logikk kjørt når popover mister fokus. */\n    onBlur?: () => void;\n    /**Custom størrelse. */\n    sizeProps?: PopoverSizeProps;\n    /** **OBS!** Propen settes automatisk av `<PopoverGroup />`. Funksjon kjørt ved lukking. */\n    onClose?: () => void;\n  }\n>;\n\nexport const Popover = forwardRef<HTMLDivElement, PopoverProps>(\n  (props, ref) => {\n    const {\n      title,\n      isOpen = false,\n      withCloseButton = true,\n      onBlur,\n      onCloseButtonClick,\n      onClose,\n      anchorElement,\n      children,\n      placement = 'bottom',\n      offset = Spacing.SizesDdsSpacingLocalX05NumberPx,\n      id,\n      className,\n      htmlProps = {},\n      ...rest\n    } = props;\n\n    const popoverRef = useReturnFocusOnBlur(\n      isOpen,\n      () => {\n        onClose && onClose();\n        onBlur && onBlur();\n      },\n      anchorElement && anchorElement\n    );\n\n    const { reference, floating, styles } = useFloatPosition(null, {\n      placement,\n      offset,\n    });\n    const multiRef = useCombinedRef(ref, popoverRef, floating);\n\n    useEffect(() => {\n      anchorElement ? reference(anchorElement) : reference(null);\n    }, [anchorElement]);\n\n    const elements: (HTMLElement | null)[] = [\n      popoverRef.current as HTMLElement,\n    ];\n    if (anchorElement) elements.push(anchorElement);\n\n    useOnClickOutside(elements, () => {\n      if (isOpen) onClose && onClose();\n    });\n\n    const hasTransitionedIn = useMountTransition(isOpen, 400);\n\n    const wrapperProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      ref: multiRef,\n      isOpen,\n      hasTransitionedIn,\n      tabIndex: -1,\n      style: { ...htmlProps.style, ...styles.floating },\n      role: 'dialog',\n    };\n\n    return isOpen || hasTransitionedIn ? (\n      <Wrapper {...wrapperProps} elevation={3} border=\"light\">\n        {title && (\n          <TitleContainer>\n            {typeof title === 'string' ? (\n              <Typography typographyType=\"headingSans02\">{title}</Typography>\n            ) : (\n              title\n            )}\n          </TitleContainer>\n        )}\n        <ContentContainer hasTitle={!!title} withCloseButton={withCloseButton}>\n          {children}\n        </ContentContainer>\n        {withCloseButton && (\n          <StyledButton\n            icon={CloseIcon}\n            appearance=\"borderless\"\n            purpose=\"secondary\"\n            size=\"small\"\n            onClick={onCloseButtonClick}\n            aria-label=\"Lukk\"\n          />\n        )}\n      </Wrapper>\n    ) : null;\n  }\n);\n\nPopover.displayName = 'Popover';\n","import {\n  useState,\n  ReactElement,\n  Children as ReactChildren,\n  cloneElement,\n  isValidElement,\n  useRef,\n  ReactNode,\n  useId,\n} from 'react';\nimport { useOnKeyDown } from '@norges-domstoler/dds-core';\n\nexport type PopoverGroupProps = {\n  /**Callback når det trykkes på lukkeknappen. */\n  onCloseButtonClick?: () => void;\n  /** Callback når det trykkes på anchor-elementet (trigger-elementet). */\n  onTriggerClick?: () => void;\n  /**Forteller `<Popover />` om den skal være åpen.  */\n  isOpen?: boolean;\n  /** `id` til `<Popover />.` */\n  popoverId?: string;\n  /** Barna til wrapperen: anchor-element som det første og `<Popover />` so det adnre.  */\n  children: ReactNode;\n};\n\nexport const PopoverGroup = ({\n  isOpen = false,\n  onCloseButtonClick,\n  onTriggerClick,\n  children,\n  popoverId,\n}: PopoverGroupProps) => {\n  const [open, setOpen] = useState(isOpen);\n\n  const generatedId = useId();\n  const uniquePopoverId = popoverId ?? `${generatedId}-popover`;\n\n  const handleOnCloseButtonClick = () => {\n    setOpen(false);\n    onCloseButtonClick && onCloseButtonClick();\n  };\n\n  const handleOnTriggerClick = () => {\n    setOpen(!open);\n    onTriggerClick && onTriggerClick();\n  };\n\n  const buttonRef = useRef<HTMLElement>(null);\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  useOnKeyDown(['Esc', 'Escape'], () => {\n    if (open) {\n      setOpen(false);\n      buttonRef.current?.focus();\n    }\n  });\n\n  const handleClose = () => setOpen(false);\n\n  const Children = ReactChildren.map(children, (child, childIndex) => {\n    return (\n      isValidElement(child) &&\n      (childIndex === 0\n        ? cloneElement(child as ReactElement, {\n            'aria-haspopup': 'dialog',\n            'aria-controls': uniquePopoverId,\n            'aria-expanded': open,\n            onClick: handleOnTriggerClick,\n            ref: buttonRef,\n          })\n        : cloneElement(child as ReactElement, {\n            isOpen: open,\n            'aria-hidden': !open,\n            id: uniquePopoverId,\n            onCloseButtonClick: handleOnCloseButtonClick,\n            anchorElement: buttonRef.current,\n            ref: popoverRef,\n            onClose: handleClose,\n          }))\n    );\n  });\n\n  return <>{Children}</>;\n};\n\nPopoverGroup.displayName = 'PopoverGroup';\n"],"names":["useReturnFocusOnBlur","active","onBlur","triggerElement","elementRef","useRef","useEffect","handleFocus","e","focusableElements","getFocusableElements","lastElement","firstElement","element","spacing","ddsBaseTokens","wrapper","closeButton","title","content","popoverTokens","Spacing","tokens","Wrapper","styled","Paper","hasTransitionedIn","isOpen","visibilityTransition","focusVisible","sizeProps","css","TitleContainer","ContentContainer","withCloseButton","hasTitle","StyledButton","Button","Popover","forwardRef","props","ref","title2","onCloseButtonClick","onClose","anchorElement","children","placement","offset","id","className","htmlProps","rest","popoverRef","reference","floating","styles","useFloatPosition","multiRef","useCombinedRef","elements","useOnClickOutside","useMountTransition","wrapperProps","getBaseHTMLProps","jsxs","jsx","Typography","CloseIcon","PopoverGroup","onTriggerClick","popoverId","open","setOpen","useState","generatedId","useId","uniquePopoverId","handleOnCloseButtonClick","handleOnTriggerClick","buttonRef","useOnKeyDown","_a","handleClose","Children","ReactChildren","child","childIndex","isValidElement","cloneElement","Fragment"],"mappings":"4zBAiCgB,SAAAA,GACdC,EACAC,EACAC,EACc,CACR,MAAAC,EAAaC,SAAU,IAAI,EAEjCC,OAAAA,EAAAA,UAAU,IAAM,CACd,SAASC,EAAYC,EAAkB,CACjC,GAAAA,EAAE,MAAQ,OAAS,CAACP,GAAU,CAACG,EAAW,SAAW,CAACD,EACxD,OAEI,MAAAM,EAAoBC,GAAqBN,CAAU,EACnDO,EAAcF,EAAkBA,EAAkB,OAAS,CAAC,EAC5DG,EAAeH,EAAkB,CAAC,GAGrC,CAACD,EAAE,UAAY,SAAS,gBAAkBG,GAC1CH,EAAE,UAAY,SAAS,gBAAkBI,GACzCJ,EAAE,UAAY,SAAS,gBAAkBK,KAE1CV,EAAe,MAAM,EACrBK,EAAE,eAAe,EACVN,IAEX,CAEA,MAAMW,EAAUT,EAAW,QAC3B,OAAIS,GAAWZ,IACbY,EAAQ,MAAM,EACNA,EAAA,iBAAiB,UAAWN,CAAW,GAG1C,IAAM,CACFM,GAAA,MAAAA,EAAA,oBAAoB,UAAWN,EAAW,CACrD,EACC,CAACN,CAAM,CAAC,EAEJG,CACT,CCtEA,KAAM,CAAE,QAAAU,CAAY,EAAAC,EAEdC,GAAU,CACd,QAAS,GAAGF,EAAQ,4BAA4BA,EAAQ,0BAA0BA,EAAQ,2BAA2BA,EAAQ,wBAC/H,EACMG,GAAc,CAClB,IAAKH,EAAQ,yBACb,MAAOA,EAAQ,wBACjB,EAEMI,GAAQ,CACZ,YAAaJ,EAAQ,sBACvB,EAEMK,GAAU,CACd,QAAS,CACP,UAAWL,EAAQ,sBACrB,CACF,EAEaM,GAAgB,CAAA,QAC3BD,GAAA,QACAH,GAAA,YACAC,GAAA,MACAC,EACF,ECHA,CAAA,QAAAG,EAAA,EAAAN,EACA,CAAA,QAAAC,GAAA,QAAAG,GAAA,YAAAF,EAAA,MAAAC,EAAA,EAAAI,GAQAC,GAAAC,EAAAC,EAAA;AAAA;AAAA,IAA4B,CAAA,CAAA,kBAAAC,EAAA,OAAAC,CAAA,IAAAD,GAAAE,GAAAF,GAAAC,CAAA;AAAA;AAAA;AAAA;AAAA,aAG6CX,GAAA;AAAA;AAAA;AAAA,MAIpDa;AAAA;AAAA,IAGf,CAAA,CAAA,UAAAC,KAAAA,GAAAC;AAAAA,QAIFD;AAAA;AAAA,EAKJE,GAAAR,EAAA;AAAA,kBAA8BN,GAAA;AAAA,EAS9Be,GAAAT,EAAA;AAAA,IAAgC,CAAA,CAAA,gBAAAU,EAAA,SAAAC,CAAA,IAAAD,GAAA,CAAAC,GAAAJ;AAAAA,oBAI5BZ,GAAA,QAAA;AAAA;AAAA,EAKJiB,GAAAZ,EAAAa,CAAA;AAAA;AAAA,SAAkCpB,EAAA;AAAA,WAEbA,EAAA;AAAA,EAuCdqB,EAAAC,EAAA,WAAgB,CAAAC,EAAAC,IAAA,CAEnB,KAAA,CAAM,MAAAC,EACJ,OAAAf,EAAA,GACS,gBAAAO,EAAA,GACS,OAAAhC,EAClB,mBAAAyC,EACA,QAAAC,EACA,cAAAC,EACA,SAAAC,EACA,UAAAC,EAAA,SACY,OAAAC,EAAA3B,GAAA,gCACK,GAAA4B,EACjB,UAAAC,EACA,UAAAC,EAAA,CAAA,EACa,GAAAC,CACV,EAAAZ,EAGLa,EAAArD,GAAmB2B,EACjB,IAAA,CAEEiB,GAAAA,EAAA,EACA1C,GAAAA,EAAA,CAAiB,EACnB2C,GAAAA,CACiB,EAGnB,CAAA,UAAAS,EAAA,SAAAC,EAAA,OAAAC,EAAA,EAAAC,GAAA,KAAA,CAA+D,UAAAV,EAC7D,OAAAC,CACA,CAAA,EAEFU,GAAAC,GAAAlB,EAAAY,EAAAE,CAAA,EAEAjD,EAAAA,UAAA,IAAA,CACEgD,EAAAT,GAAA,IAAA,CAAyD,EAAA,CAAAA,CAAA,CAAA,EAG3D,MAAAe,EAAA,CAAyCP,EAAA,OAC5B,EAEbR,GAAmBe,EAAA,KAAAf,CAAA,EAEnBgB,GAAAD,EAAA,IAAA,CACEjC,GAAYiB,GAAAA,EAAA,CAAmB,CAAA,EAGjC,MAAAlB,EAAAoC,GAAAnC,EAAA,GAAA,EAEAoC,GAAA,CAAqB,GAAAC,GAAAf,EAAAC,EAAAC,EAAAC,CAAA,EAC+B,IAAAM,GAC7C,OAAA/B,EACL,kBAAAD,EACA,SAAA,GACU,MAAA,CAAA,GAAAyB,EAAA,MAAA,GAAAK,GAAA,QAAA,EACsC,KAAA,QAC1C,EAGR,OAAA7B,GAAAD,EAAAuC,EAAA1C,GAAA,CAAA,GAAAwC,GAAA,UAAA,EAAA,OAAA,QAAA,SAAA,CAEKrB,GAAAwB,EAAAlC,GAAA,CAAA,SAAA,OAAAU,GAAA,SAAAwB,EAAAC,EAAA,CAAA,eAAA,gBAAA,SAAAzB,CAAA,CAAA,EAAAA,EAAA,EAOCwB,EAAAjC,GAAA,CAAA,SAAA,CAAA,CAAAS,EAAA,gBAAAR,EAAA,SAAAY,EAAA,EAIFZ,GAAAgC,EAEE9B,GAAC,CAAA,KAAAgC,GACO,WAAA,aACK,QAAA,YACH,KAAA,QACH,QAAAzB,EACI,aAAA,MACE,CAAA,CACb,CAAA,CAAA,EAAA,IAGF,CAER,EAEAL,EAAA,YAAA,orEC9KO,MAAA+B,EAAA,CAAA,CAAsB,OAAA1C,EAAA,GAClB,mBAAAgB,EACT,eAAA2B,EACA,SAAAxB,EACA,UAAAyB,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA/C,CAAA,EAEAgD,EAAAC,EAAAA,QACAC,EAAAN,GAAA,GAAAI,YAEAG,EAAA,IAAA,CACEL,EAAA,EAAA,EACA9B,GAAAA,EAAA,CAAyC,EAG3CoC,EAAA,IAAA,CACEN,EAAA,CAAAD,CAAA,EACAF,GAAAA,EAAA,CAAiC,EAGnCU,EAAA3E,SAAA,IAAA,EACAgD,EAAAhD,SAAA,IAAA,EAEA4E,GAAA,CAAA,MAAA,QAAA,EAAA,IAAA,OACET,IACEC,EAAA,EAAA,GACAS,EAAAF,EAAA,UAAA,MAAAE,EAAA,QACF,CAAA,EAGF,MAAAC,EAAA,IAAAV,EAAA,EAAA,EAEAW,EAAAC,EAAAA,SAAA,IAAAvC,EAAA,CAAAwC,EAAAC,IACEC,EAAAA,eAAAF,CAAA,IAAAC,IAAA,EAAAE,EAAA,aAAAH,EAAA,CAG0C,gBAAA,SACjB,gBAAAT,EACA,gBAAAL,EACA,QAAAO,EACR,IAAAC,CACJ,CAAA,EAAAS,EAAA,aAAAH,EAAA,CAE6B,OAAAd,EAC1B,cAAA,CAAAA,EACQ,GAAAK,EACZ,mBAAAC,EACgB,cAAAE,EAAA,QACK,IAAA3B,EACpB,QAAA8B,CACI,CAAA,EACV,EAIT,OAAAjB,EAAAwB,GAAA,CAAA,SAAAN,CAAA,CAAA,CACF,EAEAf,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
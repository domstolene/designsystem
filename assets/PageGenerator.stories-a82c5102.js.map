{"version":3,"file":"PageGenerator.stories-a82c5102.js","sources":["../../../../packages/page-generator/src/tokens/PageGeneratorTokens.tsx","../../../../packages/page-generator/src/styles/ButtonRow.tsx","../../../../packages/page-generator/src/styles/PageGeneratorFlexContainer.tsx","../../../../packages/page-generator/src/styles/SubContainer.tsx","../../../../packages/page-generator/src/types/PageGeneratorSupportedFields.tsx","../../../../packages/page-generator/src/helpers/addFieldToState.tsx","../../../../packages/page-generator/src/helpers/getButtonRow.tsx","../../../../packages/page-generator/src/helpers/getComponent.tsx","../../../../packages/page-generator/src/helpers/isFieldWithValidations.tsx","../../../../packages/page-generator/src/helpers/isMultiValue.tsx","../../../../packages/page-generator/src/helpers/isPageGeneratorRow.tsx","../../../../packages/page-generator/src/helpers/isSectionGeneratorRow.tsx","../../../../packages/page-generator/src/components/PageGenerator.tsx","../../../../packages/page-generator/src/helpers/getStandardRow.tsx","../../../../packages/page-generator/src/components/SectionGenerator.tsx","../../../../packages/page-generator/src/storybook/FormFields.tsx","../../../../packages/page-generator/src/storybook/OtherFields.tsx"],"sourcesContent":["import { ScreenSize } from '@norges-domstoler/dds-components';\nimport { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { spacing: Spacing } = ddsBaseTokens;\n\nexport const PageGeneratorTokens = {\n  columnGaps: {\n    [ScreenSize.XSmall]: Spacing.SizesDdsSpacingLocalX1,\n    [ScreenSize.Small]: Spacing.SizesDdsSpacingLocalX1,\n    [ScreenSize.Medium]: Spacing.SizesDdsSpacingLocalX1,\n    [ScreenSize.Large]: Spacing.SizesDdsSpacingLocalX1,\n    [ScreenSize.XLarge]: Spacing.SizesDdsSpacingLocalX15,\n  },\n  rowGaps: {\n    xs: Spacing.SizesDdsSpacingLocalX1,\n    sm: Spacing.SizesDdsSpacingLocalX1,\n    md: Spacing.SizesDdsSpacingLocalX1,\n    lg: Spacing.SizesDdsSpacingLocalX1,\n    xl: Spacing.SizesDdsSpacingLocalX15,\n  },\n  buttonRow: {\n    marginTop: Spacing.SizesDdsSpacingLocalX1,\n  },\n};\n","import { GridChild } from '@norges-domstoler/dds-components';\nimport styled from 'styled-components';\nimport { PageGeneratorTokens } from '../tokens';\n\nexport const ButtonRow = styled(GridChild)`\n  margin-top: ${PageGeneratorTokens.buttonRow.marginTop};\n`;\n","import styled, { css } from 'styled-components';\nimport { ScreenSize } from '@norges-domstoler/dds-components';\nimport { PageGeneratorTokens } from '../tokens';\n\nexport const PageGeneratorFlexContainer = styled.div<{\n  screenSize: ScreenSize;\n}>`\n  ${({ screenSize }) => css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${PageGeneratorTokens.columnGaps[screenSize]};\n  `}\n`;\n","import {\n  ScreenSize,\n  getLiteralScreenSize,\n} from '@norges-domstoler/dds-components';\nimport styled, { css } from 'styled-components';\nimport { PageGeneratorTokens } from '../tokens';\n\nexport const SubContainer = styled.div<{\n  screenSize: ScreenSize;\n  length: number;\n  breakpoint?: ScreenSize;\n}>`\n  ${({ screenSize, length }) =>\n    length === 2\n      ? css`\n          display: grid;\n        `\n      : css`\n          display: flex;\n          flex-wrap: wrap;\n          gap: ${PageGeneratorTokens.columnGaps[screenSize]};\n        `}\n\n  ${({ screenSize, length, breakpoint = ScreenSize.XSmall }) =>\n    length === 2\n      ? screenSize > breakpoint\n        ? css`\n            grid-auto-flow: column;\n            grid-template-columns: min-content auto;\n            column-gap: ${PageGeneratorTokens.columnGaps[screenSize]};\n          `\n        : css`\n            grid-auto-flow: row;\n            row-gap: ${PageGeneratorTokens.rowGaps[\n              getLiteralScreenSize(screenSize)\n            ]};\n          `\n      : ``}\n\n      ${({ screenSize, length, breakpoint }) =>\n    length === 3\n      ? breakpoint !== undefined && screenSize >= breakpoint\n        ? css`\n            flex-direction: row;\n          `\n        : css`\n            flex-direction: column;\n          `\n      : ``}\n`;\n","export enum PageGeneratorSupportedFields {\n  Button = 'Button',\n  Card = 'Card',\n  Checkbox = 'Checkbox',\n  CheckboxGroup = 'CheckboxGroup',\n  Datepicker = 'Datepicker',\n  DescriptionList = 'DescriptionList',\n  DescriptionListGroup = 'DescriptionListGroup',\n  DescriptionListDesc = 'DescriptionListDesc',\n  DescriptionListTerm = 'DescriptionListTerm',\n  Divider = 'Divider',\n  Drawer = 'Drawer',\n  DrawerGroup = 'DrawerGroup',\n  GlobalMessage = 'GlobalMessage',\n  Heading = 'Heading',\n  HStack = 'HStack',\n  InputMessage = 'InputMessage',\n  Label = 'Label',\n  Link = 'Link',\n  List = 'List',\n  ListItem = 'ListItem',\n  LocalMessage = 'LocalMessage',\n  Paragraph = 'Paragraph',\n  RadioButton = 'RadioButton',\n  RadioButtonGroup = 'RadioButtonGroup',\n  Select = 'Select',\n  Spinner = 'Spinner',\n  TextInput = 'TextInput',\n  ToggleButton = 'ToggleButton',\n  ToggleButtonGroup = 'ToggleButtonGroup',\n  Typography = 'Typography',\n  VisuallyHidden = 'VisuallyHidden',\n  VStack = 'VStack',\n}\n","import {\n  PageGeneratorField,\n  PageGeneratorState,\n  PageGeneratorSupportedFields,\n  PageGeneratorStateOptionTypes,\n} from '../types';\n\nconst FIELD_MISSING_NAME_OR_ID = 'FIELD_MISSING_NAME_OR_ID';\n\nexport const addFieldToState = (\n  field: PageGeneratorField,\n  state: PageGeneratorState<PageGeneratorStateOptionTypes>\n) => {\n  let key = '';\n  switch (field.component) {\n    case PageGeneratorSupportedFields.Checkbox:\n    case PageGeneratorSupportedFields.ToggleButton:\n      key = field.props.name || field.props.id || FIELD_MISSING_NAME_OR_ID;\n      state = {\n        ...state,\n        [key]: field.props.defaultChecked,\n      };\n      return state;\n    case PageGeneratorSupportedFields.CheckboxGroup:\n    case PageGeneratorSupportedFields.ToggleButtonGroup:\n      field.children.forEach(child => {\n        state = addFieldToState(child, state);\n      });\n      return state;\n    case PageGeneratorSupportedFields.RadioButton:\n    case PageGeneratorSupportedFields.RadioButtonGroup:\n      key = field.props.name || field.props.id || FIELD_MISSING_NAME_OR_ID;\n      state = {\n        ...state,\n        [key]: field.props.value,\n      };\n      return state;\n    case PageGeneratorSupportedFields.Select:\n      key = field.name || field.props.id || FIELD_MISSING_NAME_OR_ID;\n      state = {\n        ...state,\n        [key]: field.props.defaultValue,\n      };\n      return state;\n    case PageGeneratorSupportedFields.Datepicker:\n    case PageGeneratorSupportedFields.TextInput:\n      key = field.props.name || field.props.id || FIELD_MISSING_NAME_OR_ID;\n      state = {\n        ...state,\n        [key]: field.props.defaultValue,\n      };\n      return state;\n  }\n  return state;\n};\n","import { ScreenSize } from '@norges-domstoler/dds-components';\nimport { ButtonRow, PageGeneratorFlexContainer } from '../styles';\nimport { PageGeneratorRow } from '../types';\nimport { MultiValue, SingleValue } from 'react-select';\nimport { ChangeEvent } from 'react';\nimport { getComponent } from '.';\n\ntype T = HTMLInputElement & Record<string, never>;\n\nexport const getButtonRow = (\n  index: number,\n  obj: PageGeneratorRow,\n  fieldOnChange: (event: ChangeEvent<T>) => void,\n  selectOnChange: (\n    chosen:\n      | SingleValue<Record<string, unknown>>\n      | MultiValue<Record<string, unknown>>,\n    name: string\n  ) => void,\n  screenSize: ScreenSize\n) => {\n  return (\n    <ButtonRow columnsOccupied=\"all\" key={index}>\n      <PageGeneratorFlexContainer screenSize={screenSize}>\n        {obj.fields.map((field, groupedIndex) => {\n          return (\n            !field.hide &&\n            getComponent(\n              field,\n              groupedIndex,\n              fieldOnChange,\n              selectOnChange,\n              screenSize\n            )\n          );\n        })}\n      </PageGeneratorFlexContainer>\n    </ButtonRow>\n  );\n};\n","import {\n  Button,\n  Card,\n  Checkbox,\n  CheckboxGroup,\n  Datepicker,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListDesc,\n  DescriptionListTerm,\n  Divider,\n  Drawer,\n  DrawerGroup,\n  GlobalMessage,\n  InputMessage,\n  List,\n  ListItem,\n  LocalMessage,\n  RadioButton,\n  ScreenSize,\n  RadioButtonGroup,\n  Select,\n  Spinner,\n  TextInput,\n  ToggleButton,\n  ToggleButtonGroup,\n  VisuallyHidden,\n  HStack,\n  VStack,\n} from '@norges-domstoler/dds-components';\nimport {\n  Heading,\n  Label,\n  Link,\n  Paragraph,\n  Typography,\n} from '@norges-domstoler/dds-typography';\nimport { PageGeneratorField, PageGeneratorSupportedFields } from '../types';\nimport { MultiValue, SingleValue } from 'react-select';\nimport { FocusEvent, ChangeEvent } from 'react';\nimport { SectionGenerator } from '../components';\n\ntype T = HTMLInputElement & Record<string, never>;\n\nexport const getComponent = (\n  field: PageGeneratorField,\n  index: number,\n  fieldOnChange: (event: ChangeEvent<T>) => void,\n  selectOnChange: (\n    chosen:\n      | SingleValue<Record<string, unknown>>\n      | MultiValue<Record<string, unknown>>,\n    name: string\n  ) => void,\n  screenSize: ScreenSize,\n  onBlur?: <T extends HTMLInputElement>(event: FocusEvent<T>) => void\n) => {\n  switch (field.component) {\n    case PageGeneratorSupportedFields.Button:\n      return <Button {...field.props} key={index} />;\n    case PageGeneratorSupportedFields.Card:\n      if (field.innerHTML) {\n        return (\n          <Card {...field.props} key={index}>\n            {field.innerHTML}\n          </Card>\n        );\n      } else if (field.children) {\n        <Card {...field.props} key={index}>\n          <SectionGenerator as=\"fragment\" fields={field.children} />\n        </Card>;\n      }\n      return <></>;\n    case PageGeneratorSupportedFields.Checkbox:\n      return <Checkbox {...field.props} key={index} onChange={fieldOnChange} />;\n    case PageGeneratorSupportedFields.CheckboxGroup:\n      return (\n        <CheckboxGroup {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </CheckboxGroup>\n      );\n    case PageGeneratorSupportedFields.Datepicker:\n      return (\n        <Datepicker {...field.props} key={index} onChange={fieldOnChange} />\n      );\n    case PageGeneratorSupportedFields.DescriptionList:\n      return (\n        <DescriptionList {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </DescriptionList>\n      );\n    case PageGeneratorSupportedFields.DescriptionListGroup:\n      return (\n        <DescriptionListGroup {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </DescriptionListGroup>\n      );\n    case PageGeneratorSupportedFields.DescriptionListDesc:\n      return (\n        <DescriptionListDesc {...field.props} key={index}>\n          {field.innerHTML}\n        </DescriptionListDesc>\n      );\n    case PageGeneratorSupportedFields.DescriptionListTerm:\n      return (\n        <DescriptionListTerm {...field.props} key={index}>\n          {field.innerHTML}\n        </DescriptionListTerm>\n      );\n    case PageGeneratorSupportedFields.Divider:\n      return <Divider {...field.props} key={index} />;\n    case PageGeneratorSupportedFields.Drawer:\n      return (\n        <Drawer {...field.props} key={index}>\n          {field.innerHTML}\n        </Drawer>\n      );\n    case PageGeneratorSupportedFields.DrawerGroup:\n      return (\n        <DrawerGroup {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </DrawerGroup>\n      );\n    case PageGeneratorSupportedFields.GlobalMessage:\n      return (\n        <GlobalMessage {...field.props} key={index}>\n          {field.innerHTML}\n        </GlobalMessage>\n      );\n    case PageGeneratorSupportedFields.Heading:\n      return (\n        <Heading {...field.props} key={index}>\n          {field.innerHTML}\n        </Heading>\n      );\n    case PageGeneratorSupportedFields.HStack:\n      return (\n        <HStack {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </HStack>\n      );\n    case PageGeneratorSupportedFields.InputMessage:\n      return <InputMessage {...field.props} key={index} />;\n    case PageGeneratorSupportedFields.Label:\n      return (\n        <Label {...field.props} key={index}>\n          {field.innerHTML}\n        </Label>\n      );\n    case PageGeneratorSupportedFields.Link:\n      return (\n        <Link {...field.props} key={index}>\n          {field.innerHTML}\n        </Link>\n      );\n    case PageGeneratorSupportedFields.List:\n      return (\n        <List {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </List>\n      );\n    case PageGeneratorSupportedFields.ListItem:\n      return (\n        <ListItem {...field.props} key={index}>\n          {field.innerHTML}\n        </ListItem>\n      );\n    case PageGeneratorSupportedFields.LocalMessage:\n      return (\n        <LocalMessage {...field.props} key={index}>\n          {field.innerHTML}\n        </LocalMessage>\n      );\n    case PageGeneratorSupportedFields.Paragraph:\n      return (\n        <Paragraph {...field.props} key={index}>\n          {field.innerHTML}\n        </Paragraph>\n      );\n    case PageGeneratorSupportedFields.RadioButton:\n      return (\n        <RadioButton {...field.props} key={index} onChange={fieldOnChange} />\n      );\n    case PageGeneratorSupportedFields.RadioButtonGroup:\n      field.props.direction = screenSize > ScreenSize.XSmall ? 'row' : 'column';\n      return (\n        <RadioButtonGroup {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </RadioButtonGroup>\n      );\n    case PageGeneratorSupportedFields.Select:\n      return (\n        <Select\n          {...field.props}\n          key={index}\n          onChange={option => selectOnChange(option, field.name)}\n        />\n      );\n    case PageGeneratorSupportedFields.Spinner:\n      return <Spinner {...field.props} key={index} />;\n    case PageGeneratorSupportedFields.TextInput:\n      return (\n        <TextInput\n          {...field.props}\n          key={index}\n          onChange={fieldOnChange}\n          onBlur={onBlur}\n        />\n      );\n    case PageGeneratorSupportedFields.ToggleButton:\n      return (\n        <ToggleButton {...field.props} key={index} onChange={fieldOnChange} />\n      );\n    case PageGeneratorSupportedFields.ToggleButtonGroup:\n      return (\n        <ToggleButtonGroup {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </ToggleButtonGroup>\n      );\n    case PageGeneratorSupportedFields.Typography:\n      return (\n        <Typography {...field.props} key={index}>\n          {field.innerHTML}\n        </Typography>\n      );\n    case PageGeneratorSupportedFields.VisuallyHidden:\n      return (\n        <VisuallyHidden {...field.props} key={index}>\n          {field.innerHTML}\n        </VisuallyHidden>\n      );\n    case PageGeneratorSupportedFields.VStack:\n      return (\n        <VStack {...field.props} key={index}>\n          {field.children.map((child, childIndex) => {\n            return (\n              !child.hide &&\n              getComponent(\n                child,\n                childIndex,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          })}\n        </VStack>\n      );\n    default:\n      return <></>;\n  }\n};\n","import {\n  PageGeneratorField,\n  PageGeneratorRow,\n  FieldWithValidations,\n} from '../types';\n\nexport const isFieldWithValidations = (\n  obj: PageGeneratorField | PageGeneratorRow\n): obj is FieldWithValidations => {\n  return obj && (obj as FieldWithValidations).validations !== undefined;\n};\n","import { MultiValue, SingleValue } from 'react-select';\n\nexport const isMultiValue = (\n  obj:\n    | SingleValue<Record<string, unknown>>\n    | MultiValue<Record<string, unknown>>\n): obj is MultiValue<Record<string, unknown>> => {\n  return (obj as MultiValue<Record<string, unknown>>)?.values !== undefined;\n};\n","import { PageGeneratorField, PageGeneratorRow } from '../types';\n\nexport const isPageGeneratorRow = (\n  obj: PageGeneratorField | PageGeneratorRow\n): obj is PageGeneratorRow => {\n  return (obj as PageGeneratorRow).rowType !== undefined;\n};\n","import { PageGeneratorField, SectionGeneratorRow } from '../types';\n\nexport const isSectionGeneratorRow = (\n  obj: PageGeneratorField | SectionGeneratorRow\n): obj is SectionGeneratorRow => {\n  return (obj as SectionGeneratorRow).rowType !== undefined;\n};\n","import { ChangeEvent, FocusEvent, useEffect, useState } from 'react';\nimport { MultiValue, SingleValue } from 'react-select';\nimport {\n  getBaseHTMLProps,\n  Grid,\n  GridChild,\n  useScreenSize,\n} from '@norges-domstoler/dds-components';\nimport {\n  PageGeneratorField,\n  PageGeneratorProps,\n  PageGeneratorRow,\n  PageGeneratorState,\n  PageGeneratorStateOptionTypes,\n  PageGeneratorValidation,\n} from '../types';\nimport { SubContainer } from '../styles';\nimport { PageGeneratorTokens } from '../tokens';\nimport {\n  addFieldToState,\n  getButtonRow,\n  getComponent,\n  isFieldWithValidations,\n  isMultiValue,\n  isPageGeneratorRow,\n} from '../helpers';\n\n/**\n * Generer komponenter fra @norges-domstoler/dds-components i et Grid view, basert på `fields` propertien. PageGenerator bruker Grid-komponenten fra @norges-domstoler/dds-components, slik at den håndterer alt av riktige marginer, mellomrom og responsivt design.\n * @param props - `fields` inneholder felter eller rader med felter. `stateOnChange` er callback for statehåndtering. `as` setter HTML-element rundt hele PageGenerator.\n */\nexport const PageGenerator = (props: PageGeneratorProps) => {\n  const { fields = [], stateOnChange, as } = props;\n  const { id, className, htmlProps, ...rest } = props;\n\n  const [state, setState] = useState({});\n\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    let state: PageGeneratorState<PageGeneratorStateOptionTypes> = {};\n    fields.forEach((field: PageGeneratorField | PageGeneratorRow) => {\n      if (isPageGeneratorRow(field)) {\n        field.fields.forEach((field: PageGeneratorField) => {\n          state = addFieldToState(field, state);\n        });\n      } else {\n        state = addFieldToState(field, state);\n      }\n    });\n    setState(state);\n  }, []);\n\n  useEffect(() => {\n    if (stateOnChange) {\n      stateOnChange(state, errors);\n    }\n  }, [state, errors]);\n\n  const setErrorMessage = (index: number, errorMessage: string) => {\n    const field = fields[index];\n    if (isFieldWithValidations(field)) {\n      fields[index] = {\n        ...field,\n        props: {\n          ...field.props,\n          errorMessage,\n        },\n      };\n    }\n  };\n\n  const getFieldIndex = (name: string) => {\n    return fields.findIndex(\n      (f: PageGeneratorField | PageGeneratorRow) =>\n        isFieldWithValidations(f) && f.props && f.props.name === name\n    );\n  };\n\n  const updateErrors = (\n    fieldErrors: PageGeneratorValidation[],\n    name: string,\n    value: string\n  ) => {\n    const newErrors = {\n      ...errors,\n      [name]: {\n        value,\n        errors: fieldErrors,\n      },\n    };\n    setErrors(newErrors);\n  };\n\n  const validateFields = (name: string, value: string) => {\n    const index = getFieldIndex(name);\n    const field = fields[index];\n    if (isFieldWithValidations(field)) {\n      const fieldErrors =\n        (field.validations &&\n          field.validations.filter(\n            (v: PageGeneratorValidation) => !v.rule(value)\n          )) ||\n        [];\n      updateErrors(fieldErrors, name, value);\n      setErrorMessage(\n        index,\n        fieldErrors.length > 0 ? fieldErrors[0].message : ''\n      );\n    }\n  };\n\n  const onBlur = <T extends HTMLInputElement>(event: FocusEvent<T>) => {\n    const { name, value } = event.target;\n    validateFields(name, value);\n  };\n\n  const fieldOnChange = <T extends HTMLInputElement>(event: ChangeEvent<T>) => {\n    const { id, name, value, checked } = event.target;\n    setErrorMessage(getFieldIndex(name), ''); //clear errormessage when user types\n    const newState = {\n      ...state,\n      [name || id]: event.target.type === 'checkbox' ? checked : value,\n    };\n    setState(newState);\n  };\n\n  const selectOnChange = (\n    chosen:\n      | SingleValue<Record<string, unknown>>\n      | MultiValue<Record<string, unknown>>,\n    name: string\n  ) => {\n    let value = null;\n    if (isMultiValue(chosen)) {\n      value = Array.isArray(chosen) ? chosen : null;\n    } else {\n      value = chosen || null;\n    }\n    const newState = {\n      ...state,\n      [name]: value,\n    };\n    setState(newState);\n  };\n\n  const screenSize = useScreenSize();\n\n  return (\n    <Grid\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n      as={as}\n      rowGap={PageGeneratorTokens.rowGaps}\n    >\n      {fields.map((obj, index) => {\n        if (isPageGeneratorRow(obj)) {\n          if (obj.rowType === 'button') {\n            return (\n              !obj.hide &&\n              getButtonRow(\n                index,\n                obj,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          } else {\n            return (\n              !obj.hide && (\n                <GridChild columnsOccupied=\"all\" key={index}>\n                  <SubContainer\n                    screenSize={screenSize}\n                    length={obj.fields.length}\n                    breakpoint={obj.breakpoint}\n                  >\n                    {obj.fields.map((field, groupedIndex) => {\n                      return (\n                        !field.hide &&\n                        getComponent(\n                          field,\n                          groupedIndex,\n                          fieldOnChange,\n                          selectOnChange,\n                          screenSize\n                        )\n                      );\n                    })}\n                  </SubContainer>\n                </GridChild>\n              )\n            );\n          }\n        } else {\n          return (\n            !obj.hide && (\n              <GridChild columnsOccupied=\"all\" key={index}>\n                {getComponent(\n                  obj,\n                  index,\n                  fieldOnChange,\n                  selectOnChange,\n                  screenSize,\n                  onBlur\n                )}\n              </GridChild>\n            )\n          );\n        }\n      })}\n    </Grid>\n  );\n};\n\nPageGenerator.displayName = 'PageGenerator';\n","import { getBaseHTMLProps, ScreenSize } from '@norges-domstoler/dds-components';\nimport { SectionGeneratorRow } from '../types';\nimport { MultiValue, SingleValue } from 'react-select';\nimport { ChangeEvent } from 'react';\nimport { getComponent } from '.';\nimport React from 'react';\n\ntype T = HTMLInputElement & Record<string, never>;\n\nconst Row = (props: SectionGeneratorRow) => {\n  const { id, className, htmlProps, ...rest } = props;\n  const restPartial = { ...rest } as Partial<SectionGeneratorRow>;\n  delete restPartial.rowType;\n\n  if (props.as === 'div') {\n    return (\n      <div {...getBaseHTMLProps(id, className, htmlProps, restPartial)}>\n        {props.children}\n      </div>\n    );\n  } else {\n    return <React.Fragment>{props.children}</React.Fragment>;\n  }\n};\n\nexport const getStandardRow = (\n  index: number,\n  obj: SectionGeneratorRow,\n  fieldOnChange: (event: ChangeEvent<T>) => void,\n  selectOnChange: (\n    chosen:\n      | SingleValue<Record<string, unknown>>\n      | MultiValue<Record<string, unknown>>,\n    name: string\n  ) => void,\n  screenSize: ScreenSize\n) => {\n  return (\n    <Row {...obj} key={index}>\n      {obj.fields.map((field, groupedIndex) => {\n        return (\n          !field.hide &&\n          getComponent(\n            field,\n            groupedIndex,\n            fieldOnChange,\n            selectOnChange,\n            screenSize\n          )\n        );\n      })}\n    </Row>\n  );\n};\n","import { ChangeEvent, useEffect, useState } from 'react';\nimport { MultiValue, SingleValue } from 'react-select';\nimport {\n  getBaseHTMLProps,\n  useScreenSize,\n} from '@norges-domstoler/dds-components';\nimport {\n  PageGeneratorField,\n  PageGeneratorState,\n  PageGeneratorStateOptionTypes,\n  SectionGeneratorProps,\n  SectionGeneratorRow,\n} from '../types';\nimport React from 'react';\nimport {\n  addFieldToState,\n  getButtonRow,\n  getComponent,\n  isMultiValue,\n  isSectionGeneratorRow,\n} from '../helpers';\nimport { getStandardRow } from '../helpers/getStandardRow';\n\n/**\n * Generer komponenter fra @norges-domstoler/dds-components, basert på `fields` propertien. SectionGenerator legger på en wrapper, basert på `as` propertien.\n * @param props - `fields` inneholder felter eller rader med felter. `stateOnChange` er callback for statehåndtering. `as` setter HTML-element rundt hele SectionGenerator.\n */\nexport const SectionGenerator = (props: SectionGeneratorProps) => {\n  const { fields = [], stateOnChange, as } = props;\n  const { id, className, htmlProps, ...rest } = props;\n\n  const [myState, setState] = useState({});\n\n  useEffect(() => {\n    let state: PageGeneratorState<PageGeneratorStateOptionTypes> = {};\n    fields.forEach((field: PageGeneratorField | SectionGeneratorRow) => {\n      if (isSectionGeneratorRow(field)) {\n        field.fields.forEach((field: PageGeneratorField) => {\n          state = addFieldToState(field, state);\n        });\n      } else {\n        state = addFieldToState(field, state);\n      }\n    });\n    setState(state);\n  }, []);\n\n  useEffect(() => {\n    if (stateOnChange) {\n      stateOnChange(myState);\n    }\n  }, [myState]);\n\n  const fieldOnChange = <T extends HTMLInputElement>(event: ChangeEvent<T>) => {\n    const { id, name, value, checked } = event.target;\n    const newState = {\n      ...myState,\n      [name || id]: event.target.type === 'checkbox' ? checked : value,\n    };\n    setState(newState);\n  };\n\n  const selectOnChange = (\n    chosen:\n      | SingleValue<Record<string, unknown>>\n      | MultiValue<Record<string, unknown>>,\n    name: string\n  ) => {\n    let value = null;\n    if (isMultiValue(chosen)) {\n      value = Array.isArray(chosen) ? chosen : null;\n    } else {\n      value = chosen || null;\n    }\n    const newState = {\n      ...myState,\n      [name]: value,\n    };\n    setState(newState);\n  };\n\n  const screenSize = useScreenSize();\n\n  const Parent = (props: { children: (false | JSX.Element)[] }) => {\n    if (as === 'div') {\n      return (\n        <div {...getBaseHTMLProps(id, className, htmlProps, rest)}>\n          {props.children}\n        </div>\n      );\n    } else if (as === 'form') {\n      return (\n        <form {...getBaseHTMLProps(id, className, htmlProps, rest)}>\n          {props.children}\n        </form>\n      );\n    } else if (as === 'fragment') {\n      return <React.Fragment>{props.children}</React.Fragment>;\n    } else {\n      return <></>;\n    }\n  };\n\n  return (\n    <Parent>\n      {fields.map((obj, index) => {\n        if (isSectionGeneratorRow(obj)) {\n          if (obj.rowType === 'button') {\n            return (\n              !obj.hide &&\n              getButtonRow(\n                index,\n                obj,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          } else {\n            return (\n              !obj.hide &&\n              getStandardRow(\n                index,\n                obj,\n                fieldOnChange,\n                selectOnChange,\n                screenSize\n              )\n            );\n          }\n        } else {\n          return (\n            !obj.hide && (\n              <React.Fragment key={index}>\n                {getComponent(\n                  obj,\n                  index,\n                  fieldOnChange,\n                  selectOnChange,\n                  screenSize\n                )}\n              </React.Fragment>\n            )\n          );\n        }\n      })}\n    </Parent>\n  );\n};\n\nSectionGenerator.displayName = 'SectionGenerator';\n","import {\n  PageGeneratorField,\n  PageGeneratorRow,\n  PageGeneratorSupportedFields,\n} from '../types';\n\nexport const FormFields: (PageGeneratorField | PageGeneratorRow)[] = [\n  {\n    component: PageGeneratorSupportedFields.Heading,\n    props: {\n      level: 1,\n    },\n    innerHTML: 'Skjema',\n  },\n  {\n    component: PageGeneratorSupportedFields.Heading,\n    props: {\n      level: 2,\n    },\n    innerHTML: 'Personinformasjon',\n  },\n  {\n    component: PageGeneratorSupportedFields.TextInput,\n    props: {\n      label: 'Fødselsnummer',\n      name: 'nin',\n    },\n    validations: [\n      {\n        message: 'Påkrevd',\n        rule: (value: string) => {\n          return value.length > 0;\n        },\n      },\n      {\n        message: 'Må være omg',\n        rule: (value: string) => {\n          return value === 'omg';\n        },\n      },\n    ],\n  },\n  {\n    rowType: 'standard',\n    fields: [\n      {\n        component: PageGeneratorSupportedFields.Datepicker,\n        props: {\n          label: 'Fødselsdato',\n          name: 'dateOfBirth',\n          width: '320px',\n        },\n      },\n      {\n        component: PageGeneratorSupportedFields.Select,\n        props: {\n          label: 'Status',\n          name: 'status',\n          options: [\n            { label: 'Glad', value: 'glad' },\n            { label: 'Superglad', value: 'superglad' },\n          ],\n        },\n        name: 'status',\n      },\n    ],\n  },\n  {\n    component: PageGeneratorSupportedFields.Heading,\n    props: {\n      level: 3,\n    },\n    innerHTML: 'Kontaktinformasjon',\n  },\n  {\n    component: PageGeneratorSupportedFields.TextInput,\n    props: {\n      label: 'E-post',\n      name: 'email',\n    },\n  },\n  {\n    rowType: 'standard',\n    fields: [\n      {\n        component: PageGeneratorSupportedFields.TextInput,\n        props: {\n          label: 'Landkode',\n          width: '90px',\n          name: 'countryCode',\n        },\n      },\n      {\n        component: PageGeneratorSupportedFields.TextInput,\n        props: {\n          label: 'Telefon',\n          name: 'phoneNumber',\n        },\n      },\n    ],\n  },\n  {\n    component: PageGeneratorSupportedFields.Heading,\n    props: {\n      level: 4,\n    },\n    innerHTML: 'Annet',\n  },\n  {\n    component: PageGeneratorSupportedFields.CheckboxGroup,\n    props: {\n      label: 'Kvalifikasjoner',\n    },\n    children: [\n      {\n        component: PageGeneratorSupportedFields.Checkbox,\n        props: {\n          label: 'Glad',\n          value: 'glad',\n        },\n      },\n      {\n        component: PageGeneratorSupportedFields.Checkbox,\n        props: {\n          label: 'Superglad',\n          value: 'superglad',\n        },\n      },\n    ],\n  },\n  {\n    component: PageGeneratorSupportedFields.RadioButtonGroup,\n    props: {\n      label: 'Kjønn',\n      name: 'gender',\n    },\n    children: [\n      {\n        component: PageGeneratorSupportedFields.RadioButton,\n        props: {\n          label: 'Mann',\n          value: 'mann',\n          name: 'gender',\n        },\n      },\n      {\n        component: PageGeneratorSupportedFields.RadioButton,\n        props: {\n          label: 'Kvinne',\n          value: 'kvinne',\n          name: 'gender',\n        },\n      },\n    ],\n  },\n  {\n    rowType: 'button',\n    fields: [\n      {\n        component: PageGeneratorSupportedFields.Button,\n        props: {\n          label: 'Lagre',\n          type: 'submit',\n        },\n      },\n      {\n        component: PageGeneratorSupportedFields.Button,\n        props: {\n          label: 'Superlagre',\n          purpose: 'secondary',\n          onClick: event => {\n            event.preventDefault();\n            console.log('Du superlagret!');\n          },\n        },\n      },\n    ],\n  },\n];\n","import {\n  DescriptionListGroupField,\n  PageGeneratorField,\n  PageGeneratorRow,\n  PageGeneratorSupportedFields,\n} from '../types';\n\n// type FieldWithChildren =\n//   | ListField\n\n// type FieldWithoutChildren =\n//   | ListItemField\n\nconst getHeading = (innerHTML: string): PageGeneratorField => {\n  return {\n    component: PageGeneratorSupportedFields.Heading,\n    props: {\n      level: 5,\n      withMargins: true,\n    },\n    innerHTML,\n  };\n};\n\nconst getDescriptionList = (\n  children: DescriptionListGroupField[],\n  direction?: 'row' | 'column'\n): PageGeneratorField => {\n  return {\n    component: PageGeneratorSupportedFields.DescriptionList,\n    props: {\n      direction,\n    },\n    children,\n  };\n};\n\nconst getDescriptionListGroup = (\n  term: string,\n  desc: string | JSX.Element\n): DescriptionListGroupField => {\n  return {\n    component: PageGeneratorSupportedFields.DescriptionListGroup,\n    props: {\n      margin: '0',\n    },\n    children: [\n      {\n        component: PageGeneratorSupportedFields.DescriptionListTerm,\n        props: {},\n        innerHTML: term,\n      },\n      {\n        component: PageGeneratorSupportedFields.DescriptionListDesc,\n        props: {},\n        innerHTML: desc,\n      },\n    ],\n  };\n};\n\nexport const OtherFields = (): (PageGeneratorField | PageGeneratorRow)[] => {\n  return [\n    getHeading('DescriptionList - direction row'),\n    getDescriptionList(\n      [\n        getDescriptionListGroup('Term1', 'Desc1'),\n        getDescriptionListGroup('Term2', 'Desc2'),\n        getDescriptionListGroup('Term3', 'Desc3'),\n      ],\n      'row'\n    ),\n    getHeading('DescriptionList - direction column'),\n    getDescriptionList(\n      [\n        getDescriptionListGroup('Term1', 'Desc1'),\n        getDescriptionListGroup('Term2', 'Desc2'),\n        getDescriptionListGroup('Term3', 'Desc3'),\n      ],\n      'column'\n    ),\n    {\n      component: PageGeneratorSupportedFields.Card,\n      props: {\n        cardType: 'info',\n        color: 'strokeLight',\n      },\n      innerHTML: 'Dette er et Card',\n    },\n    {\n      component: PageGeneratorSupportedFields.DrawerGroup,\n      props: {\n        children: <></>,\n      },\n      children: [\n        {\n          component: PageGeneratorSupportedFields.Button,\n          props: {\n            purpose: 'secondary',\n            label: 'Trigger Drawer',\n          },\n        },\n        {\n          component: PageGeneratorSupportedFields.Drawer,\n          props: {\n            header: 'Rediger avdøde',\n          },\n          innerHTML: 'Dette er en Drawer',\n        },\n      ],\n    },\n    {\n      component: PageGeneratorSupportedFields.HStack,\n      props: {},\n      children: [\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i HStack',\n        },\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i HStack',\n        },\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i HStack',\n        },\n      ],\n    },\n    {\n      component: PageGeneratorSupportedFields.VStack,\n      props: {},\n      children: [\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i VStack',\n        },\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i VStack',\n        },\n        {\n          component: PageGeneratorSupportedFields.LocalMessage,\n          props: {},\n          innerHTML: 'Element i VStack',\n        },\n      ],\n    },\n    {\n      component: PageGeneratorSupportedFields.Divider,\n      props: {},\n    },\n    {\n      component: PageGeneratorSupportedFields.InputMessage,\n      props: {\n        message: 'Dette er en InputMessage',\n        messageType: 'error',\n      },\n    },\n    {\n      component: PageGeneratorSupportedFields.Label,\n      props: {},\n      innerHTML: 'Dette er en Label',\n    },\n    {\n      component: PageGeneratorSupportedFields.Link,\n      props: {\n        href: '',\n      },\n      innerHTML: 'Dette er en Link',\n    },\n    {\n      component: PageGeneratorSupportedFields.Paragraph,\n      props: {},\n      innerHTML: 'Dette er en Paragraph',\n    },\n    {\n      component: PageGeneratorSupportedFields.Spinner,\n      props: {},\n    },\n    {\n      component: PageGeneratorSupportedFields.Typography,\n      props: {},\n      innerHTML: 'Dette er en Typography',\n    },\n    {\n      component: PageGeneratorSupportedFields.VisuallyHidden,\n      props: {\n        as: 'div',\n      },\n      innerHTML: 'Dette er en VisuallyHidden',\n    },\n    {\n      component: PageGeneratorSupportedFields.ToggleButtonGroup,\n      props: {\n        label: 'Dette er ToggleButtonGroup',\n      },\n      children: [\n        {\n          component: PageGeneratorSupportedFields.ToggleButton,\n          props: {\n            label: 'ToggleButton 1',\n          },\n        },\n        {\n          component: PageGeneratorSupportedFields.ToggleButton,\n          props: {\n            label: 'ToggleButton 2',\n          },\n        },\n      ],\n    },\n    {\n      component: PageGeneratorSupportedFields.List,\n      children: [\n        {\n          component: PageGeneratorSupportedFields.ListItem,\n          innerHTML: 'Item 1',\n        },\n        {\n          component: PageGeneratorSupportedFields.ListItem,\n          innerHTML: 'Item 2',\n        },\n      ],\n    },\n  ];\n};\n"],"names":["Spacing","ddsBaseTokens","PageGeneratorTokens","ScreenSize","ButtonRow","styled","GridChild","PageGeneratorFlexContainer","screenSize","css","SubContainer","length","breakpoint","getLiteralScreenSize","PageGeneratorSupportedFields","FIELD_MISSING_NAME_OR_ID","addFieldToState","field","state","key","child","getButtonRow","index","obj","fieldOnChange","selectOnChange","jsx","groupedIndex","getComponent","onBlur","Button","createElement","Card","Fragment","Checkbox","CheckboxGroup","childIndex","Datepicker","DescriptionList","DescriptionListGroup","DescriptionListDesc","DescriptionListTerm","Divider","Drawer","DrawerGroup","GlobalMessage","Heading","HStack","InputMessage","Label","Link","List","ListItem","LocalMessage","Paragraph","RadioButton","RadioButtonGroup","Select","option","Spinner","TextInput","ToggleButton","ToggleButtonGroup","Typography","VisuallyHidden","VStack","isFieldWithValidations","isMultiValue","isPageGeneratorRow","isSectionGeneratorRow","PageGenerator","props","fields","stateOnChange","as","id","className","htmlProps","rest","setState","useState","errors","setErrors","useEffect","setErrorMessage","errorMessage","getFieldIndex","name","f","updateErrors","fieldErrors","value","newErrors","validateFields","v","event","checked","newState","chosen","useScreenSize","Grid","getBaseHTMLProps","Row","restPartial","React","getStandardRow","SectionGenerator","myState","FormFields","getHeading","innerHTML","getDescriptionList","children","direction","getDescriptionListGroup","term","desc","OtherFields"],"mappings":"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,EACA,CACE,QAAS,WACT,OAAQ,CACN,CACE,UAAWA,EAA6B,UACxC,MAAO,CACL,MAAO,WACP,MAAO,OACP,KAAM,aACR,CACF,EACA,CACE,UAAWA,EAA6B,UACxC,MAAO,CACL,MAAO,UACP,KAAM,aACR,CACF,CACF,CACF,EACA,CACE,UAAWA,EAA6B,QACxC,MAAO,CACL,MAAO,CACT,EACA,UAAW,OACb,EACA,CACE,UAAWA,EAA6B,cACxC,MAAO,CACL,MAAO,iBACT,EACA,SAAU,CACR,CACE,UAAWA,EAA6B,SACxC,MAAO,CACL,MAAO,OACP,MAAO,MACT,CACF,EACA,CACE,UAAWA,EAA6B,SACxC,MAAO,CACL,MAAO,YACP,MAAO,WACT,CACF,CACF,CACF,EACA,CACE,UAAWA,EAA6B,iBACxC,MAAO,CACL,MAAO,QACP,KAAM,QACR,EACA,SAAU,CACR,CACE,UAAWA,EAA6B,YACxC,MAAO,CACL,MAAO,OACP,MAAO,OACP,KAAM,QACR,CACF,EACA,CACE,UAAWA,EAA6B,YACxC,MAAO,CACL,MAAO,SACP,MAAO,SACP,KAAM,QACR,CACF,CACF,CACF,EACA,CACE,QAAS,SACT,OAAQ,CACN,CACE,UAAWA,EAA6B,OACxC,MAAO,CACL,MAAO,QACP,KAAM,QACR,CACF,EACA,CACE,UAAWA,EAA6B,OACxC,MAAO,CACL,MAAO,aACP,QAAS,YACT,QAAkBiF,GAAA,CAChBA,EAAM,eAAe,EACrB,QAAQ,IAAI,iBAAiB,CAC/B,CACF,CACF,CACF,CACF,CACF,ECrKMc,EAAcC,IACX,CACL,UAAWhG,EAA6B,QACxC,MAAO,CACL,MAAO,EACP,YAAa,EACf,EACA,UAAAgG,CAAA,GAIEC,EAAqB,CACzBC,EACAC,KAEO,CACL,UAAWnG,EAA6B,gBACxC,MAAO,CACL,UAAAmG,CACF,EACA,SAAAD,CAAA,GAIEE,EAA0B,CAC9BC,EACAC,KAEO,CACL,UAAWtG,EAA6B,qBACxC,MAAO,CACL,OAAQ,GACV,EACA,SAAU,CACR,CACE,UAAWA,EAA6B,oBACxC,MAAO,CAAC,EACR,UAAWqG,CACb,EACA,CACE,UAAWrG,EAA6B,oBACxC,MAAO,CAAC,EACR,UAAWsG,CACb,CACF,CAAA,GAISC,GAAc,IAClB,CACLR,EAAW,iCAAiC,EAC5CE,EACE,CACEG,EAAwB,QAAS,OAAO,EACxCA,EAAwB,QAAS,OAAO,EACxCA,EAAwB,QAAS,OAAO,CAC1C,EACA,KACF,EACAL,EAAW,oCAAoC,EAC/CE,EACE,CACEG,EAAwB,QAAS,OAAO,EACxCA,EAAwB,QAAS,OAAO,EACxCA,EAAwB,QAAS,OAAO,CAC1C,EACA,QACF,EACA,CACE,UAAWpG,EAA6B,KACxC,MAAO,CACL,SAAU,OACV,MAAO,aACT,EACA,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,YACxC,MAAO,CACL,SAAYY,EAAAO,EAAA,EAAA,CACd,EACA,SAAU,CACR,CACE,UAAWnB,EAA6B,OACxC,MAAO,CACL,QAAS,YACT,MAAO,gBACT,CACF,EACA,CACE,UAAWA,EAA6B,OACxC,MAAO,CACL,OAAQ,gBACV,EACA,UAAW,oBACb,CACF,CACF,EACA,CACE,UAAWA,EAA6B,OACxC,MAAO,CAAC,EACR,SAAU,CACR,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,CACF,CACF,EACA,CACE,UAAWA,EAA6B,OACxC,MAAO,CAAC,EACR,SAAU,CACR,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CAAC,EACR,UAAW,kBACb,CACF,CACF,EACA,CACE,UAAWA,EAA6B,QACxC,MAAO,CAAC,CACV,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CACL,QAAS,2BACT,YAAa,OACf,CACF,EACA,CACE,UAAWA,EAA6B,MACxC,MAAO,CAAC,EACR,UAAW,mBACb,EACA,CACE,UAAWA,EAA6B,KACxC,MAAO,CACL,KAAM,EACR,EACA,UAAW,kBACb,EACA,CACE,UAAWA,EAA6B,UACxC,MAAO,CAAC,EACR,UAAW,uBACb,EACA,CACE,UAAWA,EAA6B,QACxC,MAAO,CAAC,CACV,EACA,CACE,UAAWA,EAA6B,WACxC,MAAO,CAAC,EACR,UAAW,wBACb,EACA,CACE,UAAWA,EAA6B,eACxC,MAAO,CACL,GAAI,KACN,EACA,UAAW,4BACb,EACA,CACE,UAAWA,EAA6B,kBACxC,MAAO,CACL,MAAO,4BACT,EACA,SAAU,CACR,CACE,UAAWA,EAA6B,aACxC,MAAO,CACL,MAAO,gBACT,CACF,EACA,CACE,UAAWA,EAA6B,aACxC,MAAO,CACL,MAAO,gBACT,CACF,CACF,CACF,EACA,CACE,UAAWA,EAA6B,KACxC,SAAU,CACR,CACE,UAAWA,EAA6B,SACxC,UAAW,QACb,EACA,CACE,UAAWA,EAA6B,SACxC,UAAW,QACb,CACF,CACF,CAAA;;;;;;;;;;;;"}
{"version":3,"file":"BaseComponentProps-bb0d5515.js","sources":["../../../../packages/components/src/types/BaseComponentProps.ts"],"sourcesContent":["import { HTMLAttributes, PropsWithChildren } from 'react';\n\n/**\n * Basetype for props som eksponeres til konsumenter av designsystemet.\n * Lager en intersection-type med props som sendes inn og `id` og `htmlProps`\n * slik at man kan ha `HTMLAttributes`-props på komponenter som eksponeres\n * av designsystemet. Se også {@link BaseComponentPropsWithChildren} og\n * {@link getBaseHTMLProps}.\n *\n * @template TElement Element-type som genereres av komponenten.\n * @template TOtherProps Andre props komponenten skal eksponere til konsumenter.\n * @template THTMLAttributesProps Standard `HTMLAttributes<T>` men kan overstyres for f.eks knapper hvis man trenger en annen basetype for `htmlProps`.\n */\nexport type BaseComponentProps<\n  TElement extends Element,\n  TOtherProps extends Record<string, unknown> = Record<string, unknown>,\n  THTMLAttributesProps extends HTMLAttributes<TElement> = HTMLAttributes<TElement>\n> = Pick<THTMLAttributesProps, 'id' | 'className'> &\n  TOtherProps & {\n    /**Ekstra HTML-attributter som vil settes på elementet som genereres. Untatt `id` og `className` som settes på toppnivå. */\n    htmlProps?: THTMLAttributesProps;\n  };\n\n/**\n * Utvidelese av {@link BaseComponentProps} med prop for `children`.\n *\n * {@link BaseComponentProps}\n */\nexport type BaseComponentPropsWithChildren<\n  T extends Element,\n  TProps extends Record<string, unknown> = Record<string, unknown>,\n  THTMLProps extends HTMLAttributes<T> = HTMLAttributes<T>\n> = BaseComponentProps<T, PropsWithChildren<TProps>, THTMLProps>;\n\nexport const joinClassNames = (...classNames: (string | undefined)[]) =>\n  classNames.filter(Boolean).join(' ');\n\ntype GetBaseHTMLProps = {\n  <T extends Element>(\n    id: HTMLAttributes<T>['id'],\n    className: HTMLAttributes<T>['className'],\n    htmlProps: HTMLAttributes<T> | undefined,\n    unknownProps: object\n  ): HTMLAttributes<T> & object;\n  <T extends Element>(\n    id: HTMLAttributes<T>['id'],\n    htmlProps: HTMLAttributes<T> | undefined,\n    unknownProps: object\n  ): HTMLAttributes<T> & object;\n};\n\n/**\n * Slår sammen id, className, htmlProps og unknownProps til ett objekt\n * som kan spreades som baseprops for en komponent. `unknownProps` er\n * med for å sikre at aria- og data- attributter blir spreadet, alle\n * komponenter må derfor ta hensyn til `...rest` når de leser props.\n *\n * Typisk bruk:\n * ```\n * const Props = BaseComponentProps<HTMLElement, {\n *   propA: string,\n *   propB: string,\n * }>\n *\n * const MyComponent = (props: Props) => {\n *   const { propA, propB, id, className, htmlProps, ...rest } = props;\n *\n *   const wrapperProps = getBaseHTMLProps(id, className, htmlProps, rest)\n *\n *   return <div {...wrapperProps}>innhold</div>\n * }\n * ```\n * @param id id fra props til komponenten.\n * @param className className for komponenten.\n * @param htmlProps htmlProps fra komponenten.\n * @param unknownProps andre ukjente props som skal spreades, kommer typisk fra `...rest` når man leser props til komponenten.\n * @returns Objekt med alle argumentene som kan spreades.\n *\n * Kan også kalles uten `className`-parameteret. Oppførselen er lik.\n */\nexport const getBaseHTMLProps: GetBaseHTMLProps = <T extends Element>(\n  id: HTMLAttributes<T>['id'],\n  htmlPropsOrClassName:\n    | HTMLAttributes<T>['className']\n    | (HTMLAttributes<T> | undefined),\n  htmlPropsOrUnknownProps: (HTMLAttributes<T> | undefined) | object,\n  unknownPropsOrUndefined?: object\n): HTMLAttributes<T> & object => {\n  if (\n    typeof htmlPropsOrClassName === 'string' ||\n    unknownPropsOrUndefined != undefined\n  ) {\n    const {\n      id: idFromHtmlProps,\n      className: classNameFromHtmlProps,\n      ...restHTMLProps\n    } = (htmlPropsOrUnknownProps as HTMLAttributes<T> | undefined) ?? {};\n\n    const propId = id ?? idFromHtmlProps;\n\n    const propClassName = joinClassNames(\n      htmlPropsOrClassName as string | undefined,\n      classNameFromHtmlProps\n    );\n\n    return {\n      ...unknownPropsOrUndefined,\n      ...restHTMLProps,\n      ...(propClassName && { className: propClassName }),\n      ...(propId && { id: propId }),\n    };\n  } else {\n    const {\n      id: htmlPropsId,\n      className: htmlPropsClassName,\n      ...restHTMLProps\n    } = (htmlPropsOrClassName as HTMLAttributes<T> | undefined) ?? {};\n\n    const propId = id ?? htmlPropsId;\n\n    return {\n      ...htmlPropsOrUnknownProps,\n      ...restHTMLProps,\n      ...(htmlPropsClassName && { className: htmlPropsClassName }),\n      ...(propId && { id: propId }),\n    };\n  }\n};\n"],"names":["joinClassNames","classNames","getBaseHTMLProps","id","htmlPropsOrClassName","htmlPropsOrUnknownProps","unknownPropsOrUndefined","idFromHtmlProps","classNameFromHtmlProps","restHTMLProps","propId","propClassName","htmlPropsId","htmlPropsClassName"],"mappings":"AAkCa,MAAAA,EAAiB,IAAIC,IAChCA,EAAW,OAAO,OAAO,EAAE,KAAK,GAAG,EA6CxBC,EAAqC,CAChDC,EACAC,EAGAC,EACAC,IAC+B,CAC/B,GACE,OAAOF,GAAyB,UAChCE,GAA2B,KAC3B,CACM,KAAA,CACJ,GAAIC,EACJ,UAAWC,EACX,GAAGC,CAAA,EACAJ,GAA6D,CAAA,EAE5DK,EAASP,GAAMI,EAEfI,EAAgBX,EACpBI,EACAI,CAAA,EAGK,MAAA,CACL,GAAGF,EACH,GAAGG,EACH,GAAIE,GAAiB,CAAE,UAAWA,CAAc,EAChD,GAAID,GAAU,CAAE,GAAIA,CAAO,CAAA,MAExB,CACC,KAAA,CACJ,GAAIE,EACJ,UAAWC,EACX,GAAGJ,CAAA,EACAL,GAA0D,CAAA,EAEzDM,EAASP,GAAMS,EAEd,MAAA,CACL,GAAGP,EACH,GAAGI,EACH,GAAII,GAAsB,CAAE,UAAWA,CAAmB,EAC1D,GAAIH,GAAU,CAAE,GAAIA,CAAO,CAAA,EAGjC"}
{"version":3,"file":"useOnClickOutside-1aed2959.js","sources":["../../../../packages/components/src/hooks/useOnClickOutside.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\n/**\n * Kjører logikk når brukeren klikker utenfor et element, f.eks at elementet fjernes fra DOM.\n * Typisk bruk:\n * ```\n * const [isOpen, setOpen] = useState(true);\n * const ref = useRef<HTMLElement>(null);\n * useOnClickOutside(ref, () => setOpen(false));\n *\n * return <div ref={ref}>innhold</div>\n * ```\n * @param element HTML elementet man klikker utenfor.\n * @param handler funksjonen som kjøres ved klikk utenfor.\n */\n\nexport function useOnClickOutside(\n  element: HTMLElement | null | (HTMLElement | null)[],\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent) => {\n      const elements = Array.isArray(element) ? element : [element];\n      let targetElement = event.target as HTMLElement;\n\n      while (targetElement) {\n        if (elements.indexOf(targetElement) != -1) {\n          return;\n        }\n        targetElement = targetElement.parentNode as HTMLElement;\n      }\n      handler(event);\n    };\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [element, handler]);\n}\n"],"names":["useOnClickOutside","element","handler","useEffect","listener","event","elements","targetElement"],"mappings":"wCAgBgB,SAAAA,EACdC,EACAC,EACA,CACAC,EAAAA,UAAU,IAAM,CACR,MAAAC,EAAYC,GAAmC,CACnD,MAAMC,EAAW,MAAM,QAAQL,CAAO,EAAIA,EAAU,CAACA,CAAO,EAC5D,IAAIM,EAAgBF,EAAM,OAE1B,KAAOE,GAAe,CACpB,GAAID,EAAS,QAAQC,CAAa,GAAK,GACrC,OAEFA,EAAgBA,EAAc,WAEhCL,EAAQG,CAAK,CAAA,EAEN,gBAAA,iBAAiB,YAAaD,CAAQ,EACtC,SAAA,iBAAiB,aAAcA,CAAQ,EACzC,IAAM,CACF,SAAA,oBAAoB,YAAaA,CAAQ,EACzC,SAAA,oBAAoB,aAAcA,CAAQ,CAAA,CACrD,EACC,CAACH,EAASC,CAAO,CAAC,CACvB"}
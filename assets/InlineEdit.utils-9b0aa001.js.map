{"version":3,"file":"InlineEdit.utils-9b0aa001.js","sources":["../../../../packages/components/src/components/InlineEdit/InlineEdit.tsx","../../../../packages/components/src/components/InlineEdit/InlineEdit.tokens.ts","../../../../packages/components/src/components/InlineEdit/InlineEdit.styles.tsx","../../../../packages/components/src/components/InlineEdit/InlineEdit.utils.tsx"],"sourcesContent":["import {\n  ChangeEvent,\n  useState,\n  FocusEventHandler,\n  FocusEvent,\n  Children,\n  cloneElement,\n  isValidElement,\n  ReactElement,\n} from 'react';\nimport { InlineEditProps } from './InlineEdit.types';\nimport { useOnClickOutside, useOnKeyDown } from '@norges-domstoler/dds-core';\n\ntype EditElement = HTMLInputElement | HTMLTextAreaElement;\n\nexport const InlineEdit = (props: InlineEditProps) => {\n  const {\n    emptiable,\n    value,\n    onSetValue,\n    onChange,\n    onFocus,\n    onBlur,\n    inputRef,\n    children,\n  } = props;\n  const [editingValue, setEditingValue] = useState<typeof value>(value || '');\n  const [isEditing, setIsEditing] = useState(false);\n\n  const onChangeHandler = (e: ChangeEvent<EditElement>) => {\n    setEditingValue(e.target.value);\n    onChange && onChange();\n  };\n\n  const onFocusHandler: FocusEventHandler<EditElement> = () => {\n    setIsEditing(true);\n    onFocus && onFocus();\n  };\n\n  const onBlurHandler: FocusEventHandler<EditElement> = (\n    e: FocusEvent<EditElement>\n  ) => {\n    if (!emptiable && e.target.value.trim() === '') {\n      setEditingValue(value);\n    } else {\n      onSetValue && onSetValue(e.target.value);\n    }\n    setIsEditing(false);\n    onBlur && onBlur();\n  };\n\n  const onExitHandler = () => {\n    if (\n      inputRef.current === document.activeElement &&\n      document.activeElement instanceof HTMLElement\n    ) {\n      setIsEditing(false);\n      document.activeElement.blur();\n    }\n  };\n\n  useOnKeyDown(['Enter'], () => onExitHandler());\n  useOnKeyDown(['Escape'], () => onExitHandler());\n  useOnClickOutside(inputRef.current, () => onExitHandler());\n\n  const inputChild = Children.only(\n    isValidElement(children) &&\n      cloneElement(children as ReactElement, {\n        onChange: onChangeHandler,\n        onBlur: onBlurHandler,\n        onFocus: onFocusHandler,\n        isEditing,\n        value: editingValue,\n        emptiable,\n      })\n  );\n\n  return <>{inputChild}</>;\n};\n\nInlineEdit.displayName = 'InlineEdit';\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { colors, spacing, fontPackages } = ddsBaseTokens;\n\nconst inlineEdit = {\n  padding: spacing.SizesDdsSpacingLocalX025,\n  font: fontPackages.body_sans_02.base,\n  backgroundColor: 'transparent',\n  withIcon: {\n    paddingLeft: spacing.SizesDdsSpacingLocalX2,\n  },\n  hover: {\n    backgroundColor: colors.DdsColorInteractiveLightest,\n  },\n  focus: {\n    backgroundColor: colors.DdsColorNeutralsWhite,\n  },\n};\n\nconst iconWrapper = {\n  top: spacing.SizesDdsSpacingLocalX05,\n  left: spacing.SizesDdsSpacingLocalX05,\n};\n\nexport const inlineEditTokens = {\n  inlineEdit,\n  iconWrapper,\n};\n","import styled, { css } from 'styled-components';\nimport { inlineEditTokens } from './InlineEdit.tokens';\nimport { Property } from 'csstype';\nimport { scrollbarStyling } from '../ScrollableContainer';\nimport { StatefulInput } from '@norges-domstoler/dds-form';\n\nconst { inlineEdit, iconWrapper } = inlineEditTokens;\n\nexport const defaultWidth: Property.Width = '140px';\n\ntype StyledInlineInputProps = {\n  isEditing?: boolean;\n  hideIcon?: boolean;\n};\n\nexport const StyledInlineInput = styled(StatefulInput)<StyledInlineInputProps>`\n  border-color: transparent;\n  background-color: ${inlineEdit.backgroundColor};\n  padding: ${inlineEdit.padding};\n  ${inlineEdit.font};\n  ${({ isEditing, hideIcon }) =>\n    !isEditing &&\n    !hideIcon &&\n    css`\n      padding-left: ${inlineEdit.withIcon.paddingLeft};\n    `}\n\n  &:hover:enabled:read-write:not(:focus) {\n    background-color: ${inlineEdit.hover.backgroundColor};\n    border-color: transparent;\n    box-shadow: none;\n  }\n  &:focus {\n    background-color: ${inlineEdit.focus.backgroundColor};\n  }\n`;\n\nexport const StyledInlineTextArea = styled(StyledInlineInput)`\n  resize: vertical;\n  ${scrollbarStyling.webkit}\n  ${scrollbarStyling.firefox}\n`;\n\nexport const IconWrapper = styled.span`\n  position: absolute;\n  left: ${iconWrapper.left};\n  top: ${iconWrapper.top};\n  z-index: 1;\n  &:hover {\n    cursor: text;\n  }\n`;\n","import { VisuallyHidden } from '../VisuallyHidden';\n\nexport const inlineEditVisuallyHidden = (id: string, emptiable?: boolean) => (\n  <VisuallyHidden id={id} as=\"span\">\n    Escape, Enter eller Tab for å lagre.{' '}\n    {!emptiable && 'Inputfeltet er ikke tømmbar.'}\n  </VisuallyHidden>\n);\n"],"names":["InlineEdit","props","emptiable","value","onSetValue","onChange","onFocus","onBlur","inputRef","children","editingValue","setEditingValue","useState","isEditing","setIsEditing","onChangeHandler","e","onFocusHandler","onBlurHandler","onExitHandler","useOnKeyDown","useOnClickOutside","inputChild","Children","isValidElement","cloneElement","jsx","Fragment","colors","spacing","fontPackages","ddsBaseTokens","inlineEdit","iconWrapper","inlineEditTokens","defaultWidth","StyledInlineInput","styled","StatefulInput","hideIcon","css","StyledInlineTextArea","scrollbarStyling","IconWrapper","inlineEditVisuallyHidden","id","VisuallyHidden"],"mappings":"0UAeO,MAAAA,EAAAC,GAAA,CACL,KAAA,CAAM,UAAAC,EACJ,MAAAC,EACA,WAAAC,EACA,SAAAC,EACA,QAAAC,EACA,OAAAC,EACA,SAAAC,EACA,SAAAC,CACA,EAAAR,EAEF,CAAAS,EAAAC,CAAA,EAAAC,EAAAA,SAAAT,GAAA,EAAA,EACA,CAAAU,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEAG,EAAAC,GAAA,CACEL,EAAAK,EAAA,OAAA,KAAA,EACAX,GAAAA,EAAA,CAAqB,EAGvBY,EAAA,IAAA,CACEH,EAAA,EAAA,EACAR,GAAAA,EAAA,CAAmB,EAGrBY,EAAAF,GAAA,CAGE,CAAAd,GAAAc,EAAA,OAAA,MAAA,KAAA,IAAA,GACEL,EAAAR,CAAA,EAEAC,GAAAA,EAAAY,EAAA,OAAA,KAAA,EAEFF,EAAA,EAAA,EACAP,GAAAA,EAAA,CAAiB,EAGnBY,EAAA,IAAA,CACEX,EAAA,UAAA,SAAA,eAAA,SAAA,yBAAA,cAIEM,EAAA,EAAA,EACA,SAAA,cAAA,OACF,EAGFM,EAAA,CAAA,OAAA,EAAA,IAAAD,EAAA,CAAA,EACAC,EAAA,CAAA,QAAA,EAAA,IAAAD,EAAA,CAAA,EACAE,EAAAb,EAAA,QAAA,IAAAW,EAAA,CAAA,EAEA,MAAAG,EAAAC,EAAAA,SAAA,KAA4BC,EAAAA,eAAAf,CAAA,GAAAgB,EAAA,aAAAhB,EAAA,CAEe,SAAAM,EAC3B,OAAAG,EACF,QAAAD,EACC,UAAAJ,EACT,MAAAH,EACO,UAAAR,CACP,CAAA,CACD,EAGL,OAAAwB,EAAAC,EAAA,CAAA,SAAAL,CAAA,CAAA,CACF,EAEAtB,EAAA,YAAA,ylCC9EA,KAAM,CAAE,OAAA4B,EAAQ,QAAAC,EAAS,aAAAC,CAAA,EAAiBC,EAEpCC,EAAa,CACjB,QAASH,EAAQ,yBACjB,KAAMC,EAAa,aAAa,KAChC,gBAAiB,cACjB,SAAU,CACR,YAAaD,EAAQ,sBACvB,EACA,MAAO,CACL,gBAAiBD,EAAO,2BAC1B,EACA,MAAO,CACL,gBAAiBA,EAAO,qBAC1B,CACF,EAEMK,EAAc,CAClB,IAAKJ,EAAQ,wBACb,KAAMA,EAAQ,uBAChB,EAEaK,EAAmB,CAAA,WAC9BF,EAAA,YACAC,CACF,ECrBA,CAAA,WAAAD,EAAA,YAAAC,CAAA,EAAAC,EAEOC,EAAA,QAOAC,EAAAC,EAAAC,CAAA;AAAA;AAAA,sBAA8CN,EAAA;AAAA,aAEpBA,EAAA;AAAA,IACTA,EAAA;AAAA,IACT,CAAA,CAAA,UAAAnB,EAAA,SAAA0B,CAAA,IAAA,CAAA1B,GAAA,CAAA0B,GAAAC;AAAAA,sBAIXR,EAAA,SAAA;AAAA;AAAA;AAAA;AAAA,wBACsCA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAIDA,EAAA,MAAA;AAAA;AAAA,EASlCS,EAAAJ,EAAAD,CAAA;AAAA;AAAA,IAAqDM,EAAA;AAAA,IAEvCA,EAAA;AAAA,EAIdC,EAAAN,EAAA;AAAA;AAAA,UAA2BJ,EAAA;AAAA,SAEZA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,o0DC3CT,MAAAW,EAA2B,CAACC,EAAY3C,MAClD4C,EAAe,CAAA,GAAAD,EAAQ,GAAG,OAAO,SAAA,CAAA,uCACK,IACpC,CAAC3C,GAAa,8BAAA,CACjB,CAAA"}
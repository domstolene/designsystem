{"version":3,"file":"Card.stories-94961108.js","sources":["../../../../packages/components/src/components/Card/Card.tokens.tsx","../../../../packages/components/src/components/Card/Card.tsx","../../../../packages/components/src/components/Card/CardAccordion/CardAccordion.tsx","../../../../packages/components/src/components/Card/CardAccordion/CardAccordion.tokens.tsx","../../../../packages/components/src/components/Card/CardAccordion/CardAccordionHeader.tsx","../../../../packages/components/src/components/Card/CardAccordion/useElementHeight.ts","../../../../packages/components/src/components/Card/CardAccordion/CardAccordionBody.tsx"],"sourcesContent":["import {\n  ddsBaseTokens,\n  ddsReferenceTokens,\n} from '@norges-domstoler/dds-design-tokens';\n\nconst { colors, border } = ddsBaseTokens;\nconst { textDefault } = ddsReferenceTokens;\n\nconst base = {\n  border: `${border.BordersDdsBorderStyleLightStrokeWeight} solid`,\n};\n\nconst cardColors = {\n  filledLight: {\n    backgroundColor: colors.DdsColorPrimaryLightest,\n    borderColor: colors.DdsColorPrimaryLightest,\n    color: textDefault.textColor,\n  },\n  filledDark: {\n    backgroundColor: colors.DdsColorPrimaryBase,\n    borderColor: colors.DdsColorPrimaryBase,\n    color: colors.DdsColorNeutralsWhite,\n  },\n  strokeDark: {\n    backgroundColor: colors.DdsColorNeutralsWhite,\n    borderColor: border.BordersDdsBorderStyleLightStroke,\n    color: textDefault.textColor,\n  },\n  strokeLight: {\n    backgroundColor: colors.DdsColorNeutralsWhite,\n    borderColor: border.BordersDdsBorderStyleLightStroke,\n    color: textDefault.textColor,\n  },\n};\n\nexport const cardTokens = {\n  base: base,\n  colors: cardColors,\n};\n","import { AnchorHTMLAttributes, RefObject } from 'react';\nimport styled, { css } from 'styled-components';\nimport { cardTokens as tokens } from './Card.tokens';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n  selection,\n} from '@norges-domstoler/dds-core';\nimport {\n  getFontStyling,\n  defaultTypographyType,\n} from '@norges-domstoler/dds-typography';\nimport {\n  hoverWithBorder,\n  focusVisibleWithBorder,\n} from '@norges-domstoler/dds-form';\n\ntype ContainerProps = {\n  color: CardColor;\n  cardType: CardType;\n};\n\nconst Container = styled.div<ContainerProps>`\n  border: ${tokens.base.border};\n  ${getFontStyling(defaultTypographyType)};\n  &::selection,\n  *::selection {\n    ${selection}\n  }\n  @media (prefers-reduced-motion: no-preference) {\n    transition: box-shadow 0.2s, border-color 0.2s;\n  }\n  ${({ color }) =>\n    color &&\n    css`\n      color: ${tokens.colors[color].color};\n      background-color: ${tokens.colors[color].backgroundColor};\n      border-color: ${tokens.colors[color].borderColor};\n    `}\n  ${({ cardType }) =>\n    cardType === 'navigation'\n      ? css`\n          text-decoration: none;\n          &:hover {\n            ${hoverWithBorder}\n          }\n          &:focus {\n            ${focusVisibleWithBorder}\n          }\n        `\n      : cardType === 'expandable'\n      ? css`\n          width: 100%;\n          box-sizing: border-box;\n          &:not(:first-of-type) {\n            border-top: none;\n          }\n        `\n      : ''}\n`;\nexport type CardColor =\n  | 'filledDark'\n  | 'filledLight'\n  | 'strokeDark'\n  | 'strokeLight';\n\nexport type CardType = 'info' | 'navigation' | 'expandable';\n\ntype BaseCardProps<T extends HTMLElement> = BaseComponentPropsWithChildren<\n  T,\n  {\n    /** Fargepalett i komponenten. */\n    color?: CardColor;\n\n    /** Referanse til komponenten. */\n    cardRef?: RefObject<T>;\n  }\n>;\n\nexport type InfoCardProps = BaseCardProps<HTMLDivElement> & {\n  /** Spesifiserer funksjonalitet og formål med komponenten. **OBS!** ved `'navigation'` må `href` oppgis. Ved `'expandable'` må alle `<Card />` grupperte sammen ligge egen `<div>` container. */\n  cardType: 'info';\n};\n\nexport type NavigationCardProps = BaseCardProps<HTMLAnchorElement> & {\n  cardType: 'navigation';\n} & Pick<AnchorHTMLAttributes<HTMLAnchorElement>, 'href' | 'target'>;\n\nexport type ExpandableCardProps = BaseCardProps<HTMLDivElement> & {\n  cardType: 'expandable';\n};\n\nexport type CardProps =\n  | InfoCardProps\n  | NavigationCardProps\n  | ExpandableCardProps;\n\nexport const Card = (props: CardProps) => {\n  const {\n    color = 'filledLight',\n    cardType,\n    cardRef,\n    children,\n    id,\n    className,\n    htmlProps,\n    ...rest\n  } = props;\n\n  if (cardType === 'navigation') {\n    const { href, target } = props;\n\n    return (\n      <Container\n        {...getBaseHTMLProps(id, className, htmlProps, rest)}\n        cardType={cardType}\n        color={color}\n        as=\"a\"\n        ref={cardRef}\n        href={href}\n        target={target}\n      >\n        {children}\n      </Container>\n    );\n  }\n\n  return (\n    <Container\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n      cardType={cardType}\n      color={color}\n      as=\"div\"\n      ref={cardRef}\n    >\n      {children}\n    </Container>\n  );\n};\n\nCard.displayName = 'Card';\n","import {\n  forwardRef,\n  useState,\n  useEffect,\n  ReactElement,\n  Children as ReactChildren,\n  cloneElement,\n  isValidElement,\n  useId,\n  useCallback,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\n\nconst Wrapper = styled.div``;\n\nexport type CardAccordionProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Spesifiserer om body skal være utvidet ved innlastning. */\n    isExpanded?: boolean;\n    /**For å lytte til endringer i expanded-state. */\n    onChange?: (expanded: boolean) => void;\n  }\n>;\n\nexport const CardAccordion = forwardRef<HTMLDivElement, CardAccordionProps>(\n  (props, ref) => {\n    const {\n      isExpanded = false,\n      onChange,\n      id,\n      children,\n      className,\n      htmlProps,\n      ...rest\n    } = props;\n\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    const generatedId = useId();\n    const accordionId = id ?? `${generatedId}-cardAccordion`;\n\n    useEffect(() => {\n      setExpanded(isExpanded);\n    }, [isExpanded]);\n\n    const toggleExpanded = useCallback(() => {\n      const newExpanded = !expanded;\n\n      setExpanded(newExpanded);\n\n      if (onChange) {\n        onChange(newExpanded);\n      }\n    }, [expanded, onChange]);\n\n    const Children = ReactChildren.map(children, (child, childIndex) => {\n      const headerId = `${accordionId}-header`;\n      const bodyId = `${accordionId}-body`;\n\n      return (\n        isValidElement(child) &&\n        (childIndex === 0\n          ? cloneElement(child as ReactElement, {\n              isExpanded: expanded,\n              toggleExpanded,\n              id: headerId,\n              bodyId,\n            })\n          : cloneElement(child as ReactElement, {\n              isExpanded: expanded,\n              id: bodyId,\n              headerId,\n            }))\n      );\n    });\n\n    const wrapperProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      ref,\n    };\n    return <Wrapper {...wrapperProps}>{Children}</Wrapper>;\n  }\n);\n\nCardAccordion.displayName = 'CardAccordion';\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { StaticTypographyType } from '@norges-domstoler/dds-typography';\n\nconst { spacing, border, iconSizes } = ddsBaseTokens;\n\nexport const typographyTypes: {\n  body: StaticTypographyType;\n  header: StaticTypographyType;\n} = {\n  body: 'bodySans03',\n  header: 'headingSans03',\n};\n\nconst header = {\n  padding: `${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX075} ${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX15}`,\n  hover: {\n    boxShadow: `0 0 0 ${border.BordersDdsBorderFocusInputfieldStrokeWeight} ${border.BordersDdsBorderFocusInputfieldStroke}`,\n  },\n  focus: {\n    boxShadow: `0 0 0 ${border.BordersDdsBorderFocusCardStrokeWeight} ${border.BordersDdsBorderFocusCardStroke}`,\n  },\n};\n\nconst chevronWrapper = {\n  width: iconSizes.DdsIconsizeMedium,\n  height: iconSizes.DdsIconsizeMedium,\n  marginLeft: spacing.SizesDdsSpacingLocalX05,\n};\n\nconst body = {\n  padding: `${spacing.SizesDdsSpacingLocalX1} ${\n    spacing.SizesDdsSpacingLocalX2NumberPx +\n    spacing.SizesDdsSpacingLocalX075NumberPx\n  }px ${spacing.SizesDdsSpacingLocalX2} ${spacing.SizesDdsSpacingLocalX15}`,\n};\n\nexport const cardAccordionTokens = {\n  header,\n  body,\n  chevronWrapper,\n  chevron: {\n    width: iconSizes.DdsIconsizeMedium,\n    height: spacing.SizesDdsSpacingLocalX05,\n  },\n};\n","import { forwardRef, ButtonHTMLAttributes } from 'react';\nimport styled, { css } from 'styled-components';\nimport {\n  cardAccordionTokens as tokens,\n  typographyTypes,\n} from './CardAccordion.tokens';\nimport {\n  normalizeButton,\n  removeButtonStyling,\n  AnimatedChevronUpDown,\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport {\n  getFontStyling,\n  StaticTypographyType,\n} from '@norges-domstoler/dds-typography';\nimport { Property } from 'csstype';\n\nconst { header, chevronWrapper } = tokens;\n\nconst ContentWrapper = styled.div`\n  text-align: left;\n`;\n\nfunction getPadding(props: HeaderProps): string {\n  const { padding } = props;\n\n  return padding || header.padding;\n}\n\nfunction getTypographyType(props: HeaderProps): StaticTypographyType {\n  const { typographyType } = props;\n\n  return typographyType || typographyTypes.header;\n}\n\ntype HeaderProps = {\n  padding?: Property.Padding<string>;\n  typographyType?: StaticTypographyType;\n  bold?: boolean;\n};\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  @media (prefers-reduced-motion: no-preference) {\n    transition: box-shadow 0.2s;\n  }\n  padding: ${getPadding};\n  ${props => getFontStyling(getTypographyType(props))}\n  ${props =>\n    props.bold &&\n    css`\n      font-weight: 600;\n    `}\n`;\n\nconst HeaderWrapperButton = styled.button`\n  ${normalizeButton}\n  user-select: text;\n  position: relative;\n  cursor: pointer;\n  @media (prefers-reduced-motion: no-preference) {\n    transition: box-shadow 0.2s;\n  }\n  ${removeButtonStyling}\n  display: block;\n  width: 100%;\n  &:hover {\n    box-shadow: ${header.hover.boxShadow};\n  }\n\n  &:focus-visible,\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${header.focus.boxShadow};\n  }\n`;\n\nconst ChevronWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${chevronWrapper.width};\n  height: ${chevronWrapper.height};\n  margin-left: ${chevronWrapper.marginLeft};\n`;\n\nexport type CardAccordionHeaderProps = BaseComponentPropsWithChildren<\n  HTMLButtonElement,\n  {\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller body er utvidet.  */\n    isExpanded?: boolean;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Callback for å styre utvidelse og sammentrukking.  */\n    toggleExpanded?: () => void;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller `id` til `<CardAccordionBody />`.  */\n    bodyId?: string;\n    /**Overskriver default padding. */\n    padding?: Property.Padding<string>;\n    /**Overskriver default teksttype. */\n    typographyType?: StaticTypographyType;\n    /**Angir om teksten skal være i \"bold\"-format. */\n    bold?: boolean;\n  },\n  ButtonHTMLAttributes<HTMLButtonElement>\n>;\n\nexport const CardAccordionHeader = forwardRef<\n  HTMLButtonElement,\n  CardAccordionHeaderProps\n>((props, ref) => {\n  const {\n    children,\n    isExpanded = false,\n    toggleExpanded,\n    bodyId,\n    id,\n    className,\n    htmlProps,\n    padding,\n    typographyType,\n    bold,\n    ...rest\n  } = props;\n\n  const handleClick = () => {\n    if (toggleExpanded) {\n      toggleExpanded();\n    }\n  };\n\n  const headerWrapperProps = {\n    ...getBaseHTMLProps(id, className, htmlProps, rest),\n    'aria-expanded': isExpanded,\n    'aria-controls': bodyId,\n    ref,\n    onClick: handleClick,\n  };\n\n  const chevronProps = {\n    isUp: isExpanded,\n    width: tokens.chevron.width,\n    height: tokens.chevron.height,\n  };\n\n  return (\n    <HeaderWrapperButton {...headerWrapperProps} type=\"button\">\n      <HeaderContainer\n        typographyType={typographyType}\n        padding={padding}\n        bold={bold}\n      >\n        <ContentWrapper>{children}</ContentWrapper>\n        <ChevronWrapper>\n          <AnimatedChevronUpDown {...chevronProps} />\n        </ChevronWrapper>\n      </HeaderContainer>\n    </HeaderWrapperButton>\n  );\n});\n\nCardAccordionHeader.displayName = 'CardAccordionHeader';\n","import { Nullable } from '@norges-domstoler/dds-core';\nimport { useEffect, useState } from 'react';\n\nexport function useElementHeight(\n  element: HTMLDivElement | null\n): number | null {\n  const [height, setHeight] = useState<Nullable<number>>(null);\n\n  useEffect(() => {\n    if (!element) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      setHeight(element.offsetHeight);\n    });\n\n    resizeObserver.observe(element);\n\n    return () => resizeObserver.disconnect();\n  }, [element]);\n\n  return height;\n}\n","import { Property } from 'csstype';\nimport {\n  forwardRef,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport styled, { css } from 'styled-components';\nimport {\n  useIsMounted,\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n  Nullable,\n} from '@norges-domstoler/dds-core';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\n\nimport {\n  cardAccordionTokens as tokens,\n  typographyTypes,\n} from './CardAccordion.tokens';\nimport { useElementHeight } from './useElementHeight';\n\nconst expandingAnimation = css`\n  @media (prefers-reduced-motion: no-preference) {\n    transition: height 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nfunction getPadding(props: BodyContainerProps): string {\n  const { padding } = props;\n\n  return padding || tokens.body.padding;\n}\n\ntype BodyProps = {\n  isExpanded?: boolean;\n  animate: boolean;\n  height: number;\n};\n\nconst Body = styled.div<BodyProps>`\n  @media (prefers-reduced-motion: no-preference) {\n    ${({ animate }) => animate && expandingAnimation}\n  }\n  ${getFontStyling(typographyTypes.body)}\n  height: ${({ height, isExpanded }) => (isExpanded ? height : 0)}px;\n  overflow: hidden;\n`;\n\ntype BodyContainerProps = {\n  isExpanded?: boolean;\n  maxHeight?: number;\n  animate: boolean;\n  paddingTop?: Property.PaddingTop<string>;\n  padding?: Property.Padding<string>;\n};\n\nconst BodyContainer = styled.div<BodyContainerProps>`\n  padding: ${getPadding};\n\n  ${({ paddingTop }) =>\n    paddingTop &&\n    css`\n      padding-top: ${paddingTop};\n    `}\n`;\n\nexport type CardAccordionBodyProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller komponenten om den skal utvides.  */\n    isExpanded?: boolean;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller `id` til `<CardAccordionHeader />`.  */\n    headerId?: string;\n    /**Overskriver default padding på toppen. Brukes når barn har spacing på toppen, f.eks. en overskrift. */\n    paddingTop?: Property.PaddingTop<string>;\n    /**Overskriver default padding. */\n    padding?: Property.Padding<string>;\n  }\n>;\n\nexport const CardAccordionBody = forwardRef<\n  HTMLDivElement,\n  CardAccordionBodyProps\n>((props, ref) => {\n  const {\n    children,\n    isExpanded,\n    headerId,\n    id,\n    className,\n    htmlProps,\n    padding,\n    paddingTop,\n    ...rest\n  } = props;\n\n  const bodyRef = useRef<HTMLDivElement>(null);\n\n  const [animate, setAnimate] = useState(false);\n\n  const isMounted = useIsMounted();\n  const height = useElementHeight(bodyRef.current);\n\n  const [initialExpandedHeight, setIntialExpandedHeight] =\n    useState<Nullable<number>>(null);\n\n  useLayoutEffect(() => {\n    // For å unngå initiell animasjon dersom Accordion er satt til å være åpen som default.\n    if (bodyRef.current && isExpanded) {\n      setIntialExpandedHeight(bodyRef.current.scrollHeight);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isMounted()) {\n      setAnimate(true);\n    }\n  }, [isMounted]);\n\n  const bodyProps = {\n    ...getBaseHTMLProps(id, className, htmlProps, rest),\n    ref,\n    isExpanded,\n    role: 'region',\n    height: height || initialExpandedHeight || 0,\n  };\n  const bodyContainerProps = {\n    ref: bodyRef,\n    isExpanded,\n    padding,\n    paddingTop,\n  };\n\n  return (\n    <Body\n      {...bodyProps}\n      animate={animate}\n      aria-labelledby={headerId}\n      aria-hidden={!isExpanded}\n    >\n      <BodyContainer {...bodyContainerProps} animate={animate}>\n        {children}\n      </BodyContainer>\n    </Body>\n  );\n});\n\nCardAccordionBody.displayName = 'CardAccordionBody';\n"],"names":["colors","border","ddsBaseTokens","textDefault","ddsReferenceTokens","base","cardColors","cardTokens","Container","styled","tokens","getFontStyling","defaultTypographyType","selection","color","css","cardType","hoverWithBorder","focusVisibleWithBorder","Card","props","cardRef","children","id","className","htmlProps","rest","href","target","jsx","getBaseHTMLProps","Wrapper","CardAccordion","forwardRef","ref","isExpanded","onChange","expanded","setExpanded","useState","generatedId","useId","accordionId","useEffect","toggleExpanded","useCallback","newExpanded","Children","ReactChildren","child","childIndex","headerId","bodyId","isValidElement","cloneElement","wrapperProps","spacing","iconSizes","typographyTypes","header","chevronWrapper","body","cardAccordionTokens","ContentWrapper","getPadding","padding","getTypographyType","typographyType","HeaderContainer","HeaderWrapperButton","normalizeButton","removeButtonStyling","ChevronWrapper","CardAccordionHeader","bold","handleClick","headerWrapperProps","chevronProps","jsxs","AnimatedChevronUpDown","useElementHeight","element","height","setHeight","resizeObserver","expandingAnimation","Body","animate","BodyContainer","paddingTop","CardAccordionBody","bodyRef","useRef","setAnimate","isMounted","useIsMounted","initialExpandedHeight","setIntialExpandedHeight","useLayoutEffect","bodyProps"],"mappings":"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"}
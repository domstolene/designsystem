{"version":3,"file":"ScrollableContainer-316b56a5.js","sources":["../../../../packages/components/src/components/ScrollableContainer/Scrollbar.tsx","../../../../packages/components/src/components/ScrollableContainer/ScrollableContainer.tsx"],"sourcesContent":["import {\n  RefObject,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  MouseEvent,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentProps,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { scrollbarTokens as tokens } from './ScrollableContainer.tokens';\n\nconst { track, thumb, minThumbHeightPx } = tokens;\n\nconst ScrollbarOuterWrapper = styled.div``;\n\nconst ScrollbarElements = styled.div`\n  display: block;\n  height: 100%;\n  position: relative;\n  display: grid;\n  justify-items: center;\n`;\n\nconst Track = styled.div`\n  bottom: 0;\n  top: 0;\n  position: absolute;\n  background-color: ${track.backgroundColor};\n  border-radius: ${track.borderRadius};\n  width: ${track.width};\n`;\n\nconst Thumb = styled.div`\n  position: absolute;\n  background-color: ${thumb.base.backgroundColor};\n  border-radius: ${thumb.base.borderRadius};\n  width: ${thumb.base.width};\n  transition: background-color 0.2s;\n  &:hover {\n    background-color: ${thumb.hover.backgroundColor};\n  }\n`;\n\nexport type ScrollbarProps = BaseComponentProps<\n  HTMLDivElement,\n  {\n    /** Ref til container med innholdet som skal scrolles. */\n    contentRef?: RefObject<HTMLDivElement>;\n  }\n>;\n\nexport const Scrollbar = (props: ScrollbarProps) => {\n  const { id, className, htmlProps, contentRef, ...rest } = props;\n  const trackRef = useRef<HTMLDivElement>(null);\n  const thumbRef = useRef<HTMLDivElement>(null);\n  const [thumbHeight, setThumbHeight] = useState(minThumbHeightPx);\n  const [isScrollable, setIsScrollable] = useState(true);\n  const [thumbTop, setThumbTop] = useState<number>(0);\n  const observer = useRef<ResizeObserver | null>(null);\n  const [scrollStartPosition, setScrollStartPosition] = useState<number>(0);\n  const [initialScrollTop, setInitialScrollTop] = useState<number>(0);\n  const [isDragging, setIsDragging] = useState(false);\n\n  function handleResize(ref: HTMLDivElement, trackSize: number) {\n    const { clientHeight, scrollHeight } = ref;\n    setIsScrollable(clientHeight !== scrollHeight);\n    setThumbHeight(\n      Math.max((clientHeight / scrollHeight) * trackSize, minThumbHeightPx),\n    );\n  }\n\n  const handleTrackClick = useCallback(\n    (e: MouseEvent<HTMLDivElement>) => {\n      if (contentRef?.current) {\n        const { current: trackCurrent } = trackRef;\n        const { current: contentCurrent } = contentRef;\n        if (trackCurrent && contentCurrent) {\n          const { clientY } = e;\n          const target = e.target as HTMLDivElement;\n          const rect = target.getBoundingClientRect();\n          const trackTop = rect.top;\n          const thumbOffset = -(thumbHeight / 2);\n          const clickRatio =\n            (clientY - trackTop + thumbOffset) / trackCurrent.clientHeight;\n          const scrollAmount = Math.floor(\n            clickRatio * contentCurrent.scrollHeight,\n          );\n          contentCurrent.scrollTo({\n            top: scrollAmount,\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    [thumbHeight],\n  );\n\n  const handleThumbPositioning = useCallback(() => {\n    if (!contentRef?.current || !trackRef.current || !thumbRef.current) {\n      return;\n    }\n    const { scrollTop: contentTop, scrollHeight: contentHeight } =\n      contentRef.current;\n    const { clientHeight } = trackRef.current;\n    let newTop = (+contentTop / +contentHeight) * clientHeight;\n    newTop = Math.min(newTop, clientHeight - thumbHeight);\n    setThumbTop(newTop);\n  }, []);\n\n  useEffect(() => {\n    if (contentRef?.current && trackRef.current) {\n      const ref = contentRef.current;\n      const { clientHeight } = trackRef.current;\n      observer.current = new ResizeObserver(() => {\n        handleResize(ref, clientHeight);\n      });\n      observer.current.observe(ref);\n      ref.addEventListener('scroll', handleThumbPositioning);\n      return () => {\n        observer.current?.unobserve(ref);\n        ref.removeEventListener('scroll', handleThumbPositioning);\n      };\n    }\n  }, []);\n\n  const handleThumbMousedown = useCallback((e: MouseEvent<HTMLDivElement>) => {\n    setScrollStartPosition(e.clientY);\n    if (contentRef?.current) setInitialScrollTop(contentRef.current.scrollTop);\n    setIsDragging(true);\n  }, []);\n\n  const handleThumbMouseup = useCallback(() => {\n    if (isDragging) {\n      setIsDragging(false);\n    }\n  }, [isDragging]);\n\n  const handleThumbMousemove = useCallback(\n    (e: globalThis.MouseEvent) => {\n      if (contentRef?.current) {\n        if (isDragging) {\n          const {\n            scrollHeight: contentScrollHeight,\n            offsetHeight: contentOffsetHeight,\n          } = contentRef.current;\n\n          const deltaY =\n            (e.clientY - scrollStartPosition) *\n            (contentOffsetHeight / thumbHeight);\n          const newScrollTop = Math.min(\n            initialScrollTop + deltaY,\n            contentScrollHeight - contentOffsetHeight,\n          );\n\n          contentRef.current.scrollTop = newScrollTop;\n        }\n      }\n    },\n    [isDragging, scrollStartPosition, thumbHeight],\n  );\n\n  useEffect(() => {\n    document.addEventListener('mousemove', handleThumbMousemove);\n    document.addEventListener('mouseup', handleThumbMouseup);\n    document.addEventListener('mouseleave', handleThumbMouseup);\n    return () => {\n      document.removeEventListener('mousemove', handleThumbMousemove);\n      document.removeEventListener('mouseup', handleThumbMouseup);\n      document.removeEventListener('mouseleave', handleThumbMouseup);\n    };\n  }, [handleThumbMousemove, handleThumbMouseup]);\n\n  return isScrollable ? (\n    <ScrollbarOuterWrapper\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n    >\n      <ScrollbarElements>\n        <Track ref={trackRef} onClick={handleTrackClick} />\n        <Thumb\n          style={{\n            height: thumbHeight,\n            top: thumbTop,\n          }}\n          ref={thumbRef}\n          onMouseDown={handleThumbMousedown}\n        />\n      </ScrollbarElements>\n    </ScrollbarOuterWrapper>\n  ) : null;\n};\n\nScrollbar.displayName = 'Scrollbar';\n","import { useRef } from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { Scrollbar } from './Scrollbar';\nimport { Property } from 'csstype';\nimport { scrollbarTokens as tokens } from './ScrollableContainer.tokens';\nimport {\n  focusVisibleTransitionValue,\n  focusVisible,\n} from '@norges-domstoler/dds-form';\n\nconst { track, content, outerContainer } = tokens;\n\nconst StyledScrollableContainer = styled.div`\n  grid-template: auto / 1fr ${track.width};\n  overflow: hidden;\n  position: relative;\n  display: grid;\n  padding: ${outerContainer.padding};\n`;\n\ninterface ContentProps {\n  height: Property.Height;\n}\n\nconst Content = styled.div<ContentProps>`\n  height: ${({ height }) => height};\n  overflow: auto;\n  scrollbar-width: none;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  padding-right: ${content.paddingRight};\n  @media (prefers-reduced-motion: no-preference) {\n    transition: ${focusVisibleTransitionValue};\n  }\n  :focus-visible,\n  .focus-visible {\n    outline: ${focusVisible.outline};\n    outline-offset: ${focusVisible.outlineOffset};\n  }\n`;\n\nexport type ScrollableContainerProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Høyde på innholdscontainer. */\n    contentHeight?: Property.Height;\n  }\n>;\n\nexport const ScrollableContainer = (props: ScrollableContainerProps) => {\n  const {\n    children,\n    id,\n    className,\n    contentHeight = '90vh',\n    htmlProps,\n    ...rest\n  } = props;\n  const ref = useRef<HTMLDivElement>(null);\n\n  return (\n    <StyledScrollableContainer\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n    >\n      <Content height={contentHeight} ref={ref} tabIndex={0}>\n        {children}\n      </Content>\n      <Scrollbar contentRef={ref} />\n    </StyledScrollableContainer>\n  );\n};\n\nScrollableContainer.displayName = 'ScrollableContainer';\n"],"names":["track","thumb","minThumbHeightPx","tokens","ScrollbarOuterWrapper","styled","ScrollbarElements","Track","Thumb","Scrollbar","props","id","className","htmlProps","contentRef","rest","trackRef","useRef","thumbRef","thumbHeight","setThumbHeight","useState","isScrollable","setIsScrollable","thumbTop","setThumbTop","observer","scrollStartPosition","setScrollStartPosition","initialScrollTop","setInitialScrollTop","isDragging","setIsDragging","handleResize","ref","trackSize","clientHeight","scrollHeight","handleTrackClick","useCallback","e","trackCurrent","contentCurrent","clientY","trackTop","thumbOffset","clickRatio","scrollAmount","handleThumbPositioning","contentTop","contentHeight","newTop","useEffect","_a","handleThumbMousedown","handleThumbMouseup","handleThumbMousemove","contentScrollHeight","contentOffsetHeight","deltaY","newScrollTop","jsx","getBaseHTMLProps","jsxs","content","outerContainer","StyledScrollableContainer","Content","height","focusVisibleTransitionValue","focusVisible","ScrollableContainer","children"],"mappings":"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"}
{"version":3,"file":"GridChild-d9c5cc7d.js","sources":["../../../../packages/components/src/components/Grid/Grid.tokens.tsx","../../../../packages/components/src/components/Grid/Grid.context.tsx","../../../../packages/components/src/components/Grid/Grid.tsx","../../../../packages/components/src/components/Grid/GridChild.tsx"],"sourcesContent":["import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { ScreenSize } from '@norges-domstoler/dds-core';\n\nconst { grid, spacing } = ddsBaseTokens;\n\nconst allColumns = '1 / -1';\nconst halfWayColumn: Record<ScreenSize, number> = {\n  [ScreenSize.XSmall]: grid.DdsGridXs0599Count / 2 + 1,\n  [ScreenSize.Small]: grid.DdsGridSm600959Count / 2 + 1,\n  [ScreenSize.Medium]: grid.DdsGridMd9601279Count / 2 + 1,\n  [ScreenSize.Large]: grid.DdsGridLg12801919Count / 2 + 1,\n  [ScreenSize.XLarge]: grid.DdsGridXl1920Count / 2 + 1,\n};\n\nexport const gridTokens = {\n  [ScreenSize.XSmall]: {\n    grid: {\n      columns: grid.DdsGridXs0599Count,\n      columnGap: grid.DdsGridXs0599GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX1,\n      marginRight: spacing.SizesDdsSpacingLayoutX1,\n    },\n\n    columns: {\n      firstHalf: {\n        gridColumn: allColumns,\n      },\n      secondHalf: {\n        gridColumn: allColumns,\n      },\n    },\n  },\n  [ScreenSize.Small]: {\n    grid: {\n      columns: grid.DdsGridSm600959Count,\n      columnGap: grid.DdsGridSm600959GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX2,\n      marginRight: spacing.SizesDdsSpacingLayoutX2,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Small]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Small]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.Medium]: {\n    grid: {\n      columns: grid.DdsGridMd9601279Count,\n      columnGap: grid.DdsGridMd9601279GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX4,\n      marginRight: spacing.SizesDdsSpacingLayoutX4,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Medium]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Medium]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.Large]: {\n    grid: {\n      columns: grid.DdsGridLg12801919Count,\n      columnGap: grid.DdsGridLg12801919GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX6,\n      marginRight: spacing.SizesDdsSpacingLayoutX6,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Large]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Large]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.XLarge]: {\n    grid: {\n      columns: grid.DdsGridXl1920Count,\n      columnGap: grid.DdsGridXl1920GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX10,\n      marginRight: spacing.SizesDdsSpacingLayoutX10,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.XLarge]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.XLarge]} / -1`,\n      },\n    },\n  },\n};\n","import { useContext, createContext } from 'react';\nimport { ScreenSize } from '@norges-domstoler/dds-core';\n\nexport interface GridContextProps {\n  screenSize: ScreenSize;\n}\n\nexport const GridContext = createContext<GridContextProps>({\n  screenSize: ScreenSize.Large,\n});\n\nexport const useGridContext = () => {\n  return useContext(GridContext);\n};\n","import styled, { css } from 'styled-components';\nimport { ScreenSize, useScreenSize } from '@norges-domstoler/dds-core';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { gridTokens } from './Grid.tokens';\nimport { GridContext } from './Grid.context';\nimport { HTMLAttributes } from 'react';\nimport {\n  BreakpointBasedProps,\n  getLiteralScreenSize,\n} from '@norges-domstoler/dds-core';\n\ninterface StyledGridProps {\n  screenSize: ScreenSize;\n  maxWidth?: MaxWidthGrid;\n  rowGap?: RowGapGrid;\n}\n\nconst getHooksGridStyling = (\n  screenSize: ScreenSize,\n  maxWidth?: MaxWidthGrid,\n  rowGap?: RowGapGrid,\n) => {\n  const tokens = gridTokens[screenSize].grid;\n  return {\n    gridTemplateColumns: `repeat(${tokens.columns}, minmax(0, 1fr))`,\n    columnGap: tokens.columnGap,\n    marginLeft: tokens.marginLeft,\n    marginRight: tokens.marginRight,\n    rowGap:\n      rowGap && rowGap[getLiteralScreenSize(screenSize)]\n        ? rowGap[getLiteralScreenSize(screenSize)]\n        : tokens.columnGap,\n    maxWidth:\n      maxWidth &&\n      maxWidth[getLiteralScreenSize(screenSize)] &&\n      maxWidth[getLiteralScreenSize(screenSize)],\n  };\n};\n\nconst StyledGrid = styled.div<StyledGridProps>`\n  display: grid;\n  ${({ maxWidth }) => css`\n    max-width: ${maxWidth};\n  `}\n  ${({ screenSize, maxWidth, rowGap }) =>\n    getHooksGridStyling(screenSize, maxWidth, rowGap)}\n`;\n\ntype RowGapGrid = BreakpointBasedProps<'rowGap'>;\ntype MaxWidthGrid = BreakpointBasedProps<'maxWidth'>;\n\ntype BaseGridProps = {\n  /**Maksimal bredde. Gjøres per brekkepunkt.  */\n  maxWidth?: MaxWidthGrid;\n  /** CSS `row-gap`. Gjøres per brekkepunkt. */\n  rowGap?: RowGapGrid;\n} & Pick<HTMLAttributes<HTMLElement>, 'style'>;\n\ntype GridDivProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**HTML tag som returneres. */\n    as: 'div';\n  } & BaseGridProps\n>;\ntype GridFormProps = BaseComponentPropsWithChildren<\n  HTMLFormElement,\n  { as: 'form' } & BaseGridProps\n>;\n\nexport type GridProps = GridDivProps | GridFormProps;\n\nexport const Grid = (props: GridProps) => {\n  const { id, className, children, htmlProps, as, ...rest } = props;\n  const screenSize = useScreenSize();\n  return (\n    <GridContext.Provider value={{ screenSize: screenSize }}>\n      {as === 'div' ? (\n        <StyledGrid\n          {...getBaseHTMLProps(id, className, htmlProps, rest)}\n          screenSize={screenSize}\n        >\n          {children}\n        </StyledGrid>\n      ) : (\n        <StyledGrid\n          {...getBaseHTMLProps(id, className, htmlProps, rest)}\n          screenSize={screenSize}\n          as={as}\n        >\n          {children}\n        </StyledGrid>\n      )}\n    </GridContext.Provider>\n  );\n};\n\nGrid.displayName = 'Grid';\n","import styled from 'styled-components';\nimport { ScreenSize } from '@norges-domstoler/dds-core';\nimport { gridTokens as tokens } from './Grid.tokens';\nimport { Property } from 'csstype';\nimport { useGridContext } from './Grid.context';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { HTMLAttributes } from 'react';\nimport {\n  BreakpointBasedProps,\n  getLiteralScreenSize,\n} from '@norges-domstoler/dds-core';\n\ninterface StyledGridChildProps {\n  screenSize: ScreenSize;\n  columnsOccupied?: ColumnsOccupied;\n  justifySelf?: Property.JustifySelf;\n  gridRow?: Property.GridRow;\n}\n\nexport const isRelativeGridColumn = (\n  type: ColumnsOccupied | undefined,\n): type is RelativeColumnsOccupied => {\n  return type === 'all' || type === 'firstHalf' || type === 'secondHalf';\n};\n\nexport const isGridColumn = (\n  type: ColumnsOccupied | undefined,\n): type is GridColumnPerScreenSize => {\n  return (\n    (type as GridColumnPerScreenSize).xs !== undefined ||\n    (type as GridColumnPerScreenSize).sm !== undefined ||\n    (type as GridColumnPerScreenSize).md !== undefined ||\n    (type as GridColumnPerScreenSize).lg !== undefined ||\n    (type as GridColumnPerScreenSize).xl !== undefined\n  );\n};\n\nconst StyledGridChild = styled.div<StyledGridChildProps>`\n  grid-column: ${({ screenSize, columnsOccupied }) =>\n    columnsOccupied === 'all'\n      ? '1 / -1'\n      : isGridColumn(columnsOccupied)\n        ? columnsOccupied[getLiteralScreenSize(screenSize)]\n        : isRelativeGridColumn(columnsOccupied)\n          ? tokens[screenSize].columns[columnsOccupied].gridColumn\n          : ''};\n\n  justify-self: ${({ justifySelf }) => justifySelf && justifySelf};\n  grid-row: ${({ gridRow }) => gridRow && gridRow};\n`;\n\ntype RelativeColumnsOccupied = 'all' | 'firstHalf' | 'secondHalf';\ntype GridColumnPerScreenSize = BreakpointBasedProps<'gridColumn'>;\n\nexport type ColumnsOccupied = RelativeColumnsOccupied | GridColumnPerScreenSize;\nexport type GridChildProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**hvilke kolonner innholdet skal okkupere. Tar inn enten en string med relativ definisjon eller et objekt med egentilpassede `grid-column` CSS verdi definert for hver brekkepunkt. */\n    columnsOccupied?: ColumnsOccupied;\n    /**Plassering av innholdet på x-aksen. */\n    justifySelf?: Property.JustifySelf;\n    /**Hvilke rader innholdet skal okkupere. */\n    gridRow?: Property.GridRow;\n  }\n> &\n  Pick<HTMLAttributes<HTMLElement>, 'style'>;\n\nexport const GridChild = (props: GridChildProps) => {\n  const { id, className, htmlProps, children, ...rest } = props;\n  const { screenSize } = useGridContext();\n\n  return (\n    <StyledGridChild\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n      screenSize={screenSize}\n    >\n      {children}\n    </StyledGridChild>\n  );\n};\n\nGridChild.displayName = 'GridChild';\n"],"names":["grid","spacing","ddsBaseTokens","allColumns","halfWayColumn","ScreenSize","gridTokens","GridContext","createContext","useGridContext","useContext","getHooksGridStyling","screenSize","maxWidth","rowGap","tokens","getLiteralScreenSize","StyledGrid","styled","css","Grid","props","id","className","children","htmlProps","as","rest","useScreenSize","jsx","getBaseHTMLProps","isRelativeGridColumn","type","isGridColumn","StyledGridChild","columnsOccupied","justifySelf","gridRow","GridChild"],"mappings":"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"}
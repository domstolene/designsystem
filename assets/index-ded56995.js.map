{"version":3,"file":"index-ded56995.js","sources":["../../../../packages/components/src/components/Table/Table.tokens.tsx","../../../../packages/components/src/components/Table/Table.tsx","../../../../packages/components/src/components/Table/collapsible/Table.context.tsx","../../../../packages/components/src/components/Table/collapsible/CollapsibleTable.tsx","../../../../packages/components/src/components/Table/Head.tsx","../../../../packages/components/src/components/Table/Body.tsx","../../../../packages/components/src/components/Table/Foot.tsx","../../../../packages/components/src/components/Table/Table.styles.tsx","../../../../packages/components/src/components/Table/Row.tsx","../../../../packages/components/src/components/Table/Cell.tsx","../../../../packages/components/src/components/Table/collapsible/CollapsibleRow.tsx","../../../../packages/components/src/components/Table/SortCell.tsx","../../../../packages/components/src/components/Table/TableWrapper.tsx","../../../../packages/components/src/components/Table/index.ts"],"sourcesContent":["import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { font, colors, border, spacing, iconSizes, borderRadius } =\n  ddsBaseTokens;\n\nconst row = {\n  body: {\n    odd: {\n      backgroundColor: colors.DdsColorNeutralsWhite,\n    },\n    even: {\n      backgroundColor: colors.DdsColorNeutralsGray1,\n    },\n    hover: { backgroundColor: colors.DdsColorInteractiveLightest },\n    selected: {\n      backgroundColor: colors.DdsColorInteractiveLightest,\n    },\n    mode: {\n      sum: {\n        borderTop: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray4}`,\n        borderBottom: `${border.BordersDdsBorderStyleLightStrokeWeight} solid ${colors.DdsColorNeutralsGray4}`,\n        backgroundColor: colors.DdsColorNeutralsWhite,\n      },\n    },\n    withDividers: {\n      borderBottom: `1px solid ${colors.DdsColorNeutralsGray4}`,\n    },\n  },\n  head: {\n    extraCompact: {\n      backgroundColor: colors.DdsColorNeutralsWhite,\n      fontSize: font.DdsFontBodySans01FontSize,\n    },\n  },\n};\n\nconst cell = {\n  density: {\n    normal: {\n      padding: `${spacing.SizesDdsSpacingLocalX15} ${spacing.SizesDdsSpacingLocalX075}`,\n    },\n    compact: {\n      padding: `${spacing.SizesDdsSpacingLocalX075}`,\n    },\n    extraCompact: {\n      padding: `${spacing.SizesDdsSpacingLocalX025} ${spacing.SizesDdsSpacingLocalX05}`,\n    },\n  },\n  head: {\n    backgroundColor: colors.DdsColorPrimaryLightest,\n  },\n  sort: {\n    gap: spacing.SizesDdsSpacingLocalX05,\n    icon: {\n      marginInlineStart: spacing.SizesDdsSpacingLocalX05,\n    },\n  },\n  layout: {\n    textAndIcon: {\n      gap: spacing.SizesDdsSpacingLocalX075,\n      marginRight: spacing.SizesDdsSpacingLocalX075,\n    },\n  },\n};\n\nconst collapseButton = {\n  height: iconSizes.DdsIconsizeMedium,\n  width: iconSizes.DdsIconsizeMedium,\n  borderRadius: borderRadius.RadiiDdsBorderRadius1Radius,\n};\n\nexport const tableTokens = {\n  row,\n  cell,\n  collapseButton,\n};\n","import { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { selection } from '@norges-domstoler/dds-core';\nimport { scrollbarStyling } from '../ScrollableContainer';\nimport { tableTokens } from './Table.tokens';\nimport { TableDensity, TableProps } from './Table.types';\n\nconst { cell, row } = tableTokens;\n\ninterface StyledTableProps {\n  density: TableDensity;\n  stickyHeader?: boolean;\n  withDividers?: boolean;\n}\n\nconst StyledTable = styled.table<StyledTableProps>`\n  border-spacing: 0;\n  border-collapse: collapse;\n  *::selection {\n    ${selection}\n  }\n  ${scrollbarStyling.webkit}\n  ${scrollbarStyling.firefox}\n  ${({ density }) => css`\n    td,\n    th {\n      padding: ${cell.density[density].padding};\n    }\n  `}\n  ${({ density }) =>\n    density === 'extraCompact' &&\n    css`\n      th {\n        background-color: ${row.head.extraCompact.backgroundColor};\n        font-size: ${row.head.extraCompact.fontSize};\n      }\n      tr[type='body'] {\n        &:nth-of-type(even) {\n          background-color: ${row.body.odd.backgroundColor};\n        }\n        &:nth-of-type(odd) {\n          background-color: ${row.body.even.backgroundColor};\n        }\n      }\n    `}\n  ${({ stickyHeader }) =>\n    stickyHeader &&\n    css`\n      tr[type='head'] {\n        th[type='head'] {\n          position: sticky;\n          top: 0;\n          z-index: 50;\n        }\n      }\n    `}\n  ${({ withDividers }) =>\n    withDividers &&\n    css`\n      tr[type='body'] {\n        border-bottom: ${row.body.withDividers.borderBottom};\n      }\n    `}\n`;\n\nexport const Table = forwardRef<HTMLTableElement, TableProps>(\n  ({ density = 'normal', children, ...rest }, ref) => {\n    const tableProps = {\n      ref,\n      density,\n      ...rest,\n    };\n\n    return <StyledTable {...tableProps}>{children}</StyledTable>;\n  },\n);\n\nTable.displayName = 'Table';\n","import { useContext, createContext } from 'react';\nimport { HeaderValues } from '../Table.types';\n\ninterface CollapsibleTableContextProps {\n  isCollapsed?: boolean;\n  headerValues: HeaderValues;\n  definingColumnIndex: number[];\n}\n\nexport const CollapsibleTableContext =\n  createContext<CollapsibleTableContextProps>({\n    headerValues: [],\n    definingColumnIndex: [0],\n  });\nexport const useCollapsibleTableContext = () =>\n  useContext(CollapsibleTableContext);\n","import { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Table } from '../Table';\nimport { CollapsibleTableContext } from './Table.context';\nimport { CollapsibleTableProps } from '../Table.types';\n\ninterface StyledTableProps {\n  isCollapsed?: boolean;\n}\n\nconst StyledTable = styled(Table)<StyledTableProps>`\n  width: 100%;\n  ${({ withDividers }) =>\n    withDividers &&\n    css`\n      tr[data-isopencollapsibleheader='true'] {\n        border-bottom: none;\n      }\n    `}\n`;\n\nexport const CollapsibleTable = forwardRef<\n  HTMLTableElement,\n  CollapsibleTableProps\n>((props, ref) => {\n  const {\n    density = 'normal',\n    children,\n    isCollapsed,\n    headerValues,\n    definingColumnIndex = [0],\n    ...rest\n  } = props;\n\n  const tableProps = {\n    ref,\n    density,\n    isCollapsed,\n    ...rest,\n  };\n\n  return (\n    <CollapsibleTableContext.Provider\n      value={{\n        isCollapsed,\n        headerValues,\n        definingColumnIndex,\n      }}\n    >\n      <StyledTable {...tableProps}>{children}</StyledTable>\n    </CollapsibleTableContext.Provider>\n  );\n});\n\nCollapsibleTable.displayName = 'CollapsibleTable';\n","import { forwardRef, HTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\nconst StyledHead = styled.thead``;\n\nexport type TableHeadProps = HTMLAttributes<HTMLTableSectionElement>;\n\nexport const Head = forwardRef<HTMLTableSectionElement, TableHeadProps>(\n  ({ children, ...rest }, ref) => {\n    const headProps = {\n      ...rest,\n    };\n\n    return (\n      <StyledHead ref={ref} {...headProps}>\n        {children}\n      </StyledHead>\n    );\n  },\n);\n\nHead.displayName = 'Table.Head';\n","import { forwardRef, HTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\nconst StyledBody = styled.tbody``;\n\nexport type TableBodyProps = HTMLAttributes<HTMLTableSectionElement>;\n\nexport const Body = forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  ({ children, ...rest }, ref) => {\n    const bodyProps = {\n      ...rest,\n    };\n\n    return (\n      <StyledBody ref={ref} {...bodyProps}>\n        {children}\n      </StyledBody>\n    );\n  },\n);\n\nBody.displayName = 'Table.Body';\n","import { forwardRef, HTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\nconst StyledFoot = styled.tfoot``;\n\nexport type TableFootProps = HTMLAttributes<HTMLTableSectionElement>;\n\nexport const Foot = forwardRef<HTMLTableSectionElement, TableFootProps>(\n  ({ children, ...rest }, ref) => {\n    const footProps = {\n      ...rest,\n    };\n\n    return (\n      <StyledFoot ref={ref} {...footProps}>\n        {children}\n      </StyledFoot>\n    );\n  },\n);\n\nFoot.displayName = 'Table.Foot';\n","import styled, { css } from 'styled-components';\nimport {\n  getFontStyling,\n  defaultTypographyType,\n} from '@norges-domstoler/dds-typography';\nimport { focusVisibleInset } from '@norges-domstoler/dds-form';\n\nimport { RowMode, TableRowType } from './Table.types';\nimport { tableTokens } from './Table.tokens';\n\nconst { row } = tableTokens;\n\nexport const bodyRowStyles = (mode?: RowMode, selected?: boolean) => {\n  return css`\n    ${mode === 'sum' &&\n    css`\n      font-weight: 600;\n      border-top: ${row.body.mode.sum.borderTop};\n      border-bottom: ${row.body.mode.sum.borderBottom};\n      background-color: ${row.body.mode.sum.backgroundColor};\n    `}\n    ${selected &&\n    css`\n      background-color: ${row.body.selected.backgroundColor};\n    `}\n  `;\n};\n\ninterface StyledProps {\n  type: TableRowType;\n  mode?: RowMode;\n  selected?: boolean;\n  hoverable?: boolean;\n}\n\nexport const StyledRow = styled.tr<StyledProps>`\n  @media (prefers-reduced-motion: no-preference) {\n    transition:\n      background-color 0.2s,\n      border-color 0.2s,\n      box-shadow 0.2s;\n  }\n\n  ${getFontStyling(defaultTypographyType, true)}\n\n  ${({ type }) =>\n    type === 'head' &&\n    css`\n      font-weight: 600;\n      text-align: left;\n    `}\n  ${({ type, mode, selected, hoverable }) =>\n    type === 'body' &&\n    css`\n      &:nth-of-type(even) {\n        background-color: ${row.body.even.backgroundColor};\n        ${bodyRowStyles(mode, selected)}\n      }\n\n      &:nth-of-type(odd) {\n        background-color: ${row.body.odd.backgroundColor};\n        ${bodyRowStyles(mode, selected)}\n      }\n\n      ${hoverable &&\n      css`\n        &:hover {\n          background-color: ${row.body.hover.backgroundColor};\n        }\n      `}\n      &:focus-visible, &.focus-visible {\n        ${focusVisibleInset}\n      }\n    `}\n`;\n","import { forwardRef } from 'react';\nimport { TableRowProps } from './Table.types';\nimport { StyledRow } from './Table.styles';\n\nexport const Row = forwardRef<HTMLTableRowElement, TableRowProps>(\n  ({ type = 'body', mode = 'normal', children, ...rest }, ref) => {\n    const rowProps = {\n      type,\n      mode,\n      ...rest,\n    };\n\n    return (\n      <StyledRow ref={ref} {...rowProps}>\n        {children}\n      </StyledRow>\n    );\n  },\n);\n\nRow.displayName = 'Table.Row';\n","import {\n  ElementType,\n  forwardRef,\n  ThHTMLAttributes,\n  TdHTMLAttributes,\n} from 'react';\nimport styled, { css } from 'styled-components';\nimport { DescriptionListDesc } from '../DescriptionList';\nimport { tableTokens } from './Table.tokens';\n\nconst { cell } = tableTokens;\n\nconst getLayoutStyle = (layout: TableCellLayout) => {\n  switch (layout) {\n    case 'center':\n      return css`\n        justify-content: center;\n      `;\n    case 'right':\n      return css`\n        justify-content: flex-end;\n      `;\n    case 'text and icon':\n      return css`\n        gap: ${cell.layout.textAndIcon.gap};\n      `;\n    default:\n    case 'left':\n      return;\n  }\n};\n\ninterface StyledCellProps {\n  type: TableCellType;\n}\n\nconst StyledCell = styled.td<StyledCellProps>`\n  ${({ type }) =>\n    type === 'head' &&\n    css`\n      background-color: ${cell.head.backgroundColor};\n    `}\n`;\n\nconst InnerCell = styled.div<{ layout: TableCellLayout }>`\n  display: flex;\n  align-items: center;\n  ${({ layout }) => getLayoutStyle(layout)}\n`;\n\nexport type TableCellType = 'data' | 'head';\nexport type TableCellLayout = 'left' | 'right' | 'center' | 'text and icon';\nexport interface CollapsibleProps {\n  isCollapsibleChild?: boolean;\n}\n\nexport type TableCellProps = {\n  /**Type celle. Returnerer enten `<td>` eller `<th>`. */\n  type?: TableCellType;\n  /**Layout av innholdet i cellen. 'tekst and icon' legger `gap` mellom barna og andre barnet i cellen.  */\n  layout?: TableCellLayout;\n  /** Props ved bruk av `<CollapsibleRow>`. **OBS!** settes automatisk av forelder. */\n  collapsibleProps?: CollapsibleProps;\n} & (\n  | TdHTMLAttributes<HTMLTableCellElement>\n  | ThHTMLAttributes<HTMLTableCellElement>\n);\n\nconst getTableCellType = (type: TableCellType) => {\n  switch (type) {\n    case 'head':\n      return 'th';\n    default:\n    case 'data':\n      return 'td';\n  }\n};\n\nexport const Cell = forwardRef<HTMLTableCellElement, TableCellProps>(\n  (\n    { children, type = 'data', layout = 'left', collapsibleProps, ...rest },\n    ref,\n  ) => {\n    const as: ElementType = getTableCellType(type);\n\n    const { isCollapsibleChild } = collapsibleProps ?? {};\n\n    const cellProps = {\n      as: as,\n      type,\n      ...rest,\n    };\n\n    const innerCellProps = {\n      layout,\n    };\n\n    return isCollapsibleChild ? (\n      <DescriptionListDesc>{children}</DescriptionListDesc>\n    ) : (\n      <StyledCell ref={ref} {...cellProps}>\n        <InnerCell {...innerCellProps}>{children}</InnerCell>\n      </StyledCell>\n    );\n  },\n);\n\nCell.displayName = 'Table.Cell';\n","import {\n  forwardRef,\n  Children,\n  useState,\n  isValidElement,\n  cloneElement,\n  ReactElement,\n  Fragment,\n  useEffect,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  focusVisibleTransitionValue,\n  focusVisible,\n} from '@norges-domstoler/dds-form';\nimport {\n  removeButtonStyling,\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n  AnimatedChevronUpDown,\n} from '@norges-domstoler/dds-core';\n\nimport { Table } from '..';\nimport { DescriptionList, DescriptionListTerm } from '../../DescriptionList';\nimport { VisuallyHidden } from '../../VisuallyHidden';\nimport { Cell } from '../Cell';\nimport { useCollapsibleTableContext } from './Table.context';\nimport { TableRowProps } from '../Table.types';\nimport { StyledRow } from '../Table.styles';\nimport { tableTokens } from '../Table.tokens';\n\nconst { collapseButton } = tableTokens;\n\nconst CollapseButton = styled.button`\n  ${removeButtonStyling}\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: ${focusVisibleTransitionValue};\n  border-radius: ${collapseButton.borderRadius};\n  height: ${collapseButton.height};\n  width: ${collapseButton.width};\n  &:focus-visible {\n    ${focusVisible}\n  }\n`;\n\nconst DescriptionListCell = styled(Cell)`\n  & > div {\n    display: block;\n  }\n`;\n\nexport const CollapsibleRow = forwardRef<HTMLTableRowElement, TableRowProps>(\n  ({ type = 'body', mode = 'normal', children, ...rest }, ref) => {\n    const rowProps = {\n      type,\n      mode,\n      ...rest,\n    };\n    const { isCollapsed, headerValues, definingColumnIndex } =\n      useCollapsibleTableContext();\n\n    const [childrenCollapsed, setChildrenCollapsed] = useState(true);\n\n    useEffect(() => {\n      !isCollapsed && setChildrenCollapsed(true);\n    }, [isCollapsed]);\n\n    const collapsedHeaderValues = headerValues.filter(\n      (column, index) => definingColumnIndex.indexOf(index) === -1,\n    );\n\n    const childrenArray = Children.toArray(children);\n    const collapsedChildren = childrenArray.filter(\n      (column, index) => definingColumnIndex.indexOf(index) === -1,\n    );\n\n    const prefix = 'collapsibleRow';\n    const collapsibleIds: string[] = [];\n\n    const collapsedRenderedChildren =\n      isCollapsed && collapsedHeaderValues.length > 0\n        ? collapsedChildren.map(function (child, index) {\n            const id = derivativeIdGenerator(prefix, index.toString());\n            collapsibleIds.push(id);\n\n            return (\n              <Fragment key={`DL-${index}`}>\n                <DescriptionListTerm>\n                  {collapsedHeaderValues[index].content}\n                </DescriptionListTerm>\n                {isValidElement(child) &&\n                  cloneElement(child as ReactElement, {\n                    collapsibleProps: { isCollapsibleChild: true },\n                  })}\n              </Fragment>\n            );\n          })\n        : null;\n\n    const collapsedRows =\n      collapsedRenderedChildren && collapsedRenderedChildren.length > 0 ? (\n        <StyledRow type=\"body\">\n          <DescriptionListCell colSpan={definingColumnIndex.length + 1}>\n            <DescriptionList>{collapsedRenderedChildren}</DescriptionList>\n          </DescriptionListCell>\n        </StyledRow>\n      ) : null;\n\n    const definingColumnCells = childrenArray\n      .slice()\n      .filter((column, index) => definingColumnIndex.indexOf(index) > -1)\n      .sort((a, b) => {\n        return (\n          definingColumnIndex.indexOf(childrenArray.indexOf(a)) -\n          definingColumnIndex.indexOf(childrenArray.indexOf(b))\n        );\n      });\n\n    const headerRow = () => {\n      if (type !== 'head' || !isCollapsed) return null;\n\n      return (\n        <StyledRow ref={ref} {...rowProps}>\n          <>\n            {definingColumnCells}\n            <Table.Cell type=\"head\" layout=\"center\">\n              Utvid\n              <VisuallyHidden as=\"span\">raden</VisuallyHidden>\n            </Table.Cell>\n          </>\n        </StyledRow>\n      );\n    };\n\n    const idList = spaceSeparatedIdListGenerator(collapsibleIds);\n\n    const rowWithChevron = () => {\n      if (type !== 'body' || !isCollapsed) return null;\n\n      return (\n        <StyledRow\n          ref={ref}\n          {...rowProps}\n          data-isopencollapsibleheader={!childrenCollapsed && true}\n        >\n          {definingColumnCells}\n          <Table.Cell>\n            <CollapseButton\n              onClick={() => setChildrenCollapsed(!childrenCollapsed)}\n              aria-expanded={!childrenCollapsed}\n              aria-controls={idList}\n            >\n              <AnimatedChevronUpDown\n                isUp={childrenCollapsed ? false : true}\n                height=\"7.5px\"\n                width=\"12px\"\n              />\n            </CollapseButton>\n          </Table.Cell>\n        </StyledRow>\n      );\n    };\n\n    return isCollapsed &&\n      collapsedRenderedChildren &&\n      collapsedRenderedChildren.length > 0 ? (\n      <>\n        {headerRow()}\n        {type === 'body' && (\n          <>\n            {rowWithChevron()}\n            {childrenCollapsed ? null : collapsedRows}\n          </>\n        )}\n      </>\n    ) : (\n      <StyledRow ref={ref} {...rowProps}>\n        {children}\n      </StyledRow>\n    );\n  },\n);\n\nCollapsibleRow.displayName = 'CollapsibleTable.Row';\n","import { forwardRef, MouseEvent } from 'react';\nimport { Icon } from '@norges-domstoler/dds-icons';\nimport {\n  UnfoldMoreIcon,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@norges-domstoler/dds-icons';\nimport styled from 'styled-components';\nimport {\n  normalizeButton,\n  removeButtonStyling,\n} from '@norges-domstoler/dds-core';\nimport { focusVisible } from '@norges-domstoler/dds-form';\n\nimport { Cell, TableCellProps } from './Cell';\nimport { tableTokens } from './Table.tokens';\n\nconst { cell } = tableTokens;\n\nconst StyledButton = styled.button`\n  ${normalizeButton}\n  user-select: text;\n  ${removeButtonStyling}\n  display: flex;\n  align-items: center;\n  gap: ${cell.sort.gap};\n  &:focus-visible {\n    ${focusVisible}\n  }\n`;\n\nexport type SortOrder = 'ascending' | 'descending';\n\nexport type TableSortCellProps = {\n  /**Spesifiserer om kolonnen er sortert. */\n  isSorted?: boolean;\n  /**Sorteringsrekkefølge i kolonnen. Avgjør hvilket ikon skal vises i cellen. */\n  sortOrder?: SortOrder;\n  /**onClick-funksjon for sortering og annen logikk. */\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void;\n} & Omit<TableCellProps, 'type'>;\n\nconst makeSortIcon = (isSorted?: boolean, sortOrder?: SortOrder) => {\n  if (!isSorted || !sortOrder) {\n    return <Icon icon={UnfoldMoreIcon} iconSize=\"inherit\" />;\n  }\n\n  return sortOrder === 'ascending' ? (\n    <Icon icon={ChevronDownIcon} iconSize=\"inherit\" />\n  ) : (\n    <Icon icon={ChevronUpIcon} iconSize=\"inherit\" />\n  );\n};\n\nexport const SortCell = forwardRef<HTMLTableCellElement, TableSortCellProps>(\n  ({ isSorted, sortOrder, onClick, children, ...rest }, ref) => (\n    <Cell\n      ref={ref}\n      type=\"head\"\n      aria-sort={isSorted && sortOrder ? sortOrder : undefined}\n      {...rest}\n    >\n      <StyledButton\n        onClick={onClick}\n        aria-description=\"Aktiver for å endre sorteringsrekkefølge\"\n      >\n        {children} {makeSortIcon(isSorted, sortOrder)}\n      </StyledButton>\n    </Cell>\n  ),\n);\n\nSortCell.displayName = 'Table.SortCell';\n","import { HTMLAttributes, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { scrollbarStyling } from '../ScrollableContainer';\n\nconst Wrapper = styled.div<{ overflowX: boolean }>`\n  ${({ overflowX }) =>\n    overflowX &&\n    css`\n      overflow-x: auto;\n    `}\n  ${scrollbarStyling.webkit}\n  ${scrollbarStyling.firefox}\n`;\n\nexport type TableWrapperProps = HTMLAttributes<HTMLDivElement>;\n\nexport const TableWrapper = ({ children, ...rest }: TableWrapperProps) => {\n  const [overflowX, setOverflowX] = useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  function isOverflowingX(event: HTMLDivElement): boolean {\n    return event.offsetWidth < event.scrollWidth;\n  }\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (wrapperRef?.current && isOverflowingX(wrapperRef.current)) {\n      setOverflowX(true);\n      return;\n    }\n    setOverflowX(false);\n  }, [windowWidth]);\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  const wrapperProps = {\n    ref: wrapperRef,\n    overflowX,\n    ...rest,\n  };\n\n  return <Wrapper {...wrapperProps}>{children}</Wrapper>;\n};\n\nTableWrapper.displayName = 'Table.Wrapper';\n","import { Table as BaseTable } from './Table';\nimport { CollapsibleTable as BaseCollapsibleTable } from './collapsible/CollapsibleTable';\nimport {\n  TableProps,\n  TableDensity,\n  CollapsibleTableProps,\n  TableRowProps,\n  TableRowType,\n} from './Table.types';\nimport { Head, TableHeadProps } from './Head';\nimport { Body, TableBodyProps } from './Body';\nimport { Foot, TableFootProps } from './Foot';\nimport { Row } from './Row';\nimport { CollapsibleRow } from './collapsible/CollapsibleRow';\nimport { Cell, TableCellProps, TableCellLayout, TableCellType } from './Cell';\nimport { SortCell, TableSortCellProps, SortOrder } from './SortCell';\nimport { TableWrapper } from './TableWrapper';\n\ntype TableCompoundProps = typeof BaseTable & {\n  Wrapper: typeof TableWrapper;\n  Head: typeof Head;\n  Body: typeof Body;\n  Foot: typeof Foot;\n  Row: typeof Row;\n  Cell: typeof Cell;\n  SortCell: typeof SortCell;\n};\n\nconst Table = BaseTable as TableCompoundProps;\n\nTable.Wrapper = TableWrapper;\nTable.Head = Head;\nTable.Body = Body;\nTable.Cell = Cell;\nTable.SortCell = SortCell;\nTable.Row = Row;\nTable.Foot = Foot;\n\ntype CollapsibleTableCompoundProps = typeof BaseCollapsibleTable & {\n  Row: typeof CollapsibleRow;\n};\n\nconst CollapsibleTable = BaseCollapsibleTable as CollapsibleTableCompoundProps;\n\nCollapsibleTable.Row = CollapsibleRow;\n\nexport { Table };\nexport { CollapsibleTable };\n\nexport type {\n  TableCellProps,\n  TableDensity,\n  TableProps,\n  TableRowProps,\n  TableRowType,\n  TableHeadProps,\n  TableBodyProps,\n  TableFootProps,\n  TableSortCellProps,\n  SortOrder,\n  TableCellLayout,\n  TableCellType,\n  CollapsibleTableProps,\n};\n"],"names":["font","colors","border","spacing","iconSizes","borderRadius","ddsBaseTokens","row","cell","collapseButton","tableTokens","StyledTable","styled","selection","scrollbarStyling","density","css","stickyHeader","withDividers","Table","forwardRef","children","rest","ref","tableProps","jsx","CollapsibleTableContext","createContext","useCollapsibleTableContext","useContext","CollapsibleTable","props","isCollapsed","headerValues","definingColumnIndex","StyledHead","Head","headProps","StyledBody","Body","bodyProps","StyledFoot","Foot","footProps","bodyRowStyles","mode","selected","StyledRow","getFontStyling","defaultTypographyType","type","hoverable","focusVisibleInset","Row","rowProps","getLayoutStyle","layout","StyledCell","InnerCell","getTableCellType","Cell","collapsibleProps","as","isCollapsibleChild","cellProps","DescriptionListDesc","CollapseButton","removeButtonStyling","focusVisibleTransitionValue","focusVisible","DescriptionListCell","CollapsibleRow","childrenCollapsed","setChildrenCollapsed","useState","useEffect","collapsedHeaderValues","column","index","childrenArray","Children","collapsedChildren","prefix","collapsibleIds","collapsedRenderedChildren","child","id","derivativeIdGenerator","jsxs","Fragment2","DescriptionListTerm","isValidElement","cloneElement","collapsedRows","DescriptionList","definingColumnCells","a","b","headerRow","Fragment","VisuallyHidden","idList","spaceSeparatedIdListGenerator","rowWithChevron","AnimatedChevronUpDown","StyledButton","normalizeButton","makeSortIcon","isSorted","sortOrder","Icon","UnfoldMoreIcon","ChevronDownIcon","ChevronUpIcon","SortCell","onClick","Wrapper","overflowX","TableWrapper","setOverflowX","windowWidth","setWindowWidth","isOverflowingX","event","wrapperRef","useRef","handleResize","wrapperProps","BaseTable","BaseCollapsibleTable"],"mappings":"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"}
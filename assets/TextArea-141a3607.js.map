{"version":3,"file":"TextArea-141a3607.js","sources":["../../../../packages/components/src/components/TextArea/TextArea.tokens.tsx","../../../../packages/components/src/components/TextArea/TextArea.tsx"],"sourcesContent":["import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\n\nconst { spacing } = ddsBaseTokens;\n\nconst textarea = {\n  paddingBottom: spacing.SizesDdsSpacingLocalX05,\n};\n\nexport const textAreaTokens = {\n  textarea,\n};\n","import {\n  forwardRef,\n  TextareaHTMLAttributes,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  useCombinedRef,\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n} from '@norges-domstoler/dds-core';\nimport { Label } from '@norges-domstoler/dds-typography';\nimport { Property } from 'csstype';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\nimport {\n  StatefulInput,\n  StyledInputProps,\n  inputTypographyTypes,\n  CommonInputProps,\n  getDefaultText,\n  OuterInputContainer,\n} from '@norges-domstoler/dds-form';\n\nimport { scrollbarStyling } from '../ScrollableContainer';\nimport { textAreaTokens } from './TextArea.tokens';\nimport { renderInputMessage } from '../../utils/renderInputMessage';\n\nconst defaultWidth: Property.Width<string> = '320px';\nconst { textarea } = textAreaTokens;\n\nexport const StyledTextArea = styled(StatefulInput)<StyledInputProps>`\n  ${scrollbarStyling.webkit}\n  ${scrollbarStyling.firefox}\n  height: auto;\n  resize: vertical;\n  vertical-align: bottom;\n  padding-bottom: ${textarea.paddingBottom};\n  ${getFontStyling(inputTypographyTypes.medium)}\n`;\n\nexport type TextAreaProps = CommonInputProps &\n  TextareaHTMLAttributes<HTMLTextAreaElement>;\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (props, ref) => {\n    const {\n      id,\n      value,\n      defaultValue,\n      onChange,\n      errorMessage,\n      required,\n      disabled,\n      tip,\n      label,\n      'aria-required': ariaRequired,\n      'aria-describedby': ariaDescribedby,\n      className,\n      style,\n      width = defaultWidth,\n      ...rest\n    } = props;\n\n    const generatedId = useId();\n    const uniqueId = id ?? `${generatedId}-textArea`;\n\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n    const multiRef = useCombinedRef(ref, textAreaRef);\n    const [text, setText] = useState<string>(\n      getDefaultText(value, defaultValue)\n    );\n\n    useEffect(() => {\n      if (textAreaRef && textAreaRef.current) {\n        textAreaRef.current.style.height = `${\n          textAreaRef.current.scrollHeight + 2\n        }px`;\n      }\n    }, [text]);\n\n    const onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement> = (\n      event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n      setText(event.target.value);\n\n      if (onChange) {\n        onChange(event);\n      }\n    };\n\n    const hasErrorMessage = !!errorMessage;\n    const hasLabel = !!label;\n    const tipId = derivativeIdGenerator(uniqueId, 'tip');\n    const errorMessageId = derivativeIdGenerator(uniqueId, 'errorMessage');\n\n    const showRequiredStyling = required || !!ariaRequired;\n\n    const containerProps = {\n      width,\n      className,\n      style,\n    };\n\n    const textAreaProps = {\n      ref: multiRef,\n      onChange: onChangeHandler,\n      value,\n      defaultValue,\n      id: uniqueId,\n      disabled,\n      hasErrorMessage,\n      required,\n      'aria-required': ariaRequired,\n      'aria-describedby': spaceSeparatedIdListGenerator([\n        tip ? tipId : undefined,\n        errorMessage ? errorMessageId : undefined,\n        ariaDescribedby,\n      ]),\n      'aria-invalid': hasErrorMessage ? true : undefined,\n      ...rest,\n    };\n\n    return (\n      <OuterInputContainer {...containerProps}>\n        {hasLabel && (\n          <Label showRequiredStyling={showRequiredStyling} htmlFor={uniqueId}>\n            {label}\n          </Label>\n        )}\n        <StyledTextArea {...textAreaProps} as=\"textarea\" />\n        {renderInputMessage(tip, tipId, errorMessage, errorMessageId)}\n      </OuterInputContainer>\n    );\n  }\n);\n\nTextArea.displayName = 'TextArea';\n"],"names":["spacing","ddsBaseTokens","textarea","textAreaTokens","defaultWidth","StyledTextArea","styled","StatefulInput","scrollbarStyling","getFontStyling","inputTypographyTypes","TextArea","forwardRef","props","ref","id","value","defaultValue","onChange","errorMessage","required","disabled","tip","label","ariaRequired","ariaDescribedby","className","style","width","rest","generatedId","useId","uniqueId","textAreaRef","useRef","multiRef","useCombinedRef","text","setText","useState","getDefaultText","useEffect","onChangeHandler","event","hasErrorMessage","hasLabel","tipId","derivativeIdGenerator","errorMessageId","showRequiredStyling","containerProps","textAreaProps","spaceSeparatedIdListGenerator","jsxs","OuterInputContainer","jsx","Label","renderInputMessage"],"mappings":"upBAEA,KAAM,CAAE,QAAAA,CAAY,EAAAC,EAEdC,EAAW,CACf,cAAeF,EAAQ,uBACzB,EAEaG,EAAiB,CAAA,SAC5BD,CACF,ECoBAE,EAAA,QACA,CAAA,SAAAF,CAAA,EAAAC,EAEOE,GAAAC,EAAAC,CAAA;AAAA,IAA2CC,EAAA;AAAA,IAC7BA,EAAA;AAAA;AAAA;AAAA;AAAA,oBACAN,EAAA;AAAA,IAIQO,EAAAC,EAAA,MAAA;AAAA,EAOtBC,EAAAC,EAAA,WAAiB,CAAAC,EAAAC,IAAA,CAEpB,KAAA,CAAM,GAAAC,EACJ,MAAAC,EACA,aAAAC,EACA,SAAAC,EACA,aAAAC,EACA,SAAAC,EACA,SAAAC,EACA,IAAAC,EACA,MAAAC,EACA,gBAAAC,EACiB,mBAAAC,EACG,UAAAC,EACpB,MAAAC,EACA,MAAAC,EAAAxB,EACQ,GAAAyB,CACL,EAAAhB,EAGLiB,EAAAC,EAAAA,QACAC,EAAAjB,GAAA,GAAAe,aAEAG,EAAAC,SAAA,IAAA,EACAC,EAAAC,EAAAtB,EAAAmB,CAAA,EACA,CAAAI,EAAAC,CAAA,EAAAC,EAAA,SAAwBC,EAAAxB,EAAAC,CAAA,CACY,EAGpCwB,EAAAA,UAAA,IAAA,CACER,GAAAA,EAAA,UACEA,EAAA,QAAA,MAAA,OAAA,GAAAA,EAAA,QAAA,aAAA,MAGF,EAAA,CAAAI,CAAA,CAAA,EAGF,MAAAK,EAAAC,GAAA,CAGEL,EAAAK,EAAA,OAAA,KAAA,EAEAzB,GACEA,EAAAyB,CAAA,CACF,EAGFC,EAAA,CAAA,CAAAzB,EACA0B,EAAA,CAAA,CAAAtB,EACAuB,EAAAC,EAAAf,EAAA,KAAA,EACAgB,EAAAD,EAAAf,EAAA,cAAA,EAEAiB,EAAA7B,GAAA,CAAA,CAAAI,EAEA0B,EAAA,CAAuB,MAAAtB,EACrB,UAAAF,EACA,MAAAC,CACA,EAGFwB,EAAA,CAAsB,IAAAhB,EACf,SAAAO,EACK,MAAA1B,EACV,aAAAC,EACA,GAAAe,EACI,SAAAX,EACJ,gBAAAuB,EACA,SAAAxB,EACA,gBAAAI,EACiB,mBAAA4B,EAAA,CACiC9B,EAAAwB,EAAA,OAClC3B,EAAA6B,EAAA,OACkBvB,CAChC,CAAA,EACD,eAAAmB,EAAA,GAAA,OACwC,GAAAf,CACtC,EAGL,OAAAwB,EAAAC,EAAA,CAAA,GAAAJ,EAAA,SAAA,CAEKL,GAAAU,EAAAC,EAAA,CAAA,oBAAAP,EAAA,QAAAjB,EAAA,SAAAT,EAAA,EAGCgC,EAAAlD,GAAA,CAAA,GAAA8C,EAAA,GAAA,UAAA,CAAA,EAE+CM,EAAAnC,EAAAwB,EAAA3B,EAAA6B,CAAA,CACW,CAAA,CAAA,CAC9D,CAGN,EAEArC,EAAA,YAAA"}
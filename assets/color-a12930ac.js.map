{"version":3,"file":"color-a12930ac.js","sources":["../../../../packages/components/src/utils/color.tsx"],"sourcesContent":["import {\n  ddsBaseTokens,\n  ddsReferenceTokens,\n} from '@norges-domstoler/dds-design-tokens';\nimport { Property } from 'csstype';\n\nconst { colors } = ddsBaseTokens;\nconst { textDefault } = ddsReferenceTokens;\n\nexport type ColorAlphaFormat = 'hex8' | 'decimal';\n\nexport const convertAlpha = (\n  value: number | string,\n  typeFrom: ColorAlphaFormat,\n  typeTo: ColorAlphaFormat\n) => {\n  if (typeFrom === 'decimal' && typeTo === 'hex8') {\n    const numberValue = Number(value);\n\n    if (typeof numberValue !== 'number' || numberValue > 1 || numberValue < 0)\n      return '';\n    const hex8 = Math.round(\n      255 * (Math.round(numberValue * 100) / 100)\n    ).toString(16);\n\n    return hex8.length === 1 ? '0' + hex8 : hex8;\n  }\n  if (typeFrom === 'hex8' && typeTo === 'decimal') {\n    const regexCheck = new RegExp(/^[0-9a-fA-F]+$/).test(value.toString());\n    if (value.toString().length > 2 || regexCheck === false) return '';\n    const decimal =\n      Math.round((parseInt(value.toString(), 16) / 256) * 100) / 100;\n    return decimal;\n  }\n};\n\nexport const hexToRGBA = (hex: string): string => {\n  const r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16),\n    alpha = hex.length === 9 ? hex.slice(7, 9) : 'ff';\n\n  return `rgba(${r}, ${g}, ${b}, ${convertAlpha(alpha, 'hex8', 'decimal')})`;\n};\n\nconst getRGBValues = (value: string) =>\n  value.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i);\n\nexport const addAlphaToRGB = (rgb: string, alpha: number | string) => {\n  const values = getRGBValues(rgb);\n\n  return values\n    ? `rgba(${values[1]}, ${values[2]}, ${values[3]}, ${alpha})`\n    : '';\n};\n\nexport const RGBToHex = (value: string): string => {\n  const rgb = getRGBValues(value),\n    alpha = ((rgb && rgb[4]) || '').trim(),\n    hex = rgb\n      ? '#' +\n        (parseInt(rgb[1]) | (1 << 8)).toString(16).slice(1) +\n        (parseInt(rgb[2]) | (1 << 8)).toString(16).slice(1) +\n        (parseInt(rgb[3]) | (1 << 8)).toString(16).slice(1) +\n        convertAlpha(alpha, 'decimal', 'hex8')\n      : '';\n\n  return hex;\n};\n\nexport const changeRGBAAlpha = (value: string, alpha: number): string => {\n  if (value.slice(0, 5) !== 'rgba(' || value.slice(-1) !== ')') {\n    return '';\n  }\n\n  return value.replace(/[\\d\\.]+\\)$/g, alpha.toString() + ')');\n};\n\nexport const textColors = {\n  interactive: colors.DdsColorInteractiveBase,\n  primary: colors.DdsColorPrimaryBase,\n  danger: colors.DdsColorDangerBase,\n  success: colors.DdsColorSuccessBase,\n  warning: colors.DdsColorWarningBase,\n  onLight: textDefault.textColor,\n  onDark: colors.DdsColorNeutralsWhite,\n  gray1: colors.DdsColorNeutralsGray1,\n  gray2: colors.DdsColorNeutralsGray2,\n  gray3: colors.DdsColorNeutralsGray3,\n  gray4: colors.DdsColorNeutralsGray4,\n  gray5: colors.DdsColorNeutralsGray5,\n  gray6: colors.DdsColorNeutralsGray6,\n  gray7: colors.DdsColorNeutralsGray7,\n  gray8: colors.DdsColorNeutralsGray8,\n  gray9: colors.DdsColorNeutralsGray9,\n};\n\nexport type DDSTextColor =\n  | 'interactive'\n  | 'primary'\n  | 'danger'\n  | 'warning'\n  | 'success'\n  | 'onLight'\n  | 'onDark'\n  | 'gray1'\n  | 'gray2'\n  | 'gray3'\n  | 'gray4'\n  | 'gray5'\n  | 'gray6'\n  | 'gray7'\n  | 'gray8'\n  | 'gray9';\n\nexport const textColorsArray = [\n  'interactive',\n  'primary',\n  'danger',\n  'success',\n  'warning',\n  'onLight',\n  'onDark',\n  'gray1',\n  'gray2',\n  'gray3',\n  'gray4',\n  'gray5',\n  'gray6',\n  'gray7',\n  'gray8',\n  'gray9',\n];\n\nexport type TextColor = DDSTextColor | Property.Color;\n\nexport function isTextColor(color: string): color is DDSTextColor {\n  return textColorsArray.indexOf(color) !== -1;\n}\n\nexport const getTextColor = (color: TextColor): TextColor => {\n  if (isTextColor(color)) return textColors[color];\n  return color;\n};\n"],"names":["colors","ddsBaseTokens","textDefault","ddsReferenceTokens","changeRGBAAlpha","value","alpha","textColors","textColorsArray","isTextColor","color","getTextColor"],"mappings":"uDAMA,KAAM,CAAE,OAAAA,CAAW,EAAAC,EACb,CAAE,YAAAC,CAAgB,EAAAC,EA+DXC,EAAkB,CAACC,EAAeC,IACzCD,EAAM,MAAM,EAAG,CAAC,IAAM,SAAWA,EAAM,MAAM,EAAE,IAAM,IAChD,GAGFA,EAAM,QAAQ,cAAeC,EAAM,SAAA,EAAa,GAAG,EAG/CC,EAAa,CACxB,YAAaP,EAAO,wBACpB,QAASA,EAAO,oBAChB,OAAQA,EAAO,mBACf,QAASA,EAAO,oBAChB,QAASA,EAAO,oBAChB,QAASE,EAAY,UACrB,OAAQF,EAAO,sBACf,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,sBACd,MAAOA,EAAO,qBAChB,EAoBaQ,EAAkB,CAC7B,cACA,UACA,SACA,UACA,UACA,UACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,OACF,EAIO,SAASC,EAAYC,EAAsC,CACzD,OAAAF,EAAgB,QAAQE,CAAK,IAAM,EAC5C,CAEa,MAAAC,EAAgBD,GACvBD,EAAYC,CAAK,EAAUH,EAAWG,CAAK,EACxCA"}
{"version":3,"file":"Grid.stories-baabd933.js","sources":["../../../../packages/components/src/helpers/ScreenSize/ScreenSize.utils.tsx","../../../../packages/components/src/components/Grid/Grid.tokens.tsx","../../../../packages/components/src/components/Grid/Grid.context.tsx","../../../../packages/components/src/components/Grid/Grid.tsx","../../../../packages/components/src/components/Grid/GridChild.tsx"],"sourcesContent":["import { ScreenSize } from '../../hooks';\nimport { StandardProperties } from 'csstype';\n\nexport type ScreenSizeLiteral = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport const getLiteralScreenSize = (\n  screenSize: ScreenSize\n): ScreenSizeLiteral => {\n  switch (screenSize) {\n    case ScreenSize.XLarge:\n      return 'xl';\n    case ScreenSize.Large:\n      return 'lg';\n    case ScreenSize.Medium:\n      return 'md';\n    case ScreenSize.Small:\n      return 'sm';\n    case ScreenSize.XSmall:\n      return 'xs';\n  }\n};\n\nexport type BreakpointBasedProps<T extends keyof StandardProperties> = {\n  [k in ScreenSizeLiteral]?: StandardProperties[T];\n};\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { ScreenSize } from '../../hooks';\n\nconst { grid, spacing } = ddsBaseTokens;\n\nconst allColumns = '1 / -1';\nconst halfWayColumn: Record<ScreenSize, number> = {\n  [ScreenSize.XSmall]: grid.DdsGridXs0599Count / 2 + 1,\n  [ScreenSize.Small]: grid.DdsGridSm600959Count / 2 + 1,\n  [ScreenSize.Medium]: grid.DdsGridMd9601279Count / 2 + 1,\n  [ScreenSize.Large]: grid.DdsGridLg12801919Count / 2 + 1,\n  [ScreenSize.XLarge]: grid.DdsGridXl1920Count / 2 + 1,\n};\n\nexport const gridTokens = {\n  [ScreenSize.XSmall]: {\n    grid: {\n      columns: grid.DdsGridXs0599Count,\n      columnGap: grid.DdsGridXs0599GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX1,\n      marginRight: spacing.SizesDdsSpacingLayoutX1,\n    },\n\n    columns: {\n      firstHalf: {\n        gridColumn: allColumns,\n      },\n      secondHalf: {\n        gridColumn: allColumns,\n      },\n    },\n  },\n  [ScreenSize.Small]: {\n    grid: {\n      columns: grid.DdsGridSm600959Count,\n      columnGap: grid.DdsGridSm600959GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX2,\n      marginRight: spacing.SizesDdsSpacingLayoutX2,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Small]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Small]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.Medium]: {\n    grid: {\n      columns: grid.DdsGridMd9601279Count,\n      columnGap: grid.DdsGridMd9601279GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX4,\n      marginRight: spacing.SizesDdsSpacingLayoutX4,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Medium]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Medium]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.Large]: {\n    grid: {\n      columns: grid.DdsGridLg12801919Count,\n      columnGap: grid.DdsGridLg12801919GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX6,\n      marginRight: spacing.SizesDdsSpacingLayoutX6,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.Large]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.Large]} / -1`,\n      },\n    },\n  },\n  [ScreenSize.XLarge]: {\n    grid: {\n      columns: grid.DdsGridXl1920Count,\n      columnGap: grid.DdsGridXl1920GutterSize,\n      marginLeft: spacing.SizesDdsSpacingLayoutX10,\n      marginRight: spacing.SizesDdsSpacingLayoutX10,\n    },\n    columns: {\n      firstHalf: {\n        gridColumn: `1 / ${halfWayColumn[ScreenSize.XLarge]}`,\n      },\n      secondHalf: {\n        gridColumn: `${halfWayColumn[ScreenSize.XLarge]} / -1`,\n      },\n    },\n  },\n};\n","import { useContext, createContext } from 'react';\nimport { ScreenSize } from '../../hooks';\n\nexport type GridContextProps = {\n  screenSize: ScreenSize;\n};\n\nexport const GridContext = createContext<GridContextProps>({\n  screenSize: ScreenSize.Large,\n});\n\nexport const useGridContext = () => {\n  return useContext(GridContext);\n};\n","import styled, { css } from 'styled-components';\nimport { ScreenSize, useScreenSize } from '../../hooks';\nimport { BaseComponentPropsWithChildren, getBaseHTMLProps } from '../../types';\nimport { gridTokens } from './Grid.tokens';\nimport { GridContext } from './Grid.context';\nimport { HTMLAttributes } from 'react';\nimport { BreakpointBasedProps, getLiteralScreenSize } from '../../helpers';\n\ntype StyledGridProps = {\n  screenSize: ScreenSize;\n  maxWidth?: MaxWidthGrid;\n  rowGap?: RowGapGrid;\n};\n\nconst getHooksGridStyling = (\n  screenSize: ScreenSize,\n  maxWidth?: MaxWidthGrid,\n  rowGap?: RowGapGrid\n) => {\n  const tokens = gridTokens[screenSize].grid;\n  return {\n    gridTemplateColumns: `repeat(${tokens.columns}, minmax(0, 1fr))`,\n    columnGap: tokens.columnGap,\n    marginLeft: tokens.marginLeft,\n    marginRight: tokens.marginRight,\n    rowGap:\n      rowGap && rowGap[getLiteralScreenSize(screenSize)]\n        ? rowGap[getLiteralScreenSize(screenSize)]\n        : tokens.columnGap,\n    maxWidth:\n      maxWidth &&\n      maxWidth[getLiteralScreenSize(screenSize)] &&\n      maxWidth[getLiteralScreenSize(screenSize)],\n  };\n};\n\nconst StyledGrid = styled.div<StyledGridProps>`\n  display: grid;\n  ${({ maxWidth }) =>\n    css`\n      max-width: ${maxWidth};\n    `}\n  ${({ screenSize, maxWidth, rowGap }) =>\n    getHooksGridStyling(screenSize, maxWidth, rowGap)}\n`;\n\ntype RowGapGrid = BreakpointBasedProps<'rowGap'>;\ntype MaxWidthGrid = BreakpointBasedProps<'maxWidth'>;\n\ntype BaseGridProps = {\n  /**Maksimal bredde. Gjøres per brekkepunkt.  */\n  maxWidth?: MaxWidthGrid;\n  /** CSS `row-gap`. Gjøres per brekkepunkt. */\n  rowGap?: RowGapGrid;\n} & Pick<HTMLAttributes<HTMLElement>, 'style'>;\n\ntype GridDivProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**HTML tag som returneres. */\n    as: 'div';\n  } & BaseGridProps\n>;\ntype GridFormProps = BaseComponentPropsWithChildren<\n  HTMLFormElement,\n  { as: 'form' } & BaseGridProps\n>;\n\nexport type GridProps = GridDivProps | GridFormProps;\n\nexport const Grid = (props: GridProps) => {\n  const { id, className, children, htmlProps, as, ...rest } = props;\n  const screenSize = useScreenSize();\n  return (\n    <GridContext.Provider value={{ screenSize: screenSize }}>\n      {as === 'div' ? (\n        <StyledGrid\n          {...getBaseHTMLProps(id, className, htmlProps, rest)}\n          screenSize={screenSize}\n        >\n          {children}\n        </StyledGrid>\n      ) : (\n        <StyledGrid\n          {...getBaseHTMLProps(id, className, htmlProps, rest)}\n          screenSize={screenSize}\n          as={as}\n        >\n          {children}\n        </StyledGrid>\n      )}\n    </GridContext.Provider>\n  );\n};\n\nGrid.displayName = 'Grid';\n","import styled from 'styled-components';\nimport { ScreenSize } from '../../hooks';\nimport { gridTokens as tokens } from './Grid.tokens';\nimport { Property } from 'csstype';\nimport { useGridContext } from './Grid.context';\nimport { BaseComponentPropsWithChildren, getBaseHTMLProps } from '../../types';\nimport { HTMLAttributes } from 'react';\nimport { BreakpointBasedProps, getLiteralScreenSize } from '../../helpers';\n\ntype StyledGridChildProps = {\n  screenSize: ScreenSize;\n  columnsOccupied?: ColumnsOccupied;\n  justifySelf?: Property.JustifySelf;\n  gridRow?: Property.GridRow;\n};\n\nexport const isRelativeGridColumn = (\n  type: ColumnsOccupied | undefined\n): type is RelativeColumnsOccupied => {\n  return type === 'all' || type === 'firstHalf' || type === 'secondHalf';\n};\n\nexport const isGridColumn = (\n  type: ColumnsOccupied | undefined\n): type is GridColumnPerScreenSize => {\n  return (\n    (type as GridColumnPerScreenSize).xs !== undefined ||\n    (type as GridColumnPerScreenSize).sm !== undefined ||\n    (type as GridColumnPerScreenSize).md !== undefined ||\n    (type as GridColumnPerScreenSize).lg !== undefined ||\n    (type as GridColumnPerScreenSize).xl !== undefined\n  );\n};\n\nconst StyledGridChild = styled.div<StyledGridChildProps>`\n  grid-column: ${({ screenSize, columnsOccupied }) =>\n    columnsOccupied === 'all'\n      ? '1 / -1'\n      : isGridColumn(columnsOccupied)\n      ? columnsOccupied[getLiteralScreenSize(screenSize)]\n      : isRelativeGridColumn(columnsOccupied)\n      ? tokens[screenSize].columns[columnsOccupied].gridColumn\n      : ''};\n\n  justify-self: ${({ justifySelf }) => justifySelf && justifySelf};\n  grid-row: ${({ gridRow }) => gridRow && gridRow};\n`;\n\ntype RelativeColumnsOccupied = 'all' | 'firstHalf' | 'secondHalf';\ntype GridColumnPerScreenSize = BreakpointBasedProps<'gridColumn'>;\n\nexport type ColumnsOccupied = RelativeColumnsOccupied | GridColumnPerScreenSize;\nexport type GridChildProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**hvilke kolonner innholdet skal okkupere. Tar inn enten en string med relativ definisjon eller et objekt med egentilpassede `grid-column` CSS verdi definert for hver brekkepunkt. */\n    columnsOccupied?: ColumnsOccupied;\n    /**Plassering av innholdet på x-aksen. */\n    justifySelf?: Property.JustifySelf;\n    /**Hvilke rader innholdet skal okkupere. */\n    gridRow?: Property.GridRow;\n  }\n> &\n  Pick<HTMLAttributes<HTMLElement>, 'style'>;\n\nexport const GridChild = (props: GridChildProps) => {\n  const { id, className, htmlProps, children, ...rest } = props;\n  const { screenSize } = useGridContext();\n\n  return (\n    <StyledGridChild\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n      screenSize={screenSize}\n    >\n      {children}\n    </StyledGridChild>\n  );\n};\n\nGridChild.displayName = 'GridChild';\n"],"names":["getLiteralScreenSize","screenSize","ScreenSize","grid","spacing","ddsBaseTokens","allColumns","halfWayColumn","gridTokens","GridContext","createContext","useGridContext","useContext","getHooksGridStyling","maxWidth","rowGap","tokens","StyledGrid","styled","css","Grid","props","id","className","children","htmlProps","as","rest","useScreenSize","jsx","getBaseHTMLProps","isRelativeGridColumn","type","isGridColumn","StyledGridChild","columnsOccupied","justifySelf","gridRow","GridChild"],"mappings":"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"}
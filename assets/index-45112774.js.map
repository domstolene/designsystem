{"version":3,"file":"index-45112774.js","sources":["../../../../packages/components/src/components/Search/AutocompleteSearch.context.tsx","../../../../packages/components/src/components/Search/Search.tokens.tsx","../../../../packages/components/src/components/Search/Search.utils.ts","../../../../packages/components/src/components/Search/SearchSuggestions.tsx","../../../../packages/components/src/components/Search/Search.tsx","../../../../packages/components/src/components/Search/SearchAutocompleteWrapper.tsx","../../../../packages/components/src/components/Search/index.ts"],"sourcesContent":["import {\n  ChangeEvent,\n  createContext,\n  MouseEvent,\n  RefObject,\n  useContext,\n} from 'react';\n\nexport type AutocompleteSearchContextType = {\n  onValueChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onSugggestionClick?: (e: MouseEvent<HTMLButtonElement>) => void;\n  suggestions?: string[];\n  showSuggestions?: boolean;\n  inputValue?: string;\n  inputRef?: RefObject<HTMLInputElement> | null;\n  suggestionsRef?: RefObject<HTMLDivElement> | null;\n};\n\nexport const AutocompleteSearchContext =\n  createContext<AutocompleteSearchContextType>({});\n\nexport const useAutocompleteSearch = () => {\n  return useContext(AutocompleteSearchContext);\n};\n","import {\n  ddsBaseTokens,\n  ddsReferenceTokens,\n} from '@norges-domstoler/dds-design-tokens';\nimport { StaticTypographyType } from '@norges-domstoler/dds-typography';\nimport { SearchSize } from './Search';\n\nconst { spacing, iconSizes, colors } = ddsBaseTokens;\nconst { textDefault } = ddsReferenceTokens;\n\nexport const typographyTypes: { [k in SearchSize]: StaticTypographyType } = {\n  small: 'bodySans01',\n  medium: 'bodySans02',\n  large: 'bodySans04',\n};\n\nconst paddingLeftSmall = `${\n  spacing.SizesDdsSpacingLocalX075NumberPx +\n  iconSizes.DdsIconsizeSmallNumberPx +\n  spacing.SizesDdsSpacingLocalX05NumberPx\n}px`;\nconst paddingLeftMedium = `${\n  spacing.SizesDdsSpacingLocalX075NumberPx +\n  iconSizes.DdsIconsizeMediumNumberPx +\n  spacing.SizesDdsSpacingLocalX05NumberPx\n}px`;\n\nconst paddingLeftLarge = `${\n  spacing.SizesDdsSpacingLocalX075NumberPx +\n  iconSizes.DdsIconsizeMediumNumberPx +\n  spacing.SizesDdsSpacingLocalX05NumberPx\n}px`;\n\nconst input = {\n  base: {\n    paddingRight: spacing.SizesDdsSpacingLocalX25,\n    paddingLeft: spacing.SizesDdsSpacingLocalX3,\n  },\n  sizes: {\n    small: {\n      paddingTop: spacing.SizesDdsSpacingLocalX05,\n      paddingBottom: spacing.SizesDdsSpacingLocalX05,\n      paddingLeft: paddingLeftSmall,\n    },\n    medium: {\n      paddingTop: spacing.SizesDdsSpacingLocalX075,\n      paddingBottom: spacing.SizesDdsSpacingLocalX075,\n      paddingLeft: paddingLeftMedium,\n    },\n    large: {\n      paddingTop: spacing.SizesDdsSpacingLocalX1,\n      paddingBottom: spacing.SizesDdsSpacingLocalX1,\n      paddingLeft: paddingLeftLarge,\n    },\n  },\n};\n\nconst horisontalContainer = {\n  gap: spacing.SizesDdsSpacingLocalX05,\n};\n\nconst outerContainer = {\n  gap: spacing.SizesDdsSpacingLocalX0125,\n};\n\nconst searchIcon = {\n  base: {\n    left: spacing.SizesDdsSpacingLocalX075,\n    color: textDefault.textColor,\n  },\n  small: {\n    top: `calc(50% - ${iconSizes.DdsIconsizeSmallNumberPx / 2}px)`,\n  },\n  medium: {\n    top: `calc(50% - ${iconSizes.DdsIconsizeMediumNumberPx / 2}px)`,\n  },\n  large: {\n    top: `calc(50% - ${iconSizes.DdsIconsizeMediumNumberPx / 2}px)`,\n  },\n};\n\nconst clearButton = {\n  right: spacing.SizesDdsSpacingLocalX075,\n  top: `calc(50% - 14px)`, // Knappen er 28px høy. Trekker fra 14px for å få den midtstilt.\n  color: textDefault.textColor,\n};\n\nconst suggestionsContainer = {\n  marginTop: spacing.SizesDdsSpacingLocalX025,\n  border: `1px solid ${colors.DdsColorInteractiveBase}`,\n  boxShadow: `0 0 0 1px ${colors.DdsColorInteractiveBase}`,\n};\n\nconst suggestionsHeader = {\n  paddingLeft: spacing.SizesDdsSpacingLocalX1,\n};\n\nexport const searchTokens = {\n  input,\n  searchIcon,\n  clearButton,\n  horisontalContainer,\n  outerContainer,\n  suggestionsContainer,\n  suggestionsHeader,\n};\n","import { ChangeEvent } from 'react';\n\n/**\n * Lager en change-event som kan resette verdien i et input-felt.\n * Dette vil resultere i en event som har: event.target.value = ''.\n *\n * @param inputElementId Id'en til et gitt input-felt\n * @returns En change-event som har en tom streng som target value\n */\nexport function createEmptyChangeEvent(\n  inputElementId: string\n): ChangeEvent<HTMLInputElement> {\n  const inputElement = document.getElementById(\n    inputElementId\n  ) as HTMLInputElement;\n\n  inputElement.value = '';\n\n  const emptyChangeEvent: ChangeEvent<HTMLInputElement> = {\n    target: inputElement,\n    currentTarget: inputElement,\n    bubbles: true,\n    cancelable: false,\n    defaultPrevented: false,\n    eventPhase: 0,\n    isTrusted: false,\n    preventDefault: () => {},\n    stopPropagation: () => {},\n    nativeEvent: new Event('input'),\n    persist: () => {},\n    type: 'change',\n    timeStamp: Date.now(),\n    isDefaultPrevented: () => false,\n    isPropagationStopped: () => false,\n  };\n\n  return emptyChangeEvent;\n}\n","import styled from 'styled-components';\nimport { removeListStyling } from '@norges-domstoler/dds-core';\nimport { OverflowMenuItem } from '../OverflowMenu/OverflowMenuItem';\nimport { searchTokens as tokens, typographyTypes } from './Search.tokens';\nimport { Paper } from '@norges-domstoler/dds-core';\nimport { SearchProps, SearchSize } from './Search';\nimport { Typography } from '@norges-domstoler/dds-typography';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\nimport {\n  BaseComponentProps,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport { forwardRef, MouseEvent } from 'react';\nimport { useRoveFocus } from '@norges-domstoler/dds-core';\nimport { scrollbarStyling } from '../ScrollableContainer';\nimport { visibilityTransition } from '@norges-domstoler/dds-core';\nimport { derivativeIdGenerator } from '@norges-domstoler/dds-core';\n\nconst { suggestionsContainer, suggestionsHeader } = tokens;\n\ntype SuggestionsContainerProps = {\n  isHidden?: boolean;\n};\n\nconst SuggestionsContainer = styled(Paper)<SuggestionsContainerProps>`\n  ${({ isHidden }) => visibilityTransition(!isHidden)};\n  position: absolute;\n  top: 100%;\n  width: 100%;\n  max-height: 300px;\n  margin-top: ${suggestionsContainer.marginTop};\n  border: ${suggestionsContainer.border};\n  box-shadow: ${suggestionsContainer.boxShadow};\n  z-index: 80;\n  overflow-y: scroll;\n  ${scrollbarStyling.firefox}\n  ${scrollbarStyling.webkit}\n`;\n\ntype MenuItemProps = {\n  size: SearchSize;\n};\n\nconst MenuItem = styled(OverflowMenuItem)<MenuItemProps>`\n  ${({ size }) => getFontStyling(typographyTypes[size])}\n`;\n\nconst SuggestionsList = styled.ul`\n  ${removeListStyling}\n`;\n\nconst SuggestionsHeader = styled(Typography)`\n  padding-left: ${suggestionsHeader.paddingLeft};\n`;\n\nexport type SearchSuggestionsProps = BaseComponentProps<\n  HTMLDivElement,\n  Pick<SearchProps, 'componentSize'> & {\n    /**Forslag som vises i listen. */\n    suggestions?: string[];\n    /** Om listen skal vises. */\n    showSuggestions?: boolean;\n    /**Callback når et forslag blir valgt, inkludert søkefunksjon. */\n    onSuggestionClick?: (e: MouseEvent<HTMLButtonElement>) => void;\n    /** Maks antall forslag vist i listen. */\n    maxSuggestions?: number;\n    /**Id til `<Search>`. */\n    searchId: string;\n  }\n>;\n\nexport const SearchSuggestions = forwardRef<\n  HTMLDivElement,\n  SearchSuggestionsProps\n>((props, ref) => {\n  const {\n    id,\n    searchId,\n    className,\n    htmlProps,\n    suggestions = [],\n    showSuggestions,\n    componentSize,\n    onSuggestionClick,\n    maxSuggestions,\n    ...rest\n  } = props;\n\n  const suggestionsHeaderId = derivativeIdGenerator(\n    searchId,\n    'suggestions-header'\n  );\n\n  const [focus, setFocus] = useRoveFocus(\n    suggestions && suggestions.length,\n    !showSuggestions\n  );\n\n  const suggestionsToRender = maxSuggestions\n    ? suggestions?.slice(maxSuggestions)\n    : suggestions;\n\n  const renderedSuggestions = (\n    <SuggestionsList role=\"listbox\" aria-labelledby={suggestionsHeaderId}>\n      {suggestionsToRender.map((suggestion, index) => {\n        return (\n          <li key={index} role=\"option\">\n            <MenuItem\n              index={index}\n              focus={focus === index && showSuggestions}\n              setFocus={setFocus}\n              aria-label={`søk på ${suggestion}`}\n              onClick={onSuggestionClick}\n              title={suggestion}\n              aria-setsize={suggestionsToRender.length}\n              aria-posinset={index}\n              size={componentSize}\n            ></MenuItem>\n          </li>\n        );\n      })}\n    </SuggestionsList>\n  );\n\n  const isHidden = !showSuggestions;\n\n  return (\n    <SuggestionsContainer\n      {...getBaseHTMLProps(id, className, htmlProps, rest)}\n      ref={ref}\n      isHidden={isHidden}\n      aria-hidden={isHidden}\n    >\n      <SuggestionsHeader\n        typographyType=\"supportingStyleTiny01\"\n        forwardedAs=\"span\"\n        id={suggestionsHeaderId}\n      >\n        Søkeforslag\n      </SuggestionsHeader>\n      {renderedSuggestions}\n    </SuggestionsContainer>\n  );\n});\n\nSearchSuggestions.displayName = 'SearchSuggestions';\n","import {\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n  useCombinedRef,\n} from '@norges-domstoler/dds-core';\nimport {\n  Input as BaseInput,\n  InputProps as BaseInputProps,\n} from '@norges-domstoler/dds-form';\nimport {\n  CloseSmallIcon,\n  Icon,\n  IconSize,\n  SearchIcon,\n} from '@norges-domstoler/dds-icons';\nimport { getFontStyling, Label } from '@norges-domstoler/dds-typography';\nimport {\n  ButtonHTMLAttributes,\n  ChangeEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  MouseEvent,\n  useId,\n  useState,\n} from 'react';\nimport styled, { css } from 'styled-components';\nimport { renderInputMessage } from '../../utils/renderInputMessage';\nimport { Button } from '../Button';\nimport { VisuallyHidden } from '../VisuallyHidden';\nimport { useAutocompleteSearch } from './AutocompleteSearch.context';\nimport { searchTokens as tokens, typographyTypes } from './Search.tokens';\nimport { createEmptyChangeEvent } from './Search.utils';\nimport { SearchSuggestions } from './SearchSuggestions';\n\nconst { input, outerContainer, horisontalContainer, searchIcon, clearButton } =\n  tokens;\n\nconst getIconSize = (size: SearchSize): IconSize => {\n  switch (size) {\n    case 'large':\n      return 'medium';\n    case 'medium':\n      return 'medium';\n    case 'small':\n      return 'small';\n  }\n};\n\ntype InputProps = { componentSize: SearchSize };\n\nconst Input = styled(BaseInput)<InputProps>`\n  &[type='search']::-webkit-search-decoration,\n  &[type='search']::-webkit-search-cancel-button,\n  &[type='search']::-webkit-search-results-button,\n  &[type='search']::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n  padding-right: ${input.base.paddingRight};\n\n  ${({ componentSize }) =>\n    css`\n      padding-top: ${input.sizes[componentSize].paddingTop};\n      padding-bottom: ${input.sizes[componentSize].paddingBottom};\n      padding-left: ${input.sizes[componentSize].paddingLeft};\n      ${getFontStyling(typographyTypes[componentSize])}\n    `}\n`;\n\ntype StyledSearchIconProps = {\n  size: SearchSize;\n};\n\nconst StyledSearchIcon = styled(Icon)<StyledSearchIconProps>`\n  position: absolute;\n  left: ${searchIcon.base.left};\n  color: ${searchIcon.base.color};\n  ${({ size }) => css`\n    top: ${tokens.searchIcon[size].top};\n  `}\n  z-index: 1;\n`;\n\nconst StyledClearButton = styled(Button)`\n  position: absolute;\n  right: ${clearButton.right};\n  color: ${clearButton.color};\n  top: ${clearButton.top};\n`;\n\nconst OuterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${outerContainer.gap};\n`;\n\ntype HorisontalContainerProps = {\n  hasSearchButton: boolean;\n};\n\nconst HorisontalContainer = styled.div<HorisontalContainerProps>`\n  ${props =>\n    props.hasSearchButton &&\n    css`\n      display: grid;\n      grid-template-columns: 1fr auto;\n      gap: ${horisontalContainer.gap};\n    `}\n`;\n\nconst InputContainer = styled.div`\n  position: relative;\n  display: flex;\n`;\n\nexport type SearchSize = 'small' | 'medium' | 'large';\ntype ButtonProps = {\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void;\n  label?: string;\n  loading?: boolean;\n  purpose?: 'primary' | 'secondary';\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport type SearchProps = Pick<BaseInputProps, 'tip' | 'label'> & {\n  /**Størrelsen på komponenten. */\n  componentSize?: SearchSize;\n  /**Props for søkeknappen. */\n  buttonProps?: ButtonProps;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport const Search = forwardRef<HTMLInputElement, SearchProps>(\n  (\n    {\n      componentSize = 'medium',\n      buttonProps,\n      name,\n      label,\n      tip,\n      id,\n      value,\n      onChange,\n      className,\n      style,\n      'aria-describedby': ariaDescribedby,\n      ...rest\n    },\n    ref\n  ) => {\n    const generatedId = useId();\n    const uniqueId = id ?? `${generatedId}-searchInput`;\n    const hasLabel = !!label;\n    const tipId = derivativeIdGenerator(uniqueId, 'tip');\n    const suggestionsId = derivativeIdGenerator(uniqueId, 'suggestions');\n    const suggestionsDescriptionId = derivativeIdGenerator(\n      uniqueId,\n      'suggestions-description'\n    );\n\n    const [hasValue, setHasValue] = useState(!!value);\n\n    const context = useAutocompleteSearch();\n\n    const combinedRef = context.inputRef\n      ? useCombinedRef(context.inputRef, ref)\n      : ref;\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setHasValue(e.target.value !== '');\n\n      context.onValueChange && context.onValueChange(e);\n      onChange && onChange(e);\n    };\n\n    const clearInput = () => {\n      const emptyChangeEvent = createEmptyChangeEvent(uniqueId);\n      handleChange(emptyChangeEvent);\n    };\n\n    const containerProps = {\n      className,\n      style,\n    };\n\n    const inputProps = {\n      ...rest,\n      ref: combinedRef,\n      componentSize,\n      name,\n      type: 'search',\n      id: uniqueId,\n      'aria-describedby': spaceSeparatedIdListGenerator([\n        tip ? tipId : undefined,\n        context.suggestions ? suggestionsDescriptionId : undefined,\n        ariaDescribedby,\n      ]),\n      value: context.inputValue !== undefined ? context.inputValue : value,\n      onChange: handleChange,\n      autoComplete: 'off',\n    };\n\n    const {\n      label: buttonLabel,\n      onClick,\n      ...otherButtonProps\n    } = buttonProps || {};\n\n    const hasSuggestions = !!context.suggestions;\n    const showSearchButton = !!buttonProps && !!onClick;\n\n    return (\n      <OuterContainer>\n        {hasLabel && <Label htmlFor={uniqueId}>{label}</Label>}\n        <div>\n          <HorisontalContainer\n            hasSearchButton={showSearchButton}\n            {...containerProps}\n          >\n            <InputContainer>\n              <StyledSearchIcon\n                icon={SearchIcon}\n                size={componentSize}\n                iconSize={getIconSize(componentSize)}\n              />\n              <Input\n                {...inputProps}\n                aria-autocomplete={hasSuggestions ? 'list' : undefined}\n                aria-controls={hasSuggestions ? suggestionsId : undefined}\n                aria-expanded={context.showSuggestions}\n                role={hasSuggestions ? 'combobox' : undefined}\n              />\n              {hasSuggestions && (\n                <>\n                  <SearchSuggestions\n                    id={suggestionsId}\n                    ref={context.suggestionsRef}\n                    searchId={uniqueId}\n                    onSuggestionClick={context.onSugggestionClick}\n                    suggestions={context.suggestions}\n                    showSuggestions={context.showSuggestions}\n                    componentSize={componentSize}\n                  />\n                  <VisuallyHidden id={suggestionsDescriptionId} as=\"span\">\n                    Bla i søkeforslag med piltaster når listen er utvidet.\n                  </VisuallyHidden>\n                </>\n              )}\n              {hasValue && (\n                <StyledClearButton\n                  icon={CloseSmallIcon}\n                  size=\"tiny\"\n                  purpose=\"secondary\"\n                  appearance=\"borderless\"\n                  aria-label=\"Tøm\"\n                  onClick={clearInput}\n                />\n              )}\n            </InputContainer>\n            {showSearchButton && (\n              <Button\n                size={componentSize}\n                label={buttonLabel || 'Søk'}\n                onClick={onClick}\n                {...otherButtonProps}\n              />\n            )}\n          </HorisontalContainer>\n          {renderInputMessage(tip, tipId)}\n        </div>\n      </OuterContainer>\n    );\n  }\n);\n\nSearch.displayName = 'Search';\n","import {\n  ChangeEvent,\n  MouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useOnClickOutside, useOnKeyDown } from '@norges-domstoler/dds-core';\nimport { searchFilter } from '@norges-domstoler/dds-core';\nimport {\n  AutocompleteSearchContext,\n  AutocompleteSearchContextType,\n} from './AutocompleteSearch.context';\n\ntype WeightedValue = {\n  text: string;\n  relevance: number;\n};\n\nexport type WeightedSearchData = {\n  array: WeightedValue[];\n  sortFunction?: (a: WeightedValue, b: WeightedValue) => number;\n};\n\nexport type SearchData = {\n  array: string[];\n  sortFunction?: (a: string, b: string) => number;\n};\n\nexport type SearchAutocompleteWrapperProps = {\n  /**Array med data som kan søkes på og eventuelt tilhørende sorteringsfunksjon. Array kan bestå av elementer av typen `string`  eller objekter med vekt og tekst.*/\n  data?: SearchData | WeightedSearchData;\n  /** Ekstra callback ved `onChange` i `<Search>`. */\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  /**Callback når et forslag blir valgt, inkludert søkefunksjon. */\n  onSuggestionSelection?: () => void;\n  /** Custom filter for forslag. */\n  filter?: (sugestion: string, query: string) => boolean;\n  /**Minst lengde på query når forslag skal vises. */\n  queryLength?: number;\n  /** Barnet til komponenten (`<Search />`). */\n  children?: ReactNode;\n  /**Initielle `value` i `<Search>`. */\n  value?: string;\n};\n\nexport const SearchAutocompleteWrapper = (\n  props: SearchAutocompleteWrapperProps\n) => {\n  const {\n    value,\n    data,\n    filter,\n    queryLength = 2,\n    onChange,\n    onSuggestionSelection,\n    children,\n  } = props;\n\n  const [inputValue, setInputValue] = useState(value || '');\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const closeSuggestions = () =>\n    showSuggestions === true && setShowSuggestions(false);\n\n  const openSuggestions = () =>\n    showSuggestions === false && setShowSuggestions(true);\n\n  useEffect(() => {\n    if (suggestions.length > 0) {\n      openSuggestions();\n    } else {\n      closeSuggestions();\n    }\n  }, [suggestions]);\n\n  const isWeightedValueData = (\n    data: SearchData | WeightedSearchData\n  ): data is WeightedSearchData =>\n    (data as WeightedSearchData).array[0].relevance !== undefined;\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    handleSetInputValue(query);\n    let finalSuggestions: string[] = [];\n\n    if (query.length >= queryLength) {\n      if (data) {\n        if (isWeightedValueData(data)) {\n          const { sortFunction, array } = data;\n\n          const filteredSuggestions: WeightedValue[] = array.filter(\n            suggestion =>\n              filter\n                ? filter(suggestion.text, query)\n                : searchFilter(suggestion.text, query)\n          );\n\n          finalSuggestions = filteredSuggestions\n            .sort(sortFunction ? (a, b) => sortFunction(a, b) : undefined)\n            .map(item => item.text);\n        } else {\n          const { sortFunction, array } = data;\n\n          const filteredSuggestions: string[] = array.filter(suggestion =>\n            filter ? filter(suggestion, query) : searchFilter(suggestion, query)\n          );\n\n          finalSuggestions = filteredSuggestions.sort(\n            sortFunction ? (a, b) => sortFunction(a, b) : undefined\n          );\n        }\n      }\n      setSuggestions(finalSuggestions);\n    } else {\n      setSuggestions([]);\n    }\n    onChange && onChange(e);\n  };\n\n  const handleSuggestionClick = (e: MouseEvent<HTMLButtonElement>) => {\n    setSuggestions([]);\n    handleSetInputValue((e.target as HTMLButtonElement).innerText);\n    onSuggestionSelection && onSuggestionSelection();\n    closeSuggestions();\n  };\n\n  const handleSetInputValue = (value: string | undefined) => {\n    setInputValue(value || '');\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const suggestionsRef = useRef<HTMLDivElement>(null);\n\n  useOnClickOutside([inputRef.current, suggestionsRef.current], () => {\n    closeSuggestions();\n  });\n\n  useOnKeyDown('Tab', () => closeSuggestions());\n\n  const contextProps: AutocompleteSearchContextType = {\n    showSuggestions,\n    inputRef,\n    suggestionsRef,\n    suggestions,\n    onValueChange: handleChange,\n    inputValue,\n    onSugggestionClick: handleSuggestionClick,\n  };\n  return (\n    <AutocompleteSearchContext.Provider value={contextProps}>\n      {children}\n    </AutocompleteSearchContext.Provider>\n  );\n};\n\nSearchAutocompleteWrapper.displayName = 'SearchAutocompleteWrapper';\n","import { Search as BaseSearch, SearchProps, SearchSize } from './Search';\nimport {\n  SearchAutocompleteWrapper,\n  SearchAutocompleteWrapperProps,\n  SearchData,\n  WeightedSearchData,\n} from './SearchAutocompleteWrapper';\n\nimport { SearchSuggestions, SearchSuggestionsProps } from './SearchSuggestions';\n\ntype SearchCompoundProps = typeof BaseSearch & {\n  AutocompleteWrapper: typeof SearchAutocompleteWrapper;\n  Suggestions: typeof SearchSuggestions;\n};\n\nconst Search = BaseSearch as SearchCompoundProps;\n\nSearch.AutocompleteWrapper = SearchAutocompleteWrapper;\nSearch.Suggestions = SearchSuggestions;\n\nexport { Search };\n\nexport type {\n  SearchProps,\n  SearchSize,\n  SearchData,\n  WeightedSearchData,\n  SearchAutocompleteWrapperProps,\n  SearchSuggestionsProps,\n};\n"],"names":["AutocompleteSearchContext","createContext","useAutocompleteSearch","useContext","spacing","iconSizes","colors","ddsBaseTokens","textDefault","ddsReferenceTokens","typographyTypes","paddingLeftSmall","paddingLeftMedium","paddingLeftLarge","input","horisontalContainer","outerContainer","searchIcon","clearButton","suggestionsContainer","suggestionsHeader","searchTokens","createEmptyChangeEvent","inputElementId","inputElement","tokens","SuggestionsContainer","styled","Paper","isHidden","visibilityTransition","scrollbarStyling","MenuItem","OverflowMenuItem","size","getFontStyling","SuggestionsList","removeListStyling","SuggestionsHeader","Typography","SearchSuggestions","forwardRef","props","ref","id","searchId","className","htmlProps","suggestions","showSuggestions","componentSize","onSuggestionClick","maxSuggestions","rest","suggestionsHeaderId","derivativeIdGenerator","focus","setFocus","useRoveFocus","suggestionsToRender","renderedSuggestions","jsx","suggestion","index","jsxs","getBaseHTMLProps","getIconSize","Input","BaseInput","css","StyledSearchIcon","Icon","StyledClearButton","Button","OuterContainer","HorisontalContainer","InputContainer","Search","buttonProps","name","label","tip","value","onChange","style","ariaDescribedby","generatedId","useId","uniqueId","hasLabel","tipId","suggestionsId","suggestionsDescriptionId","hasValue","setHasValue","useState","context","combinedRef","useCombinedRef","handleChange","e","clearInput","emptyChangeEvent","containerProps","inputProps","spaceSeparatedIdListGenerator","buttonLabel","onClick","otherButtonProps","hasSuggestions","showSearchButton","Label","SearchIcon","Fragment","VisuallyHidden","CloseSmallIcon","renderInputMessage","SearchAutocompleteWrapper","data","filter","queryLength","onSuggestionSelection","children","inputValue","setInputValue","setSuggestions","setShowSuggestions","closeSuggestions","openSuggestions","useEffect","isWeightedValueData","query","handleSetInputValue","finalSuggestions","sortFunction","array","searchFilter","a","item","handleSuggestionClick","inputRef","useRef","suggestionsRef","useOnClickOutside","useOnKeyDown","contextProps","BaseSearch"],"mappings":"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"}
{"version":3,"file":"InlineEditInput-84cbd842.js","sources":["../../../../packages/components/src/components/InlineEdit/InlineInput.tsx","../../../../packages/components/src/components/InlineEdit/InlineEditInput.tsx"],"sourcesContent":["import { forwardRef, InputHTMLAttributes, useId, useRef } from 'react';\nimport { EditIcon } from '../../icons/tsx';\nimport { Icon } from '../Icon';\nimport {\n  InputContainer,\n  OuterInputContainer,\n  renderInputMessage,\n} from '../../helpers';\nimport {\n  derivativeIdGenerator,\n  spaceSeparatedIdListGenerator,\n} from '../../utils';\nimport {\n  IconWrapper,\n  defaultWidth,\n  StyledInlineInput,\n} from './InlineEdit.styles';\nimport { BaseInlineInputProps } from './InlineEdit.types';\nimport { inlineEditVisuallyHidden } from './InlineEdit.utils';\nimport { useCombinedRef } from '../../hooks';\n\nexport type InlineInputProps = BaseInlineInputProps &\n  InputHTMLAttributes<HTMLInputElement>;\n\nexport const InlineInput = forwardRef<HTMLInputElement, InlineInputProps>(\n  (props, ref) => {\n    const {\n      id,\n      error,\n      errorMessage,\n      isEditing,\n      width = defaultWidth,\n      'aria-describedby': ariaDescribedby,\n      emptiable,\n      hideIcon,\n      ...rest\n    } = props;\n\n    const genereatedId = useId();\n    const uniqueId = id ?? `${genereatedId}-InlineInput`;\n    const hasErrorMessage = !!errorMessage;\n    const hasError = !!error;\n    const hasErrorState = hasError || hasErrorMessage;\n    const errorMessageId = derivativeIdGenerator(uniqueId, 'errorMessage');\n    const descId = derivativeIdGenerator(uniqueId, 'desc');\n\n    const inputRef = useRef<HTMLInputElement>(null);\n    const combinedRef = useCombinedRef(ref, inputRef);\n\n    return (\n      <OuterInputContainer width={width}>\n        <InputContainer>\n          {!isEditing && !hideIcon && (\n            <IconWrapper\n              onClick={() => {\n                inputRef.current?.focus();\n              }}\n            >\n              <Icon icon={EditIcon} iconSize=\"small\" />\n            </IconWrapper>\n          )}\n          <StyledInlineInput\n            {...rest}\n            id={uniqueId}\n            ref={combinedRef}\n            hasErrorMessage={hasErrorState}\n            isEditing={isEditing}\n            hideIcon={hideIcon}\n            aria-describedby={spaceSeparatedIdListGenerator([\n              hasErrorMessage ? errorMessageId : undefined,\n              descId,\n              ariaDescribedby,\n            ])}\n            aria-invalid={hasErrorState}\n          />\n        </InputContainer>\n        {inlineEditVisuallyHidden(descId, emptiable)}\n        {renderInputMessage(undefined, undefined, errorMessage, errorMessageId)}\n      </OuterInputContainer>\n    );\n  }\n);\n\nInlineInput.displayName = 'InlineInput';\n","import { forwardRef, useRef } from 'react';\nimport { InlineEdit } from './InlineEdit';\nimport { useCombinedRef } from '../../hooks';\nimport { InlineEditInputProps } from './InlineEdit.types';\nimport { InlineInput } from './InlineInput';\n\nexport const InlineEditInput = forwardRef<\n  HTMLInputElement,\n  InlineEditInputProps\n>((props, ref) => {\n  const { onSetValue, emptiable, value, onFocus, onChange, onBlur, ...rest } =\n    props;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const combinedRef = useCombinedRef(ref, inputRef);\n  return (\n    <InlineEdit\n      onSetValue={onSetValue}\n      emptiable={emptiable}\n      inputRef={inputRef}\n      value={value}\n      onFocus={onFocus}\n      onChange={onChange}\n      onBlur={onBlur}\n    >\n      <InlineInput {...rest} ref={combinedRef} />\n    </InlineEdit>\n  );\n});\n"],"names":["InlineInput","forwardRef","props","ref","id","error","errorMessage","isEditing","width","defaultWidth","ariaDescribedby","emptiable","hideIcon","rest","genereatedId","useId","uniqueId","hasErrorMessage","hasErrorState","errorMessageId","derivativeIdGenerator","descId","inputRef","useRef","combinedRef","useCombinedRef","jsxs","OuterInputContainer","InputContainer","jsx","IconWrapper","_a","Icon","EditIcon","StyledInlineInput","spaceSeparatedIdListGenerator","inlineEditVisuallyHidden","renderInputMessage","InlineEditInput","onSetValue","value","onFocus","onChange","onBlur","InlineEdit"],"mappings":"ucAwBO,MAAMA,EAAcC,EAAA,WACzB,CAACC,EAAOC,IAAQ,CACR,KAAA,CACJ,GAAAC,EACA,MAAAC,EACA,aAAAC,EACA,UAAAC,EACA,MAAAC,EAAQC,EACR,mBAAoBC,EACpB,UAAAC,EACA,SAAAC,EACA,GAAGC,CACD,EAAAX,EAEEY,EAAeC,EAAAA,QACfC,EAAWZ,GAAM,GAAGU,gBACpBG,EAAkB,CAAC,CAACX,EAEpBY,EADW,CAAC,CAACb,GACeY,EAC5BE,EAAiBC,EAAsBJ,EAAU,cAAc,EAC/DK,EAASD,EAAsBJ,EAAU,MAAM,EAE/CM,EAAWC,SAAyB,IAAI,EACxCC,EAAcC,EAAetB,EAAKmB,CAAQ,EAG9C,OAAAI,EAACC,GAAoB,MAAAnB,EACnB,SAAA,CAAAkB,EAACE,EACE,CAAA,SAAA,CAAC,CAAArB,GAAa,CAACK,GACdiB,EAACC,EAAA,CACC,QAAS,IAAM,QACbC,EAAAT,EAAS,UAAT,MAAAS,EAAkB,OACpB,EAEA,SAACF,EAAAG,EAAA,CAAK,KAAMC,EAAU,SAAS,QAAQ,CAAA,CACzC,EAEFJ,EAACK,EAAA,CACE,GAAGrB,EACJ,GAAIG,EACJ,IAAKQ,EACL,gBAAiBN,EACjB,UAAAX,EACA,SAAAK,EACA,mBAAkBuB,EAA8B,CAC9ClB,EAAkBE,EAAiB,OACnCE,EACAX,CAAA,CACD,EACD,eAAcQ,CAAA,CAChB,CAAA,EACF,EACCkB,EAAyBf,EAAQV,CAAS,EAC1C0B,EAAmB,OAAW,OAAW/B,EAAca,CAAc,CACxE,CAAA,CAAA,CAEJ,CACF,EAEAnB,EAAY,YAAc,cC7EnB,MAAMsC,EAAkBrC,EAAA,WAG7B,CAACC,EAAOC,IAAQ,CACV,KAAA,CAAE,WAAAoC,EAAY,UAAA5B,EAAW,MAAA6B,EAAO,QAAAC,EAAS,SAAAC,EAAU,OAAAC,EAAQ,GAAG9B,CAClE,EAAAX,EACIoB,EAAWC,SAAyB,IAAI,EACxCC,EAAcC,EAAetB,EAAKmB,CAAQ,EAE9C,OAAAO,EAACe,EAAA,CACC,WAAAL,EACA,UAAA5B,EACA,SAAAW,EACA,MAAAkB,EACA,QAAAC,EACA,SAAAC,EACA,OAAAC,EAEA,SAACd,EAAA7B,EAAA,CAAa,GAAGa,EAAM,IAAKW,EAAa,CAAA,CAAA,CAG/C,CAAC"}
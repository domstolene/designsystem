{"version":3,"file":"Card.stories-fcbb790d.js","sources":["../../../../packages/core/src/hooks/useIsMounted.ts","../../../../packages/components/src/components/Card/CardAccordion/CardAccordion.tsx","../../../../packages/components/src/components/Card/CardAccordion/CardAccordion.tokens.tsx","../../../../packages/components/src/components/Card/CardAccordion/CardAccordionHeader.tsx","../../../../packages/components/src/components/Card/CardAccordion/useElementHeight.ts","../../../../packages/components/src/components/Card/CardAccordion/CardAccordionBody.tsx"],"sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return useCallback(() => isMounted.current, []);\n};\n","import {\n  forwardRef,\n  useState,\n  useEffect,\n  ReactElement,\n  Children as ReactChildren,\n  cloneElement,\n  isValidElement,\n  useId,\n  useCallback,\n} from 'react';\nimport styled from 'styled-components';\nimport {\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\n\nconst Wrapper = styled.div``;\n\nexport type CardAccordionProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /**Spesifiserer om body skal være utvidet ved innlastning. */\n    isExpanded?: boolean;\n    /**For å lytte til endringer i expanded-state. */\n    onChange?: (expanded: boolean) => void;\n  }\n>;\n\nexport const CardAccordion = forwardRef<HTMLDivElement, CardAccordionProps>(\n  (props, ref) => {\n    const {\n      isExpanded = false,\n      onChange,\n      id,\n      children,\n      className,\n      htmlProps,\n      ...rest\n    } = props;\n\n    const [expanded, setExpanded] = useState(isExpanded);\n\n    const generatedId = useId();\n    const accordionId = id ?? `${generatedId}-cardAccordion`;\n\n    useEffect(() => {\n      setExpanded(isExpanded);\n    }, [isExpanded]);\n\n    const toggleExpanded = useCallback(() => {\n      const newExpanded = !expanded;\n\n      setExpanded(newExpanded);\n\n      if (onChange) {\n        onChange(newExpanded);\n      }\n    }, [expanded, onChange]);\n\n    const Children = ReactChildren.map(children, (child, childIndex) => {\n      const headerId = `${accordionId}-header`;\n      const bodyId = `${accordionId}-body`;\n\n      return (\n        isValidElement(child) &&\n        (childIndex === 0\n          ? cloneElement(child as ReactElement, {\n              isExpanded: expanded,\n              toggleExpanded,\n              id: headerId,\n              bodyId,\n            })\n          : cloneElement(child as ReactElement, {\n              isExpanded: expanded,\n              id: bodyId,\n              headerId,\n            }))\n      );\n    });\n\n    const wrapperProps = {\n      ...getBaseHTMLProps(id, className, htmlProps, rest),\n      ref,\n    };\n    return <Wrapper {...wrapperProps}>{Children}</Wrapper>;\n  }\n);\n\nCardAccordion.displayName = 'CardAccordion';\n","import { ddsBaseTokens } from '@norges-domstoler/dds-design-tokens';\nimport { StaticTypographyType } from '@norges-domstoler/dds-typography';\n\nconst { spacing, border, iconSizes } = ddsBaseTokens;\n\nexport const typographyTypes: {\n  body: StaticTypographyType;\n  header: StaticTypographyType;\n} = {\n  body: 'bodySans03',\n  header: 'headingSans03',\n};\n\nconst header = {\n  padding: `${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX075} ${spacing.SizesDdsSpacingLocalX1} ${spacing.SizesDdsSpacingLocalX15}`,\n  hover: {\n    boxShadow: `0 0 0 ${border.BordersDdsBorderFocusInputfieldStrokeWeight} ${border.BordersDdsBorderFocusInputfieldStroke}`,\n  },\n  focus: {\n    boxShadow: `0 0 0 ${border.BordersDdsBorderFocusCardStrokeWeight} ${border.BordersDdsBorderFocusCardStroke}`,\n  },\n};\n\nconst chevronWrapper = {\n  width: iconSizes.DdsIconsizeMedium,\n  height: iconSizes.DdsIconsizeMedium,\n  marginLeft: spacing.SizesDdsSpacingLocalX05,\n};\n\nconst body = {\n  padding: `${spacing.SizesDdsSpacingLocalX1} ${\n    spacing.SizesDdsSpacingLocalX2NumberPx +\n    spacing.SizesDdsSpacingLocalX075NumberPx\n  }px ${spacing.SizesDdsSpacingLocalX2} ${spacing.SizesDdsSpacingLocalX15}`,\n};\n\nexport const cardAccordionTokens = {\n  header,\n  body,\n  chevronWrapper,\n  chevron: {\n    width: iconSizes.DdsIconsizeMedium,\n    height: spacing.SizesDdsSpacingLocalX05,\n  },\n};\n","import { forwardRef, ButtonHTMLAttributes } from 'react';\nimport styled, { css } from 'styled-components';\nimport {\n  cardAccordionTokens as tokens,\n  typographyTypes,\n} from './CardAccordion.tokens';\nimport {\n  normalizeButton,\n  removeButtonStyling,\n  AnimatedChevronUpDown,\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n} from '@norges-domstoler/dds-core';\nimport {\n  getFontStyling,\n  StaticTypographyType,\n} from '@norges-domstoler/dds-typography';\nimport { Property } from 'csstype';\n\nconst { header, chevronWrapper } = tokens;\n\nconst ContentWrapper = styled.div`\n  text-align: left;\n`;\n\nfunction getTypographyType(props: HeaderProps): StaticTypographyType {\n  const { typographyType } = props;\n\n  return typographyType || typographyTypes.header;\n}\n\ntype HeaderProps = {\n  padding?: Property.Padding<string>;\n  typographyType?: StaticTypographyType;\n  bold?: boolean;\n};\n\nconst HeaderContainer = styled.div<HeaderProps>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  @media (prefers-reduced-motion: no-preference) {\n    transition: box-shadow 0.2s;\n  }\n  padding: ${({ padding }) => padding ?? header.padding};\n  ${props => getFontStyling(getTypographyType(props))}\n  ${props =>\n    props.bold &&\n    css`\n      font-weight: 600;\n    `}\n`;\n\nconst HeaderWrapperButton = styled.button`\n  ${normalizeButton}\n  user-select: text;\n  position: relative;\n  cursor: pointer;\n  @media (prefers-reduced-motion: no-preference) {\n    transition: box-shadow 0.2s;\n  }\n  ${removeButtonStyling}\n  display: block;\n  width: 100%;\n  &:hover {\n    box-shadow: ${header.hover.boxShadow};\n  }\n\n  &:focus-visible,\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${header.focus.boxShadow};\n  }\n`;\n\nconst ChevronWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${chevronWrapper.width};\n  height: ${chevronWrapper.height};\n  margin-left: ${chevronWrapper.marginLeft};\n`;\n\nexport type CardAccordionHeaderProps = BaseComponentPropsWithChildren<\n  HTMLButtonElement,\n  {\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller body er utvidet.  */\n    isExpanded?: boolean;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Callback for å styre utvidelse og sammentrukking.  */\n    toggleExpanded?: () => void;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller `id` til `<CardAccordionBody />`.  */\n    bodyId?: string;\n    /**Overskriver default padding. */\n    padding?: Property.Padding<string>;\n    /**Overskriver default teksttype. */\n    typographyType?: StaticTypographyType;\n    /**Angir om teksten skal være i \"bold\"-format. */\n    bold?: boolean;\n  },\n  ButtonHTMLAttributes<HTMLButtonElement>\n>;\n\nexport const CardAccordionHeader = forwardRef<\n  HTMLButtonElement,\n  CardAccordionHeaderProps\n>((props, ref) => {\n  const {\n    children,\n    isExpanded = false,\n    toggleExpanded,\n    bodyId,\n    id,\n    className,\n    htmlProps,\n    padding,\n    typographyType,\n    bold,\n    ...rest\n  } = props;\n\n  const handleClick = () => {\n    if (toggleExpanded) {\n      toggleExpanded();\n    }\n  };\n\n  const headerWrapperProps = {\n    ...getBaseHTMLProps(id, className, htmlProps, rest),\n    'aria-expanded': isExpanded,\n    'aria-controls': bodyId,\n    ref,\n    onClick: handleClick,\n  };\n\n  const chevronProps = {\n    isUp: isExpanded,\n    width: tokens.chevron.width,\n    height: tokens.chevron.height,\n  };\n\n  return (\n    <HeaderWrapperButton {...headerWrapperProps} type=\"button\">\n      <HeaderContainer\n        typographyType={typographyType}\n        padding={padding}\n        bold={bold}\n      >\n        <ContentWrapper>{children}</ContentWrapper>\n        <ChevronWrapper>\n          <AnimatedChevronUpDown {...chevronProps} />\n        </ChevronWrapper>\n      </HeaderContainer>\n    </HeaderWrapperButton>\n  );\n});\n\nCardAccordionHeader.displayName = 'CardAccordionHeader';\n","import { Nullable } from '@norges-domstoler/dds-core';\nimport { useEffect, useState } from 'react';\n\nexport function useElementHeight(\n  element: HTMLDivElement | null\n): number | null {\n  const [height, setHeight] = useState<Nullable<number>>(null);\n\n  useEffect(() => {\n    if (!element) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      setHeight(element.offsetHeight);\n    });\n\n    resizeObserver.observe(element);\n\n    return () => resizeObserver.disconnect();\n  }, [element]);\n\n  return height;\n}\n","import { Property } from 'csstype';\nimport {\n  forwardRef,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport styled, { css } from 'styled-components';\nimport {\n  useIsMounted,\n  BaseComponentPropsWithChildren,\n  getBaseHTMLProps,\n  Nullable,\n} from '@norges-domstoler/dds-core';\nimport { getFontStyling } from '@norges-domstoler/dds-typography';\n\nimport {\n  cardAccordionTokens as tokens,\n  typographyTypes,\n} from './CardAccordion.tokens';\nimport { useElementHeight } from './useElementHeight';\n\nconst expandingAnimation = css`\n  @media (prefers-reduced-motion: no-preference) {\n    transition: height 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nfunction getPadding(props: BodyContainerProps): string {\n  const { padding } = props;\n\n  return padding || tokens.body.padding;\n}\n\ntype BodyProps = {\n  isExpanded?: boolean;\n  animate: boolean;\n  height: number;\n};\n\nconst Body = styled.div<BodyProps>`\n  @media (prefers-reduced-motion: no-preference) {\n    ${({ animate }) => animate && expandingAnimation}\n  }\n  ${getFontStyling(typographyTypes.body)}\n  height: ${({ height, isExpanded }) => (isExpanded ? height : 0)}px;\n  overflow: hidden;\n`;\n\ntype BodyContainerProps = {\n  isExpanded?: boolean;\n  maxHeight?: number;\n  animate: boolean;\n  paddingTop?: Property.PaddingTop<string>;\n  padding?: Property.Padding<string>;\n};\n\nconst BodyContainer = styled.div<BodyContainerProps>`\n  padding: ${getPadding};\n\n  ${({ paddingTop }) =>\n    paddingTop &&\n    css`\n      padding-top: ${paddingTop};\n    `}\n`;\n\nexport type CardAccordionBodyProps = BaseComponentPropsWithChildren<\n  HTMLDivElement,\n  {\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller komponenten om den skal utvides.  */\n    isExpanded?: boolean;\n    /** **OBS!** denne propen blir satt automatisk av forelder. Forteller `id` til `<CardAccordionHeader />`.  */\n    headerId?: string;\n    /**Overskriver default padding på toppen. Brukes når barn har spacing på toppen, f.eks. en overskrift. */\n    paddingTop?: Property.PaddingTop<string>;\n    /**Overskriver default padding. */\n    padding?: Property.Padding<string>;\n  }\n>;\n\nexport const CardAccordionBody = forwardRef<\n  HTMLDivElement,\n  CardAccordionBodyProps\n>((props, ref) => {\n  const {\n    children,\n    isExpanded,\n    headerId,\n    id,\n    className,\n    htmlProps,\n    padding,\n    paddingTop,\n    ...rest\n  } = props;\n\n  const bodyRef = useRef<HTMLDivElement>(null);\n\n  const [animate, setAnimate] = useState(false);\n\n  const isMounted = useIsMounted();\n  const height = useElementHeight(bodyRef.current);\n\n  const [initialExpandedHeight, setIntialExpandedHeight] =\n    useState<Nullable<number>>(null);\n\n  useLayoutEffect(() => {\n    // For å unngå initiell animasjon dersom Accordion er satt til å være åpen som default.\n    if (bodyRef.current && isExpanded) {\n      setIntialExpandedHeight(bodyRef.current.scrollHeight);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isMounted()) {\n      setAnimate(true);\n    }\n  }, [isMounted]);\n\n  const bodyProps = {\n    ...getBaseHTMLProps(id, className, htmlProps, rest),\n    ref,\n    isExpanded,\n    role: 'region',\n    height: height || initialExpandedHeight || 0,\n  };\n  const bodyContainerProps = {\n    ref: bodyRef,\n    isExpanded,\n    padding,\n    paddingTop,\n  };\n\n  return (\n    <Body\n      {...bodyProps}\n      animate={animate}\n      aria-labelledby={headerId}\n      aria-hidden={!isExpanded}\n    >\n      <BodyContainer {...bodyContainerProps} animate={animate}>\n        {children}\n      </BodyContainer>\n    </Body>\n  );\n});\n\nCardAccordionBody.displayName = 'CardAccordionBody';\n"],"names":["useIsMounted","isMounted","useRef","useEffect","useCallback","Wrapper","styled","CardAccordion","forwardRef","props","ref","isExpanded","onChange","id","children","className","htmlProps","rest","expanded","setExpanded","useState","generatedId","useId","accordionId","toggleExpanded","newExpanded","Children","ReactChildren","child","childIndex","headerId","bodyId","isValidElement","cloneElement","wrapperProps","getBaseHTMLProps","jsx","spacing","border","iconSizes","ddsBaseTokens","typographyTypes","header","chevronWrapper","body","cardAccordionTokens","tokens","ContentWrapper","getTypographyType","typographyType","HeaderContainer","padding","getFontStyling","css","HeaderWrapperButton","normalizeButton","removeButtonStyling","ChevronWrapper","CardAccordionHeader","bold","handleClick","headerWrapperProps","chevronProps","jsxs","AnimatedChevronUpDown","useElementHeight","element","height","setHeight","resizeObserver","expandingAnimation","getPadding","Body","animate","BodyContainer","paddingTop","CardAccordionBody","bodyRef","setAnimate","initialExpandedHeight","setIntialExpandedHeight","useLayoutEffect","bodyProps"],"mappings":"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"}
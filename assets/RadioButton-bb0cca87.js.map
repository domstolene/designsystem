{"version":3,"file":"RadioButton-bb0cca87.js","sources":["../../../../packages/components/src/components/SelectionControl/RadioButton/RadioButtonGroupContext.tsx","../../../../packages/components/src/components/SelectionControl/RadioButton/RadioButton.tsx"],"sourcesContent":["import { Nullable } from '@norges-domstoler/dds-core';\nimport React, { ChangeEvent, useContext } from 'react';\n\nexport interface RadioButtonGroup {\n  disabled: boolean;\n  readOnly: boolean;\n  name?: string;\n  value?: string | number | null;\n  error: boolean;\n  errorMessageId?: string;\n  required: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const RadioButtonGroupContext =\n  React.createContext<Nullable<RadioButtonGroup>>(null);\n\nexport const useRadioButtonGroup = () => {\n  return useContext(RadioButtonGroupContext);\n};\n","import { ChangeEvent, forwardRef, useId } from 'react';\nimport {\n  getBaseHTMLProps,\n  joinClassNames,\n  Nullable,\n} from '@norges-domstoler/dds-core';\nimport { Typography } from '@norges-domstoler/dds-typography';\nimport { HiddenInput } from '@norges-domstoler/dds-form';\n\nimport { RadioButtonProps } from './RadioButton.types';\nimport {\n  RadioButtonGroup,\n  useRadioButtonGroup,\n} from './RadioButtonGroupContext';\nimport { Container, CustomSelectionControl } from '../SelectionControl.styles';\n\nconst isValueEqualToGroupValueOrFalsy = (\n  value: unknown,\n  group: Nullable<RadioButtonGroup>,\n): boolean => {\n  if (typeof value !== 'undefined' && value !== null && group) {\n    if (typeof value === 'number') {\n      return value === Number(group?.value);\n    }\n    return value === group?.value;\n  }\n  return !!value;\n};\n\nexport const RadioButton = forwardRef<HTMLInputElement, RadioButtonProps>(\n  (props, ref) => {\n    const {\n      id,\n      name,\n      label,\n      disabled = false,\n      readOnly = false,\n      error = false,\n      checked,\n      value,\n      children,\n      required = false,\n      onChange,\n      'aria-describedby': ariaDescribedby,\n      className,\n      htmlProps = {},\n      ...rest\n    } = props;\n\n    const {\n      className: htmlPropsClassName,\n      style,\n      ...restHtmlProps\n    } = htmlProps;\n\n    const generatedId = useId();\n    const uniqueId = id ?? `${generatedId}-radioButton`;\n    const hasLabel = !!label;\n\n    const radioButtonGroup = useRadioButtonGroup();\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(event);\n      radioButtonGroup?.onChange(event);\n    };\n\n    const describedByIds = [];\n    if (radioButtonGroup?.errorMessageId)\n      describedByIds.push(radioButtonGroup?.errorMessageId);\n    if (ariaDescribedby) describedByIds.push(ariaDescribedby);\n\n    const inputProps = {\n      ...getBaseHTMLProps(uniqueId, restHtmlProps, rest),\n      type: 'radio',\n      name: name ?? radioButtonGroup?.name,\n      disabled:\n        disabled ||\n        readOnly ||\n        !!radioButtonGroup?.disabled ||\n        !!radioButtonGroup?.readOnly,\n      required: required || !!radioButtonGroup?.required,\n      checked:\n        typeof checked !== 'undefined'\n          ? checked\n          : isValueEqualToGroupValueOrFalsy(value, radioButtonGroup),\n      onChange: handleChange,\n      value: value,\n      'aria-describedby':\n        describedByIds.length > 0 ? describedByIds.join(' ') : undefined,\n      'aria-invalid': error || radioButtonGroup?.error ? true : undefined,\n    };\n\n    const containerProps = {\n      error: error || radioButtonGroup?.error,\n      disabled: disabled || radioButtonGroup?.disabled,\n      readOnly: readOnly || radioButtonGroup?.readOnly,\n      style,\n      className: joinClassNames(className, htmlPropsClassName),\n      htmlFor: uniqueId,\n      controlType: 'radio',\n      hasLabel,\n    };\n\n    return (\n      <Container {...containerProps} htmlFor={uniqueId} controlType=\"radio\">\n        <HiddenInput {...inputProps} ref={ref} />\n        <CustomSelectionControl controlType=\"radio\" />\n        <Typography as=\"span\">{children ?? label}</Typography>\n      </Container>\n    );\n  },\n);\n\nRadioButton.displayName = 'RadioButton';\n"],"names":["RadioButtonGroupContext","React","useRadioButtonGroup","useContext","isValueEqualToGroupValueOrFalsy","value","group","RadioButton","forwardRef","props","ref","id","name","label","disabled","readOnly","error","checked","children","required","onChange","ariaDescribedby","className","htmlProps","rest","htmlPropsClassName","style","restHtmlProps","generatedId","useId","uniqueId","hasLabel","radioButtonGroup","handleChange","event","describedByIds","inputProps","getBaseHTMLProps","containerProps","joinClassNames","jsxs","Container","jsx","HiddenInput","CustomSelectionControl","Typography"],"mappings":"mhBAca,MAAAA,EACXC,EAAM,cAA0C,IAAI,EAEzCC,EAAsB,IAC1BC,EAAAA,WAAWH,CAAuB,ECF3CI,EAAA,CAAAC,EAAAC,IAIE,OAAAD,EAAA,KAAAA,IAAA,MAAAC,EACE,OAAAD,GAAA,SACEA,IAAA,OAAAC,GAAA,YAAAA,EAAA,KAAA,EAEFD,KAAAC,GAAA,YAAAA,EAAA,OAEF,CAAA,CAAAD,EAGKE,EAAAC,EAAA,WAAoB,CAAAC,EAAAC,IAAA,CAEvB,KAAA,CAAM,GAAAC,EACJ,KAAAC,EACA,MAAAC,EACA,SAAAC,EAAA,GACW,SAAAC,EAAA,GACA,MAAAC,EAAA,GACH,QAAAC,EACR,MAAAZ,EACA,SAAAa,EACA,SAAAC,EAAA,GACW,SAAAC,EACX,mBAAAC,EACoB,UAAAC,EACpB,UAAAC,EAAA,CAAA,EACa,GAAAC,CACV,EAAAf,EAGL,CAAM,UAAAgB,EACO,MAAAC,EACX,GAAAC,CACG,EAAAJ,EAGLK,EAAAC,EAAAA,QACAC,EAAAnB,GAAA,GAAAiB,CAAA,eACAG,EAAA,CAAA,CAAAlB,EAEAmB,EAAA9B,IAEA+B,EAAAC,GAAA,CACEd,GAAAA,EAAAc,CAAA,EACAF,GAAA,MAAAA,EAAA,SAAAE,EAAgC,EAGlCC,EAAA,CAAA,EACAH,GAAA,MAAAA,EAAA,gBACEG,EAAA,KAAAH,GAAA,YAAAA,EAAA,cAAA,EACFX,GAAqBc,EAAA,KAAAd,CAAA,EAErB,MAAAe,EAAA,CAAmB,GAAAC,EAAAP,EAAAH,EAAAH,CAAA,EACgC,KAAA,QAC3C,KAAAZ,IAAAoB,GAAA,YAAAA,EAAA,MAC0B,SAAAlB,GAAAC,GAAA,CAAA,EAAAiB,GAAA,MAAAA,EAAA,WAAA,CAAA,EAAAA,GAAA,MAAAA,EAAA,UAKV,SAAAb,GAAA,CAAA,EAAAa,GAAA,MAAAA,EAAA,UACoB,QAAA,OAAAf,EAAA,IAAAA,EAAAb,EAAAC,EAAA2B,CAAA,EAImB,SAAAC,EACnD,MAAA5B,EACV,mBAAA8B,EAAA,OAAA,EAAAA,EAAA,KAAA,GAAA,EAAA,OAEyD,eAAAnB,GAAAgB,GAAA,MAAAA,EAAA,MAAA,GAAA,MACC,EAG5DM,EAAA,CAAuB,MAAAtB,IAAAgB,GAAA,YAAAA,EAAA,OACa,SAAAlB,IAAAkB,GAAA,YAAAA,EAAA,UACM,SAAAjB,IAAAiB,GAAA,YAAAA,EAAA,UACA,MAAAN,EACxC,UAAAa,EAAAjB,EAAAG,CAAA,EACuD,QAAAK,EAC9C,YAAA,QACI,SAAAC,CACb,EAGF,OAAAS,EAAAC,EAAA,CAAA,GAAAH,EAAA,QAAAR,EAAA,YAAA,QAAA,SAAA,CAEIY,EAAAC,EAAA,CAAA,GAAAP,EAAA,IAAA1B,CAAA,CAAA,EAAuCgC,EAAAE,EAAA,CAAA,YAAA,OAAA,CAAA,EACKF,EAAAG,EAAA,CAAA,GAAA,OAAA,SAAA3B,GAAAL,EAAA,CACH,CAAA,CAAA,CAC3C,CAGN,EAEAN,EAAA,YAAA"}